#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
#ifndef HMSSDK_SWIFT_H
#define HMSSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFAudio;
@import CoreFoundation;
@import CoreVideo;
@import Foundation;
@import HMSAnalyticsSDK;
@import HMSWebRTC;
@import ObjectiveC;
@import UIKit;
#endif

#import <HMSSDK/HMSSDK.h>

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="HMSSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)




SWIFT_CLASS("_TtC6HMSSDK12HMSAudioNode")
@interface HMSAudioNode : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AVAudioPCMBuffer;

SWIFT_CLASS("_TtC6HMSSDK24HMSAudioBufferPlayerNode")
@interface HMSAudioBufferPlayerNode : HMSAudioNode
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic) float volume;
- (BOOL)playWithBuffer:(AVAudioPCMBuffer * _Nonnull)buffer error:(NSError * _Nullable * _Nullable)error;
- (void)pause;
- (BOOL)resumeAndReturnError:(NSError * _Nullable * _Nullable)error;
- (void)stop;
@property (nonatomic, readonly) BOOL isPlaying;
@end


SWIFT_CLASS("_TtC6HMSSDK14HMSAudioSource")
@interface HMSAudioSource : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AVAudioBuffer;

SWIFT_CLASS("_TtC6HMSSDK20HMSAudioBufferSource")
@interface HMSAudioBufferSource : HMSAudioSource
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)enqueueWithBuffer:(AVAudioBuffer * _Nonnull)buffer;
@end

@class NSURL;

SWIFT_CLASS("_TtC6HMSSDK22HMSAudioFilePlayerNode")
@interface HMSAudioFilePlayerNode : HMSAudioNode
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic) float volume;
- (BOOL)playWithFileUrl:(NSURL * _Nonnull)fileUrl loops:(BOOL)loops interrupts:(BOOL)interrupts error:(NSError * _Nullable * _Nullable)error completionHandler:(AVAudioNodeCompletionHandler _Nullable)completionHandler;
- (void)pause;
- (BOOL)resumeAndReturnError:(NSError * _Nullable * _Nullable)error;
- (void)stop;
@property (nonatomic, readonly) BOOL isPlaying;
@property (nonatomic, readonly) NSTimeInterval currentTime;
@property (nonatomic, readonly) NSTimeInterval duration;
@end


SWIFT_CLASS("_TtC6HMSSDK19HMSAudioInputDevice")
@interface HMSAudioInputDevice : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HMSAudioInputDevice * _Nonnull systemDefault;)
+ (HMSAudioInputDevice * _Nonnull)systemDefault SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6HMSSDK19HMSAudioMixerSource") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface HMSAudioMixerSource : HMSAudioSource
- (nullable instancetype)initWithNodes:(NSArray<HMSAudioNode *> * _Nonnull)nodes error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (void)reconnect;
@end



SWIFT_CLASS("_TtC6HMSSDK20HMSAudioOutputDevice")
@interface HMSAudioOutputDevice : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HMSAudioOutputDevice * _Nonnull speaker;)
+ (HMSAudioOutputDevice * _Nonnull)speaker SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HMSAudioOutputDevice * _Nonnull earpiece;)
+ (HMSAudioOutputDevice * _Nonnull)earpiece SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSString;

SWIFT_CLASS("_TtC6HMSSDK16HMSAudioSettings")
@interface HMSAudioSettings : NSObject
@property (nonatomic, readonly) NSInteger bitRate;
@property (nonatomic, readonly, copy) NSString * _Nonnull codec;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@class NSDate;
enum HMSRecordingState : NSInteger;

SWIFT_CLASS("_TtC6HMSSDK21HMSBaseRecordingState")
@interface HMSBaseRecordingState : NSObject
@property (nonatomic, readonly) BOOL initialising;
@property (nonatomic, readonly) BOOL running;
@property (nonatomic, readonly, copy) NSDate * _Nullable startedAt;
@property (nonatomic, readonly) NSError * _Nullable error;
@property (nonatomic, readonly) enum HMSRecordingState state;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum HMSStreamingState : NSInteger;

SWIFT_CLASS("_TtC6HMSSDK21HMSBaseStreamingState")
@interface HMSBaseStreamingState : NSObject
@property (nonatomic, readonly) BOOL running;
@property (nonatomic, readonly, copy) NSDate * _Nullable startedAt;
@property (nonatomic, readonly) NSError * _Nullable error;
@property (nonatomic, readonly) enum HMSStreamingState state;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6HMSSDK24HMSBrowserRecordingState")
@interface HMSBrowserRecordingState : HMSBaseRecordingState
@end

@class HMSTrack;
@class HMSPeer;

SWIFT_CLASS("_TtC6HMSSDK26HMSChangeTrackStateRequest")
@interface HMSChangeTrackStateRequest : NSObject
@property (nonatomic, readonly, strong) HMSTrack * _Nonnull track;
@property (nonatomic, readonly) BOOL mute;
@property (nonatomic, readonly, strong) HMSPeer * _Nullable requestedBy;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, HMSCommandPriority, open) {
  HMSCommandPriorityLow = 0,
  HMSCommandPriorityMedium = 1,
  HMSCommandPriorityHigh = 2,
};


SWIFT_CLASS("_TtC6HMSSDK20HMSCommonTrackSource")
@interface HMSCommonTrackSource : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull regular;)
+ (NSString * _Nonnull)regular SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull screen;)
+ (NSString * _Nonnull)screen SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull plugin;)
+ (NSString * _Nonnull)plugin SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class HMSProxyConfig;
@class HMSICEServer;

/// To join a room created, clients need to create a HMSConfig instance and use that instance to call <code>join</code> method of HMSSDK
SWIFT_CLASS("_TtC6HMSSDK9HMSConfig")
@interface HMSConfig : NSObject
/// the name that the user wants to be displayed while in the room
@property (nonatomic, readonly, copy) NSString * _Nonnull userName;
@property (nonatomic, readonly, copy) NSString * _Nonnull userID;
@property (nonatomic, readonly, copy) NSString * _Nonnull roomID;
/// the auth token to be used
@property (nonatomic, readonly, copy) NSString * _Nonnull authToken;
@property (nonatomic, readonly) BOOL shouldSkipPIIEvents;
/// any json string or metadata that can be passed while joining
@property (nonatomic, readonly, copy) NSString * _Nullable metadata;
/// to override the default endpoint (advanced)
@property (nonatomic, readonly, copy) NSString * _Nullable endpoint;
/// use custom proxy for signalling connection (advanced)
@property (nonatomic, readonly, strong) HMSProxyConfig * _Nullable proxy;
/// use custom STUN/TURN servers  for media connection (advanced)
@property (nonatomic, readonly, copy) NSArray<HMSICEServer *> * _Nullable iceServers;
/// if enabled, SDK will try to estimate the quality of the network when preview API is called.
@property (nonatomic, readonly) BOOL captureNetworkQualityInPreview;
- (nonnull instancetype)initWithUserName:(NSString * _Nonnull)userName authToken:(NSString * _Nonnull)authToken shouldSkipPIIEvents:(BOOL)shouldSkipPIIEvents metadata:(NSString * _Nullable)metadata endpoint:(NSString * _Nullable)endpoint captureNetworkQualityInPreview:(BOOL)captureNetworkQualityInPreview proxy:(HMSProxyConfig * _Nullable)proxy iceServers:(NSArray<HMSICEServer *> * _Nullable)iceServers OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithUserName:(NSString * _Nonnull)userName userID:(NSString * _Nonnull)userID roomID:(NSString * _Nonnull)roomID authToken:(NSString * _Nonnull)authToken shouldSkipPIIEvents:(BOOL)shouldSkipPIIEvents metadata:(NSString * _Nullable)metadata endpoint:(NSString * _Nullable)endpoint OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Use init(userName:authToken:)");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6HMSSDK9HMSDevice")
@interface HMSDevice : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, HMSErrorAction, open) {
  HMSErrorActionNone = 0,
  HMSErrorActionTrack = 1,
  HMSErrorActionInit = 2,
  HMSErrorActionPublish = 3,
  HMSErrorActionJoin = 4,
  HMSErrorActionSubscribe = 5,
  HMSErrorActionDataChannelSend = 6,
  HMSErrorActionToken = 7,
};

@class NSError;

SWIFT_CLASS("_TtC6HMSSDK15HMSErrorFactory")
@interface HMSErrorFactory : NSObject
- (NSError * _Nonnull)websocketConnectionLostWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)httpErrorWithCode:(NSInteger)code action:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)invalidEndpointUrlWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)endpointUnreachableWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)invalidTokenFormatWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)genericTrackWithAction:(enum HMSErrorAction)action errorInfo:(NSString * _Nonnull)errorInfo params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)cantAccessCaptureDeviceWithAction:(enum HMSErrorAction)action deviceInfo:(NSString * _Nonnull)deviceInfo params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)nothingToReturnWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)codecChangeNotPermittedWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)audiovideoSubsystemFailureWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)audiovideoSubsystemFailureWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params message:(NSString * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)audiovideoSubsystemInUseWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params message:(NSString * _Nonnull)message isTerminal:(BOOL)isTerminal SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)micCaptureFailedWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)createOfferFailedWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)createAnswerFailedWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)setLocalDescriptionFailedWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)setRemoteDescriptionFailedWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)iceFailureWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)iceDisconnectedWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)serverErrorsWithCode:(NSInteger)code action:(enum HMSErrorAction)action serverError:(NSString * _Nonnull)serverError params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)alreadyJoinedWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)notConnectedWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)unknownWithAction:(enum HMSErrorAction)action errorInfo:(NSString * _Nonnull)errorInfo params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)unknownSoftWithAction:(enum HMSErrorAction)action errorInfo:(NSString * _Nonnull)errorInfo params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nullable)nsErrorWithError:(NSError * _Nullable)error params:(NSDictionary<NSString *, id> * _Nullable)params isTerminal:(BOOL)isTerminal message:(NSString * _Nullable)message SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)jsonParsingFailedWithAction:(enum HMSErrorAction)action jsonMessage:(NSString * _Nonnull)jsonMessage params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)trackMetadataMissingWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)rtcTrackMissingWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)peerMetadataMissingWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6HMSSDK21HMSFeaturePermissions")
@interface HMSFeaturePermissions : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIImage;

SWIFT_CLASS("_TtC6HMSSDK21HMSFrameCapturePlugin")
@interface HMSFrameCapturePlugin : HMSVideoPlugin
- (UIImage * _Nullable)capture SWIFT_WARN_UNUSED_RESULT;
- (CVPixelBufferRef _Nonnull)process:(CVPixelBufferRef _Nonnull)frame SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class HMSHLSMeetingURLVariant;
@class HMSHLSRecordingConfig;

SWIFT_CLASS("_TtC6HMSSDK12HMSHLSConfig")
@interface HMSHLSConfig : NSObject
/// Meeting url variants that would be used as sources of HLS streams
@property (nonatomic, readonly, copy) NSArray<HMSHLSMeetingURLVariant *> * _Nullable variants;
/// Recording parameters in case recording is required
@property (nonatomic, readonly, strong) HMSHLSRecordingConfig * _Nullable recording;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithVariants:(NSArray<HMSHLSMeetingURLVariant *> * _Nullable)variants recording:(HMSHLSRecordingConfig * _Nullable)recording OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6HMSSDK23HMSHLSMeetingURLVariant")
@interface HMSHLSMeetingURLVariant : NSObject
/// Single click meeting url which we need to start streaming
@property (nonatomic, readonly, copy) NSURL * _Nullable meetingURL;
@property (nonatomic, readonly, copy) NSString * _Nonnull metadata;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithMeetingURL:(NSURL * _Nullable)meetingURL metadata:(NSString * _Nonnull)metadata OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, HMSHLSPlaylistType, open) {
  HMSHLSPlaylistTypeDvr = 0,
  HMSHLSPlaylistTypeNoDVR = 1,
};


SWIFT_CLASS("_TtC6HMSSDK21HMSHLSRecordingConfig")
@interface HMSHLSRecordingConfig : NSObject
@property (nonatomic, readonly) BOOL singleFilePerLayer;
@property (nonatomic, readonly) BOOL enableVOD;
- (nonnull instancetype)initWithSingleFilePerLayer:(BOOL)singleFilePerLayer enableVOD:(BOOL)enableVOD OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6HMSSDK20HMSHLSRecordingState")
@interface HMSHLSRecordingState : HMSBaseRecordingState
@end

@class HMSHLSVariant;

SWIFT_CLASS("_TtC6HMSSDK20HMSHLSStreamingState")
@interface HMSHLSStreamingState : HMSBaseStreamingState
@property (nonatomic, readonly, copy) NSArray<HMSHLSVariant *> * _Nonnull variants;
@property (nonatomic, readonly) NSUInteger hash;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC6HMSSDK19HMSHLSTimedMetadata")
@interface HMSHLSTimedMetadata : NSObject
- (nonnull instancetype)initWithPayload:(NSString * _Nonnull)payload duration:(NSInteger)duration OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6HMSSDK13HMSHLSVariant")
@interface HMSHLSVariant : NSObject
@property (nonatomic, readonly, copy) NSURL * _Nullable url;
@property (nonatomic, readonly, copy) NSURL * _Nonnull meetingURL;
@property (nonatomic, readonly, copy) NSString * _Nonnull metadata;
@property (nonatomic, readonly, copy) NSDate * _Nullable startedAt;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) NSUInteger hash;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end

@class HMSPoll;
enum HMSPollUpdateType : NSInteger;
@class HMSPollBuilder;
@class HMSPollResponseBuilder;
@class HMSPollQuestionResponseResult;
enum HMSPollState : NSInteger;
@class HMSPollQuestionResponse;
@class HMSPollLeaderboardResponse;

/// Provides interactivity features.
SWIFT_CLASS("_TtC6HMSSDK22HMSInteractivityCenter")
@interface HMSInteractivityCenter : NSObject
@property (nonatomic) BOOL isWhiteboardEnabled;
/// The array of polls managed by the interactivity center.
@property (nonatomic, copy) NSArray<HMSPoll *> * _Nonnull polls;
/// Adds a poll update listener to receive poll updates.
/// \param listener The closure to be called when a poll update occurs.
///
- (void)addPollUpdateListner:(void (^ _Nonnull)(HMSPoll * _Nonnull, enum HMSPollUpdateType))listener;
/// Creates a poll, sets the poll questions and starts it with the provided poll builder.
/// \param builder The poll builder used to create the poll.
///
/// \param completion The closure to be called upon completion, indicating the success or failure of the operation.
///
- (void)quickStartPollWith:(HMSPollBuilder * _Nonnull)builder completion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
/// Creates a new poll.
/// \param poll The poll object to create.
///
/// \param completion The closure to be called upon completion, indicating the success or failure of the operation.
///
- (void)createWithPoll:(HMSPoll * _Nonnull)poll completion:(HMSOperationStatusHandler _Nonnull)completion;
/// Starts a poll.
/// \param poll The poll to start.
///
/// \param completion The closure to be called upon completion, indicating the success or failure of the operation.
///
- (void)startWithPoll:(HMSPoll * _Nonnull)poll completion:(HMSOperationStatusHandler _Nonnull)completion;
/// Adds a poll response.
/// \param response The poll response builder.
///
/// \param completion The closure to be called upon completion, providing the response result or an error.
///
- (void)addWithResponse:(HMSPollResponseBuilder * _Nonnull)response completion:(void (^ _Nonnull)(NSArray<HMSPollQuestionResponseResult *> * _Nullable, NSError * _Nullable))completion;
/// Stops a poll.
/// \param poll The poll to stop.
///
/// \param completion The closure to be called upon completion, indicating the success or failure of the operation.
///
- (void)stopWithPoll:(HMSPoll * _Nonnull)poll completion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
/// Fetches the questions for a poll.
/// \param poll The poll to fetch questions for.
///
/// \param completion The closure to be called upon completion, providing the fetched poll object or an error.
///
- (void)fetchPollQuestionsWithPoll:(HMSPoll * _Nonnull)poll completion:(void (^ _Nonnull)(HMSPoll * _Nullable, NSError * _Nullable))completion;
/// Fetches the list of polls based on the given poll state.
/// \param state The state of the polls to fetch.
///
/// \param completion The closure to be called upon completion, providing the fetched poll list or an error.
///
- (void)fetchPollListWithState:(enum HMSPollState)state completion:(void (^ _Nonnull)(NSArray<HMSPoll *> * _Nullable, NSError * _Nullable))completion;
/// Fetches the responses for a poll.
/// \param poll The poll to fetch responses for.
///
/// \param offset The starting index of the responses.
///
/// \param count The number of responses to fetch.
///
/// \param myResponseOnly A flag indicating whether to fetch only the responses of the current user (default is <code>false</code>).
///
/// \param completion The closure to be called upon completion, providing the fetched responses or an error.
///
- (void)fetchResponsesFor:(HMSPoll * _Nonnull)poll offset:(NSInteger)offset count:(NSInteger)count myResponseOnly:(BOOL)myResponseOnly completion:(void (^ _Nonnull)(NSArray<HMSPollQuestionResponse *> * _Nullable, NSError * _Nullable))completion;
/// Fetches the result of a poll.
/// \param poll The poll to fetch the result for.
///
/// \param completion The closure to be called upon completion, providing the fetched poll object or an error.
///
- (void)fetchPollResultFor:(HMSPoll * _Nonnull)poll completion:(void (^ _Nonnull)(HMSPoll * _Nullable, NSError * _Nullable))completion;
/// Fetches the leaderboard for a poll.
/// \param poll The poll to fetch leaderboard for.
///
/// \param offset The starting index of leaderboard entries.
///
/// \param count The number of leaderboard entries to fetch.
///
/// \param includeCurrentPeer If <code>true</code> the current peer will be included in the results regardless of the actual position on the board.
///
/// \param completion The closure to be called upon completion, providing the fetched leaderboard entries or an error.
///
- (void)fetchLeaderboardFor:(HMSPoll * _Nonnull)poll offset:(NSInteger)offset count:(NSInteger)count includeCurrentPeer:(BOOL)includeCurrentPeer completion:(void (^ _Nonnull)(HMSPollLeaderboardResponse * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class HMSWhiteboard;
enum HMSWhiteboardUpdateType : NSInteger;

@interface HMSInteractivityCenter (SWIFT_EXTENSION(HMSSDK))
- (void)addWhiteboardUpdateListener:(void (^ _Nonnull)(HMSWhiteboard * _Nonnull, enum HMSWhiteboardUpdateType))listener;
- (void)startWhiteboardWithCompletion:(HMSOperationStatusHandler _Nonnull)completion;
- (void)stopWhiteboardWithCompletion:(HMSOperationStatusHandler _Nonnull)completion;
@end

enum HMSPeerType : NSInteger;
@class HMSRole;
@class HMSAudioTrack;
@class HMSVideoTrack;
@class HMSNetworkQuality;

/// A peer represents all participants connected to a room. Peers can be “local” or “remote”
SWIFT_CLASS("_TtC6HMSSDK7HMSPeer")
@interface HMSPeer : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull peerID;
@property (nonatomic, readonly, copy) NSString * _Nullable customerUserID;
@property (nonatomic, readonly) BOOL isLocal;
@property (nonatomic, readonly) enum HMSPeerType type;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, strong) HMSRole * _Nullable role;
@property (nonatomic, readonly, copy) NSString * _Nullable metadata;
@property (nonatomic, readonly, strong) HMSAudioTrack * _Nullable audioTrack;
@property (nonatomic, readonly, strong) HMSVideoTrack * _Nullable videoTrack;
@property (nonatomic, readonly, copy) NSArray<HMSTrack *> * _Nullable auxiliaryTracks;
@property (nonatomic, readonly, strong) HMSNetworkQuality * _Nullable networkQuality;
@property (nonatomic, readonly) BOOL isHandRaised;
@property (nonatomic, readonly, copy) NSDate * _Nonnull joinedAt;
@property (nonatomic, readonly, copy) NSDate * _Nonnull updatedAt;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class HMSLocalAudioTrack;
@class HMSLocalVideoTrack;

SWIFT_CLASS("_TtC6HMSSDK12HMSLocalPeer")
@interface HMSLocalPeer : HMSPeer
- (HMSLocalAudioTrack * _Nullable)localAudioTrack SWIFT_WARN_UNUSED_RESULT;
- (HMSLocalVideoTrack * _Nullable)localVideoTrack SWIFT_WARN_UNUSED_RESULT;
@end

@class NSData;
@class HMSRTCVideoTrack;

SWIFT_CLASS("_TtC6HMSSDK19HMSLocalScreenTrack")
@interface HMSLocalScreenTrack : HMSVideoTrack <HMSScreenVideoBufferReceiver>
- (void)didReceiveVideoData:(NSData * _Nonnull)data SWIFT_AVAILABILITY(ios,introduced=16.0);
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (null_unspecified instancetype)initWithRTCTrack:(HMSRTCVideoTrack * _Null_unspecified)track SWIFT_UNAVAILABLE;
@end

@class HMSMessageRecipient;

SWIFT_CLASS("_TtC6HMSSDK10HMSMessage")
@interface HMSMessage : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull messageID;
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
@property (nonatomic, strong) HMSPeer * _Nullable sender;
@property (nonatomic, strong) HMSMessageRecipient * _Nonnull recipient;
@property (nonatomic, readonly, copy) NSDate * _Nonnull time;
- (nonnull instancetype)initWithMessage:(NSString * _Nonnull)message type:(NSString * _Nonnull)type OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithMessage:(NSString * _Nonnull)message type:(NSString * _Nonnull)type peerRecipient:(HMSPeer * _Nonnull)peerRecipient OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithMessage:(NSString * _Nonnull)message type:(NSString * _Nonnull)type rolesRecipient:(NSArray<HMSRole *> * _Nonnull)rolesRecipient OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum HMSMessageRecipientType : NSInteger;

SWIFT_CLASS("_TtC6HMSSDK19HMSMessageRecipient")
@interface HMSMessageRecipient : NSObject
@property (nonatomic, readonly) enum HMSMessageRecipientType type;
@property (nonatomic, readonly, strong) HMSPeer * _Nullable peerRecipient;
@property (nonatomic, readonly, copy) NSArray<HMSRole *> * _Nullable rolesRecipient;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, HMSMessageRecipientType, open) {
  HMSMessageRecipientTypeBroadcast = 0,
  HMSMessageRecipientTypePeer = 1,
  HMSMessageRecipientTypeRoles = 2,
};


SWIFT_CLASS("_TtC6HMSSDK10HMSMicNode")
@interface HMSMicNode : HMSAudioNode
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic) float volume;
@end


SWIFT_CLASS("_TtC6HMSSDK17HMSNetworkQuality")
@interface HMSNetworkQuality : NSObject
@property (nonatomic, readonly) NSInteger downlinkQuality;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6HMSSDK26HMSNoiseCancellationPlugin")
@interface HMSNoiseCancellationPlugin : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull modelPath;
@property (nonatomic, readonly) HMSNoiseCancellationInitialState initialState;
- (nonnull instancetype)initWithModelPath:(NSString * _Nonnull)modelPath initialState:(HMSNoiseCancellationInitialState)initialState OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) BOOL isNoiseCancellationAvailable;
- (BOOL)isEnabled SWIFT_WARN_UNUSED_RESULT;
- (BOOL)enableAndReturnError:(NSError * _Nullable * _Nullable)error;
- (BOOL)disableAndReturnError:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




typedef SWIFT_ENUM(NSInteger, HMSPeerType, open) {
  HMSPeerTypeRegular = 0,
  HMSPeerTypeSip = 1,
};

typedef SWIFT_ENUM(NSInteger, HMSPeerUpdate, open) {
  HMSPeerUpdatePeerJoined = 0,
  HMSPeerUpdatePeerLeft = 1,
  HMSPeerUpdateRoleUpdated = 2,
  HMSPeerUpdateNameUpdated = 3,
  HMSPeerUpdateMetadataUpdated = 4,
  HMSPeerUpdateHandRaiseUpdated = 5,
  HMSPeerUpdateNetworkQualityUpdated = 6,
  HMSPeerUpdateDefaultUpdate = 7,
};

@class HMSWhiteboardPermissions;

SWIFT_CLASS("_TtC6HMSSDK14HMSPermissions")
@interface HMSPermissions : NSObject
@property (nonatomic, strong) HMSWhiteboardPermissions * _Nullable whiteboard;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class HMSPluginSupportResult;

SWIFT_PROTOCOL("_TtP6HMSSDK9HMSPlugin_")
@protocol HMSPlugin
- (HMSPluginSupportResult * _Nonnull)checkSupport SWIFT_WARN_UNUSED_RESULT;
- (HMSPluginSupportResult * _Nonnull)activate SWIFT_WARN_UNUSED_RESULT;
- (void)deactivate;
@end

enum HMSPluginSupportResultType : NSInteger;
enum HMSPluginUnsupportedErrorTypes : NSInteger;

SWIFT_CLASS("_TtC6HMSSDK22HMSPluginSupportResult")
@interface HMSPluginSupportResult : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) HMSPluginSupportResult * _Nonnull supported;)
+ (HMSPluginSupportResult * _Nonnull)supported SWIFT_WARN_UNUSED_RESULT;
+ (void)setSupported:(HMSPluginSupportResult * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) HMSPluginSupportResult * _Nonnull deviceNotSupported;)
+ (HMSPluginSupportResult * _Nonnull)deviceNotSupported SWIFT_WARN_UNUSED_RESULT;
+ (void)setDeviceNotSupported:(HMSPluginSupportResult * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) HMSPluginSupportResult * _Nonnull operatingSystemNotSupported;)
+ (HMSPluginSupportResult * _Nonnull)operatingSystemNotSupported SWIFT_WARN_UNUSED_RESULT;
+ (void)setOperatingSystemNotSupported:(HMSPluginSupportResult * _Nonnull)value;
- (nonnull instancetype)initWithType:(enum HMSPluginSupportResultType)type errorType:(enum HMSPluginUnsupportedErrorTypes)errorType errorMessage:(NSString * _Nullable)errorMessage OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, HMSPluginSupportResultType, open) {
  HMSPluginSupportResultTypeSupported = 0,
  HMSPluginSupportResultTypeUnsupported = 1,
};

typedef SWIFT_ENUM(NSInteger, HMSPluginUnsupportedErrorTypes, open) {
  HMSPluginUnsupportedErrorTypesNone = 0,
  HMSPluginUnsupportedErrorTypesOperatingSystemNotSupported = 1,
  HMSPluginUnsupportedErrorTypesDeviceNotsupported = 2,
};

enum HMSPollCategory : NSInteger;
@class HMSPollResult;

/// Represents a poll object.
SWIFT_CLASS("_TtC6HMSSDK7HMSPoll")
@interface HMSPoll : NSObject
/// The unique identifier of the poll.
@property (nonatomic, readonly, copy) NSString * _Nonnull pollID;
/// The title of the poll.
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// The duration of the poll in seconds.
@property (nonatomic, readonly) NSInteger duration;
/// A flag indicating whether the poll is anonymous or not.
@property (nonatomic, readonly) BOOL anonymous;
/// The roles that can vote in the poll.
@property (nonatomic, readonly, copy) NSArray<HMSRole *> * _Nonnull rolesThatCanVote;
/// The roles that can view the poll responses.
@property (nonatomic, readonly, copy) NSArray<HMSRole *> * _Nonnull rolesThatCanViewResponses;
/// The peer who started the poll.
@property (nonatomic, readonly, strong) HMSPeer * _Nullable startedBy;
/// The peer who stopped the poll.
@property (nonatomic, readonly, strong) HMSPeer * _Nullable stoppedBy;
/// The peer who created the poll.
@property (nonatomic, readonly, strong) HMSPeer * _Nullable createdBy;
/// The date and time when the poll was started.
@property (nonatomic, readonly, copy) NSDate * _Nullable startedAt;
/// The date and time when the poll was stopped.
@property (nonatomic, readonly, copy) NSDate * _Nullable stoppedAt;
/// The category of the poll.
@property (nonatomic, readonly) enum HMSPollCategory category;
/// The current state of the poll.
@property (nonatomic, readonly) enum HMSPollState state;
/// The result of the poll.
@property (nonatomic, readonly, strong) HMSPollResult * _Nullable result;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


enum HMSPollUserTrackingMode : NSInteger;
@class HMSPollQuestionBuilder;

/// Builder class for creating a poll.
SWIFT_CLASS("_TtC6HMSSDK14HMSPollBuilder")
@interface HMSPollBuilder : NSObject
/// Sets the ID of the poll.
/// \param pollID The ID of the poll.
///
///
/// returns:
/// The updated poll builder instance.
- (HMSPollBuilder * _Nonnull)withPollID:(NSString * _Nonnull)pollID SWIFT_WARN_UNUSED_RESULT;
/// Sets the title of the poll.
/// \param title The title of the poll.
///
///
/// returns:
/// The updated poll builder instance.
- (HMSPollBuilder * _Nonnull)withTitle:(NSString * _Nonnull)title SWIFT_WARN_UNUSED_RESULT;
/// Sets the duration of the poll.
/// \param duration The duration of the poll.
///
///
/// returns:
/// The updated poll builder instance.
- (HMSPollBuilder * _Nonnull)withDuration:(NSInteger)duration SWIFT_WARN_UNUSED_RESULT;
/// Sets whether the poll is anonymous.
/// \param anonymous A flag indicating whether the poll is anonymous.
///
///
/// returns:
/// The updated poll builder instance.
- (HMSPollBuilder * _Nonnull)withAnonymous:(BOOL)anonymous SWIFT_WARN_UNUSED_RESULT;
/// Sets the category of the poll.
/// \param category The category of the poll.
///
///
/// returns:
/// The updated poll builder instance.
- (HMSPollBuilder * _Nonnull)withCategory:(enum HMSPollCategory)category SWIFT_WARN_UNUSED_RESULT;
/// Sets the user tracking mode of the poll.
/// \param mode The user tracking mode of the poll.
///
///
/// returns:
/// The updated poll builder instance.
- (HMSPollBuilder * _Nonnull)withUserTrackingMode:(enum HMSPollUserTrackingMode)mode SWIFT_WARN_UNUSED_RESULT;
/// Sets the roles that can vote in the poll.
/// \param rolesThatCanVote The roles that can vote in the poll.
///
///
/// returns:
/// The updated poll builder instance.
- (HMSPollBuilder * _Nonnull)withRolesThatCanVote:(NSArray<HMSRole *> * _Nullable)rolesThatCanVote SWIFT_WARN_UNUSED_RESULT;
/// Sets the roles that can view responses in the poll.
/// \param rolesThatCanViewResponses The roles that can view responses in the poll.
///
///
/// returns:
/// The updated poll builder instance.
- (HMSPollBuilder * _Nonnull)withRolesThatCanViewResponses:(NSArray<HMSRole *> * _Nullable)rolesThatCanViewResponses SWIFT_WARN_UNUSED_RESULT;
/// Adds a multiple-choice question to the poll.
/// \param title The title of the question.
///
/// \param options The options for the question.
///
///
/// returns:
/// The updated poll builder instance.
- (HMSPollBuilder * _Nonnull)addMultiChoiceQuestionWith:(NSString * _Nonnull)title options:(NSArray<NSString *> * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
/// Adds a single-choice question to the poll.
/// \param title The title of the question.
///
/// \param options The options for the question.
///
///
/// returns:
/// The updated poll builder instance.
- (HMSPollBuilder * _Nonnull)addSingleChoiceQuestionWith:(NSString * _Nonnull)title options:(NSArray<NSString *> * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
/// Adds a question to the poll using a question builder.
/// \param builder The builder instance for creating the question.
///
///
/// returns:
/// The updated poll builder instance.
- (HMSPollBuilder * _Nonnull)addQuestionWith:(HMSPollQuestionBuilder * _Nonnull)builder SWIFT_WARN_UNUSED_RESULT;
/// Adds a short answer question to the poll.
/// \param title The title of the question.
///
///
/// returns:
/// The updated poll builder instance.
- (HMSPollBuilder * _Nonnull)addShortAnswerQuestionWith:(NSString * _Nonnull)title SWIFT_WARN_UNUSED_RESULT;
/// Adds a long answer question to the poll.
/// \param title The title of the question.
///
///
/// returns:
/// The updated poll builder instance.
- (HMSPollBuilder * _Nonnull)addLongAnswerQuestionWith:(NSString * _Nonnull)title SWIFT_WARN_UNUSED_RESULT;
/// Builds the poll object with the configured properties.
///
/// returns:
/// The built poll object.
- (HMSPoll * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Represents the category of a poll.
typedef SWIFT_ENUM(NSInteger, HMSPollCategory, open) {
/// The poll is a standard poll.
  HMSPollCategoryPoll = 0,
/// The poll is a quiz.
  HMSPollCategoryQuiz = 1,
};

@class HMSPollResponsePeerInfo;

/// Represents a poll leaderboard entry.
SWIFT_CLASS("_TtC6HMSSDK23HMSPollLeaderboardEntry")
@interface HMSPollLeaderboardEntry : NSObject
/// The position in the leaderboard.
@property (nonatomic, readonly) NSInteger position;
/// The total score.
@property (nonatomic, readonly) NSInteger score;
/// The count of the questions answered.
@property (nonatomic, readonly) NSInteger totalResponses;
/// The count of the questions answered correctly.
@property (nonatomic, readonly) NSInteger correctResponses;
/// Time taken to answer
@property (nonatomic, readonly) float duration;
/// The peer information associated with the entry. Depends on the tracking type selected for poll.
@property (nonatomic, readonly, strong) HMSPollResponsePeerInfo * _Nullable peer;
@end

@class HMSPollLeaderboardSummary;

/// Represents a poll leaderboard response.
SWIFT_CLASS("_TtC6HMSSDK26HMSPollLeaderboardResponse")
@interface HMSPollLeaderboardResponse : NSObject
/// The list of leaderboard entries.
@property (nonatomic, readonly, copy) NSArray<HMSPollLeaderboardEntry *> * _Nonnull entries;
/// The leaderboard summary.
@property (nonatomic, readonly, strong) HMSPollLeaderboardSummary * _Nonnull summary;
/// Indicates wether there are more entries to be fetched.
@property (nonatomic, readonly) BOOL hasNext;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents a summary of poll leaderboard information.
/// This class provides aggregated statistics related to a poll leaderboard, including the total number of peers, the number of peers who have voted, the count of correct answers, the average time taken, and the average score.
SWIFT_CLASS("_TtC6HMSSDK25HMSPollLeaderboardSummary")
@interface HMSPollLeaderboardSummary : NSObject
/// The total number of peers.
@property (nonatomic, readonly) NSInteger totalPeersCount;
/// The number of peers who have responded.
@property (nonatomic, readonly) NSInteger respondedPeersCount;
/// The number of peers who have responded correctly to all questions.
@property (nonatomic, readonly) NSInteger respondedCorrectlyPeersCount;
/// The average time taken to respond.
@property (nonatomic, readonly) float averageTime;
/// The average score.
@property (nonatomic, readonly) float averageScore;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Provides the correct answer for a quiz question to check users’ responses against.
SWIFT_CLASS("_TtC6HMSSDK21HMSPollQuestionAnswer")
@interface HMSPollQuestionAnswer : NSObject
/// A flag indicating whether the answer should be hidden or not.
@property (nonatomic, readonly) BOOL hidden;
/// The list of indexes of selected options (in case of multiple choice question).
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable options;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum HMSPollQuestionType : NSInteger;

/// Builder class for creating a poll question.
SWIFT_CLASS("_TtC6HMSSDK22HMSPollQuestionBuilder")
@interface HMSPollQuestionBuilder : NSObject
/// Sets the index of the question.
/// \param index The index of the question.
///
///
/// returns:
/// The updated question builder instance.
- (HMSPollQuestionBuilder * _Nonnull)withIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Sets whether the question can be skipped.
/// \param canBeSkipped A flag indicating whether the question can be skipped.
///
///
/// returns:
/// The updated question builder instance.
- (HMSPollQuestionBuilder * _Nonnull)withCanBeSkipped:(BOOL)canBeSkipped SWIFT_WARN_UNUSED_RESULT;
/// Sets the title of the question.
/// \param title The title of the question.
///
///
/// returns:
/// The updated question builder instance.
- (HMSPollQuestionBuilder * _Nonnull)withTitle:(NSString * _Nonnull)title SWIFT_WARN_UNUSED_RESULT;
/// Sets the duration of the question.
/// \param duration The duration of the question.
///
///
/// returns:
/// The updated question builder instance.
- (HMSPollQuestionBuilder * _Nonnull)withDuration:(NSInteger)duration SWIFT_WARN_UNUSED_RESULT;
/// Sets the type of the question.
/// \param type The type of the question.
///
///
/// returns:
/// The updated question builder instance.
- (HMSPollQuestionBuilder * _Nonnull)withType:(enum HMSPollQuestionType)type SWIFT_WARN_UNUSED_RESULT;
/// Adds an option to the question.
/// \param title The title of the option.
///
///
/// returns:
/// The updated question builder instance.
- (HMSPollQuestionBuilder * _Nonnull)addOptionWith:(NSString * _Nonnull)title SWIFT_WARN_UNUSED_RESULT;
/// Adds an option to the question if poll type is set to quiz.
/// \param title The title of the option.
///
/// \param isCorrect A flag indicating whether the option is correct.
///
///
/// returns:
/// The updated question builder instance.
- (HMSPollQuestionBuilder * _Nonnull)addQuizOptionWith:(NSString * _Nonnull)title isCorrect:(BOOL)isCorrect SWIFT_WARN_UNUSED_RESULT;
/// Sets wether users are allowed to change their response to the question.
/// \param canChangeResponse A flag indicating whether users are allowed to change their response.
///
///
/// returns:
/// The updated question builder instance.
- (HMSPollQuestionBuilder * _Nonnull)withCanChangeResponseWithCanChangeResponse:(BOOL)canChangeResponse SWIFT_WARN_UNUSED_RESULT;
/// Sets the minimum answer length of the question.
/// \param minLength The minimum answer length of the question.
///
///
/// returns:
/// The updated question builder instance.
- (HMSPollQuestionBuilder * _Nonnull)withMinLengthWithMinLength:(NSInteger)minLength SWIFT_WARN_UNUSED_RESULT;
/// Sets the maximum answer length of the question.
/// \param maxLength The maximum answer length of the question.
///
///
/// returns:
/// The updated question builder instance.
- (HMSPollQuestionBuilder * _Nonnull)withMaxLengthWithMaxLength:(NSInteger)maxLength SWIFT_WARN_UNUSED_RESULT;
/// Sets the weight of the question for score calculation.
/// \param weight The weight of the question.
///
///
/// returns:
/// The updated question builder instance.
- (HMSPollQuestionBuilder * _Nonnull)withWeightWithWeight:(NSInteger)weight SWIFT_WARN_UNUSED_RESULT;
/// Sets wether the correct answer will be returned as a part of the fetchPollQuestions API response.
/// \param answerHidden A flag indicating whether the correct answer will be returned as a part of the fetchPollQuestions API response.
///
///
/// returns:
/// The updated question builder instance.
- (HMSPollQuestionBuilder * _Nonnull)withAnswerHiddenWithAnswerHidden:(BOOL)answerHidden SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Represents an option for a poll question.
SWIFT_CLASS("_TtC6HMSSDK21HMSPollQuestionOption")
@interface HMSPollQuestionOption : NSObject
/// The index of the option within the question.
@property (nonatomic, readonly) NSInteger index;
/// The text of the option.
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
/// The weight of the option in scoring.
@property (nonatomic, readonly) NSInteger weight;
/// The count of votes received for the option.
@property (nonatomic) NSInteger voteCount;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents a response for a poll question.
SWIFT_CLASS("_TtC6HMSSDK23HMSPollQuestionResponse")
@interface HMSPollQuestionResponse : NSObject
/// The ID of the question associated with the response.
@property (nonatomic, readonly) NSInteger questionID;
/// The type of the question associated with the response.
@property (nonatomic, readonly) enum HMSPollQuestionType type;
/// A flag indicating whether the question was skipped or not.
@property (nonatomic, readonly) BOOL skipped;
/// The index of the selected option (in case of single choice question).
@property (nonatomic, readonly) NSInteger option;
/// The list of indexes of selected options (in case of multiple choice question).
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable options;
/// The text answer provided (in case of short/long answer question).
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
/// A flag indicating whether the response was updated from previous response.
@property (nonatomic, readonly) BOOL update;
/// Time taken to respond.
@property (nonatomic, readonly) NSInteger duration;
/// The peer information associated with the response. Depends on the tracking type selected for poll.
@property (nonatomic, readonly, strong) HMSPollResponsePeerInfo * _Nullable peer;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents the result of a poll question response.
SWIFT_CLASS("_TtC6HMSSDK29HMSPollQuestionResponseResult")
@interface HMSPollQuestionResponseResult : NSObject
/// The ID of the question associated with the response result.
@property (nonatomic, readonly) NSInteger question;
/// An error associated with the response result (if any).
@property (nonatomic, readonly) NSError * _Nullable error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents the result of a poll question within a poll result.
SWIFT_CLASS("_TtC6HMSSDK21HMSPollQuestionResult")
@interface HMSPollQuestionResult : NSObject
/// The ID of the question associated with the result.
@property (nonatomic, readonly) NSInteger question;
/// The type of the question associated with the result.
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
/// The vote counts for each option of the question.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable optionVoteCounts;
/// The number of correct votes for the question.
@property (nonatomic, readonly) NSInteger correctVotes;
/// The number of skipped votes for the question.
@property (nonatomic, readonly) NSInteger skippedVotes;
/// The total number of votes received for the question.
@property (nonatomic, readonly) NSInteger totalVotes;
@end

/// Represents the type of a poll question.
typedef SWIFT_ENUM(NSInteger, HMSPollQuestionType, open) {
/// The question allows for a single choice answer.
  HMSPollQuestionTypeSingleChoice = 0,
/// The question allows for multiple choice answers.
  HMSPollQuestionTypeMultipleChoice = 1,
/// The question expects a short text answer.
  HMSPollQuestionTypeShortAnswer = 2,
/// The question expects a long text answer.
  HMSPollQuestionTypeLongAnswer = 3,
};


SWIFT_CLASS("_TtC6HMSSDK22HMSPollResponseBuilder")
@interface HMSPollResponseBuilder : NSObject
/// Initializes a new instance of the result builder.
/// \param poll The poll to create a result for.
///
- (nonnull instancetype)initWithPoll:(HMSPoll * _Nonnull)poll OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents the peer information associated with a poll response. The properties are filled according to HMSPollUserTrackingMode selected for the poll.
SWIFT_CLASS("_TtC6HMSSDK23HMSPollResponsePeerInfo")
@interface HMSPollResponsePeerInfo : NSObject
/// The user hash associated with the peer.
@property (nonatomic, readonly, copy) NSString * _Nullable userHash;
/// The peer ID associated with the response.
@property (nonatomic, readonly, copy) NSString * _Nullable peerID;
/// The user ID associated with the peer.
@property (nonatomic, readonly, copy) NSString * _Nullable customerUserID;
/// The username associated with the peer.
@property (nonatomic, readonly, copy) NSString * _Nullable userName;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents the result of a poll.
SWIFT_CLASS("_TtC6HMSSDK13HMSPollResult")
@interface HMSPollResult : NSObject
/// The total number of responses received for the poll.
@property (nonatomic, readonly) NSInteger totalResponse;
/// The number of unique users who responded to the poll.
@property (nonatomic, readonly) NSInteger userCount;
/// The maximum number of users in the room during the poll.
@property (nonatomic, readonly) NSInteger maxUserCount;
/// The list of question results for the poll.
@property (nonatomic, readonly, copy) NSArray<HMSPollQuestionResult *> * _Nonnull questions;
@end

/// Represents the state of a poll.
typedef SWIFT_ENUM(NSInteger, HMSPollState, open) {
/// The poll is created but not started yet.
  HMSPollStateCreated = 0,
/// The poll has started and is currently active.
  HMSPollStateStarted = 1,
/// The poll has been stopped and is no longer active.
  HMSPollStateStopped = 2,
};

typedef SWIFT_ENUM(NSInteger, HMSPollUpdateType, open) {
  HMSPollUpdateTypeStarted = 0,
  HMSPollUpdateTypeResultsUpdated = 1,
  HMSPollUpdateTypeStopped = 2,
};

/// Represents the user tracking mode for poll participation.
typedef SWIFT_ENUM(NSInteger, HMSPollUserTrackingMode, open) {
/// User tracking is based on the peer ID.
  HMSPollUserTrackingModePeerID = 0,
/// User tracking is based on the customer ID.
  HMSPollUserTrackingModeCustomerUserID = 1,
/// User tracking is based on the username.
  HMSPollUserTrackingModeUserName = 2,
};

@class HMSRoom;
enum HMSRoomUpdate : NSInteger;

SWIFT_PROTOCOL("_TtP6HMSSDK18HMSPreviewListener_")
@protocol HMSPreviewListener
/// This will be called when preview checks have been passed successfully and local tracks
/// were created if needed for the role.
/// This is the point where applications can start showing a preview screen
/// \param room the room which is ready to be joined
///
/// \param localTracks the tracks for the local peer
///
- (void)onPreview:(HMSRoom * _Nonnull)room localTracks:(NSArray<HMSTrack *> * _Nonnull)localTracks;
/// This will be called when there is an error during preview checks
/// \param error the error that occured
///
- (void)onError:(NSError * _Nonnull)error;
@optional
/// This is called when there is a change in any property of the Room
/// \param room the room which was joined
///
/// \param update the triggered update type. Should be used to perform different UI Actions
///
- (void)onRoom:(HMSRoom * _Nonnull)room update:(enum HMSRoomUpdate)update;
/// This is called when there is a change in the peer list of the Room
/// \param added the peers that have been added to room.peers
///
/// \param removed the peers that have been removed from room.peers
///
- (void)onPeerListUpdate:(NSArray<HMSPeer *> * _Nonnull)added removed:(NSArray<HMSPeer *> * _Nonnull)removed;
/// This will be called whenever there is an update on an existing peer
/// or a new peer got added/existing peer is removed.
/// This callback can be used to keep a track of all the peers in the room
/// \param peer the peer who joined/left or was updated
///
/// \param update the triggered update type. Should be used to perform different UI Actions
///
- (void)onPeer:(HMSPeer * _Nonnull)peer update:(enum HMSPeerUpdate)update;
@end

enum HMSProxyType : NSInteger;

SWIFT_CLASS("_TtC6HMSSDK14HMSProxyConfig")
@interface HMSProxyConfig : NSObject
@property (nonatomic, readonly) enum HMSProxyType type;
@property (nonatomic, readonly, copy) NSString * _Nonnull host;
@property (nonatomic, readonly) NSInteger port;
- (nonnull instancetype)initWithType:(enum HMSProxyType)type host:(NSString * _Nonnull)host port:(NSInteger)port OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, HMSProxyType, open) {
  HMSProxyTypeSocks5 = 0,
};

@class HMSVideoSettings;
@class HMSSimulcastSettings;

SWIFT_CLASS("_TtC6HMSSDK18HMSPublishSettings")
@interface HMSPublishSettings : NSObject
@property (nonatomic, readonly, strong) HMSAudioSettings * _Nonnull audio;
@property (nonatomic, readonly, strong) HMSVideoSettings * _Nonnull video;
@property (nonatomic, readonly, strong) HMSVideoSettings * _Nonnull screen;
@property (nonatomic, readonly, strong) HMSSimulcastSettings * _Nullable simulcast;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable allowed;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// A configuration object for recording or RTMP stream
SWIFT_CLASS("_TtC6HMSSDK13HMSRTMPConfig")
@interface HMSRTMPConfig : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6HMSSDK21HMSRTMPStreamingState")
@interface HMSRTMPStreamingState : HMSBaseStreamingState
@end

typedef SWIFT_ENUM(NSInteger, HMSRecordingState, open) {
  HMSRecordingStateNone = 0,
  HMSRecordingStateStarting = 1,
  HMSRecordingStateStarted = 2,
  HMSRecordingStatePaused = 3,
  HMSRecordingStateResumed = 4,
  HMSRecordingStateStopped = 5,
  HMSRecordingStateFailed = 6,
};

@class HMSRemoteAudioTrack;
@class HMSRemoteVideoTrack;

SWIFT_CLASS("_TtC6HMSSDK13HMSRemotePeer")
@interface HMSRemotePeer : HMSPeer
- (HMSRemoteAudioTrack * _Nullable)remoteAudioTrack SWIFT_WARN_UNUSED_RESULT;
- (HMSRemoteVideoTrack * _Nullable)remoteVideoTrack SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC6HMSSDK30HMSRemovedFromRoomNotification")
@interface HMSRemovedFromRoomNotification : NSObject
@property (nonatomic, readonly, strong) HMSPeer * _Nullable requestedBy;
@property (nonatomic, readonly, copy) NSString * _Nonnull reason;
@property (nonatomic, readonly) BOOL roomEnded;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class HMSSubscribeSettings;

SWIFT_CLASS("_TtC6HMSSDK7HMSRole")
@interface HMSRole : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, strong) HMSPublishSettings * _Nonnull publishSettings;
@property (nonatomic, readonly, strong) HMSSubscribeSettings * _Nonnull subscribeSettings;
@property (nonatomic, readonly, strong) HMSPermissions * _Nonnull permissions;
@property (nonatomic, readonly) NSInteger priority;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable generalPermissions;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable internalPlugins;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable externalPlugins;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface HMSRole (SWIFT_EXTENSION(HMSSDK))
@property (nonatomic, readonly) BOOL canPublish;
@end


SWIFT_CLASS("_TtC6HMSSDK20HMSRoleChangeRequest")
@interface HMSRoleChangeRequest : NSObject
@property (nonatomic, readonly, strong) HMSRole * _Nonnull suggestedRole;
@property (nonatomic, readonly, strong) HMSPeer * _Nullable requestedBy;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class HMSTranscriptionState;
@class HMSServerRecordingState;

/// A room represents a real-time audio, video session, the basic building block of the 100ms SDK
SWIFT_CLASS("_TtC6HMSSDK7HMSRoom")
@interface HMSRoom : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable name;
@property (nonatomic, readonly, copy) NSString * _Nullable roomID;
@property (nonatomic, readonly, copy) NSString * _Nullable sessionID;
@property (nonatomic, readonly, copy) NSDate * _Nullable sessionStartedAt;
@property (nonatomic, readonly, copy) NSArray<HMSTranscriptionState *> * _Nullable transcriptionStates;
@property (nonatomic, readonly, copy) NSString * _Nullable metaData;
@property (nonatomic, readonly, copy) NSArray<HMSPeer *> * _Nonnull peers;
@property (nonatomic, readonly) BOOL isLarge;
@property (nonatomic, readonly, strong) HMSBrowserRecordingState * _Nonnull browserRecordingState;
@property (nonatomic, readonly, strong) HMSServerRecordingState * _Nonnull serverRecordingState;
@property (nonatomic, readonly, strong) HMSHLSRecordingState * _Nonnull hlsRecordingState;
@property (nonatomic, readonly, strong) HMSRTMPStreamingState * _Nonnull rtmpStreamingState;
@property (nonatomic, readonly, strong) HMSHLSStreamingState * _Nonnull hlsStreamingState;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, HMSRoomUpdate, open) {
  HMSRoomUpdateRoomTypeChanged = 0,
  HMSRoomUpdateMetaDataUpdated = 1,
  HMSRoomUpdatePeerCountUpdated = 2,
  HMSRoomUpdateBrowserRecordingStateUpdated = 3,
  HMSRoomUpdateServerRecordingStateUpdated = 4,
  HMSRoomUpdateRtmpStreamingStateUpdated = 5,
  HMSRoomUpdateHlsStreamingStateUpdated = 6,
  HMSRoomUpdateHlsRecordingStateUpdated = 7,
  HMSRoomUpdateTranscriptionStateUpdated = 8,
};

@protocol HMSUpdateListener;
@class HMSTrackSettings;
@protocol HMSLogger;
@class HMSScreenBroadcastAudioNode;

/// The public interface of 100ms SDK. Create an instance of HMSSDK to start using the SDK.
/// <em>Key Concepts</em>
/// <em>Room</em> - A room represents a real-time audio, video session, the basic building block of the 100mslive Video SDK
/// <em>Track</em> - A track represents either the audio or video that makes up a stream
/// <em>Peer</em> - A peer represents all participants connected to a room. Peers can be “local” or “remote”
/// <em>Broadcast</em> - A local peer can send any message/data to all remote peers in the room
/// HMSSDK has other methods which the client app can use to get more info about the Room, Peer and Tracks
SWIFT_CLASS("_TtC6HMSSDK6HMSSDK")
@interface HMSSDK : NSObject
/// this will instantiate an HMSSDK object
/// \param block pass a block with different settings as required
///
///
/// returns:
/// an instance of HMSSDK object
+ (HMSSDK * _Nonnull)buildWithBlock:(void (^ _Nullable)(HMSSDK * _Nonnull))block SWIFT_WARN_UNUSED_RESULT;
/// Begin a preview so that the local peer’s audio and video can be displayed to them before they join the room.
/// \param config The config object instance which contains joining information.
///
/// \param delegate The update listener object which will receive all callbacks.
///
- (void)previewWithConfig:(HMSConfig * _Nonnull)config delegate:(id <HMSPreviewListener> _Nonnull)delegate;
/// Call this preview API any time after joining in case you need to show a preview for a certain role. i.e before doing/accepting a role change request.
/// \param role The role that would be used for checking which tracks would be required.
///
/// \param completion The completion handler to be invoked when tracks are fetched or in case of an error.
///
- (void)previewWithRole:(HMSRole * _Nonnull)role completion:(void (^ _Nonnull)(NSArray<HMSTrack *> * _Nullable, NSError * _Nullable))completion;
/// Call this API in case the tracks obtained via preview(role:) API are no longer needed. There is no need to call this if role change happened. Call this if user has decided not to change role to release camera/mic.
- (void)cancelPreview;
/// Join the room.
/// \param config The config object instance which contains joining information.
///
/// \param delegate The update listener object which will receive all callbacks,
///
- (void)joinWithConfig:(HMSConfig * _Nonnull)config delegate:(id <HMSUpdateListener> _Nonnull)delegate;
/// Call the <code>leave</code> method on the HMSSDK instance to leave the current room.
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)leave:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Returns the local peer, which contains the local tracks.
@property (nonatomic, readonly, strong) HMSLocalPeer * _Nullable localPeer;
/// Returns all remote peers in the room.
@property (nonatomic, readonly, copy) NSArray<HMSRemotePeer *> * _Nullable remotePeers;
/// Returns all roles in the room.
@property (nonatomic, readonly, copy) NSArray<HMSRole *> * _Nonnull roles;
/// Returns the room which was joined.
@property (nonatomic, readonly, strong) HMSRoom * _Nullable room;
/// Returns the HMSInteractivityCenter for the current session.
@property (nonatomic, readonly, strong) HMSInteractivityCenter * _Nonnull interactivityCenter;
/// Sends a message to everyone in the room.
/// \param type The type of message
///
/// \param message Content of the message.
///
/// \param completion The completion handler to be invoked when message was sent, or when error happened during sending
///
- (void)sendBroadcastMessageWithType:(NSString * _Nonnull)type message:(NSString * _Nonnull)message priority:(enum HMSCommandPriority)priority completion:(void (^ _Nullable)(HMSMessage * _Nullable, NSError * _Nullable))completion;
/// Sends a message to the specified roles defined. All peers that belong to the specified roles will receive the message.
/// \param type The type of message
///
/// \param message Content of the message.
///
/// \param roles The list of roles to whom this message is directed.
///
/// \param completion The completion handler to be invoked when message was sent, or when error happened during sending
///
- (void)sendGroupMessageWithType:(NSString * _Nonnull)type message:(NSString * _Nonnull)message roles:(NSArray<HMSRole *> * _Nonnull)roles priority:(enum HMSCommandPriority)priority completion:(void (^ _Nullable)(HMSMessage * _Nullable, NSError * _Nullable))completion;
/// Sends a direct message to the specified peer only.
/// \param type The type of message.
///
/// \param message Content of the message.
///
/// \param peer The peer to whom this message is directed.
///
/// \param completion The completion handler to be invoked when message was sent, or when error happened during sending
///
- (void)sendDirectMessageWithType:(NSString * _Nonnull)type message:(NSString * _Nonnull)message peer:(HMSPeer * _Nonnull)peer priority:(enum HMSCommandPriority)priority completion:(void (^ _Nullable)(HMSMessage * _Nullable, NSError * _Nullable))completion;
/// Changes metadata field of the local HMSPeer instance and sends the updated metadata to the other peers in the room.
/// \param metadata New metadata field value.
///
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)changeWithMetadata:(NSString * _Nonnull)metadata priority:(enum HMSCommandPriority)priority completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Changes name field of the local HMSPeer instance and sends the updated metadata to the other peers in the room.
/// \param name New name field value.
///
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)changeWithName:(NSString * _Nonnull)name priority:(enum HMSCommandPriority)priority completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Requests a change of role for specified peer.
/// \param peer The peer whose role should be changed.
///
/// \param role The target role.
///
/// \param force False if the peer should be prompted to accept the new role. true if their role should be changed without a prompt.
///
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)changeRoleFor:(HMSPeer * _Nonnull)peer to:(HMSRole * _Nonnull)role force:(BOOL)force completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Requests a change of role for all peers except for the local peer.
/// \param role The target role.
///
/// \param limitToRoles If specified, only peers currently belonging to roles in the array will be changed to the new role.
///
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)changeRolesOfAllPeersTo:(HMSRole * _Nonnull)role limitToRoles:(NSArray<HMSRole *> * _Nullable)limitToRoles completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Call to accept the role change request sent to the current peer.
/// Once this method is called, the peer’s role will be changed to the requested one.
/// \param request The request that the SDK had sent to this peer (in HMSUpdateListener.onRoleChangeRequest). 
///
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)acceptWithChangeRole:(HMSRoleChangeRequest * _Nonnull)request completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// To change the mute status of a remote HMSTrack.
/// \param remoteTrack The HMSTrack whose mute status needs to be changed.
///
/// \param mute True if the track needs to be muted, false otherwise.
///
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)changeTrackStateFor:(HMSTrack * _Nonnull)remoteTrack mute:(BOOL)mute completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Removes the specified peer from the current room.
/// \param peer The peer to remove
///
/// \param reason The reason for removing can be passed on to the peer.
///
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)removePeer:(HMSPeer * _Nonnull)peer reason:(NSString * _Nonnull)reason completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// End the room and make all participants leave.
/// \param lock Whether rejoining the room should be disabled till the room is unlocked.
///
/// \param reason The reason for ending the room can be passed on to other peers.
///
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)endRoomWithLock:(BOOL)lock reason:(NSString * _Nonnull)reason completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Start RTMP stream and/or room recording.
/// \param config RTMP/Recording parameters
///
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)startRTMPOrRecordingWithConfig:(HMSRTMPConfig * _Nonnull)config completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Stop RTMP stream and room recording.
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)stopRTMPAndRecordingWithCompletion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Start HLS stream
/// \param config HLS streaming parameters
///
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)startHLSStreamingWithConfig:(HMSHLSConfig * _Nullable)config completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Stop HLS stream
/// \param config Optional parameter. When specified will stop specific HLS stream variants only.
///
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)stopHLSStreamingWithConfig:(HMSHLSConfig * _Nullable)config completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Send HLS timed metadata
/// \param metadata An array of HMSHLSTimedMetadata objects
///
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)sendHLSTimedMetadata:(NSArray<HMSHLSTimedMetadata *> * _Nonnull)metadata completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Get session metadata
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)getSessionMetadataWithCompletion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion SWIFT_DEPRECATED_MSG("Please use HMSSessionStore instead");
/// Set session metadata
/// \param metadata Metadata to set for the current session
///
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)setSessionMetadata:(NSString * _Nonnull)metadata completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion SWIFT_DEPRECATED_MSG("Please use HMSSessionStore instead");
/// Set raised hand flag for local peer
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)raiseLocalPeerHandWithCompletion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Clear raised hand flag for local pear
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)lowerLocalPeerHandWithCompletion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Clear raised hand flag for remote pear
/// \param peer Remote peer to clear the raised hand flag for
///
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)lowerRemotePeerHand:(HMSPeer * _Nonnull)peer completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Find peers in a large room by matching against their name
/// \param name Peer name to use as a search criteria
///
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)findPeersByName:(NSString * _Nonnull)name limit:(NSInteger)limit offset:(NSInteger)offset completion:(void (^ _Nullable)(NSArray<HMSPeer *> * _Nullable, NSError * _Nullable))completion;
/// Adds another listener of SDK updates
/// \param delegate the update listener object which will receive all callbacks
///
- (void)addWithDelegate:(id <HMSUpdateListener> _Nonnull)delegate;
/// Removes the listener of SDK updates
/// \param delegate the update listener to remove
///
- (void)removeWithDelegate:(id <HMSUpdateListener> _Nonnull)delegate;
/// Use to override track settings coming from role policy
@property (nonatomic, strong) HMSTrackSettings * _Nonnull trackSettings;
/// Sets the verbosity of analytics events
@property (nonatomic) HMSAnalyticsEventLevel analyticsLevel;
/// Sets the logger instance to use for piping logs
@property (nonatomic, weak) id <HMSLogger> _Nullable logger;
- (void)prepareForExternalAudioPlayback;
- (void)resumeAfterExternalAudioPlayback;
/// Sets the app group
@property (nonatomic, copy) NSString * _Nullable appGroup;
/// Get audio node which receives audio from screen broadcast extension
/// App group needs to be set on hmssdk instance for it to work
- (HMSScreenBroadcastAudioNode * _Nullable)screenBroadcastAudioReceiverNodeAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// When using multiple hms sdk sessions concurrently in single app, call this to set active sdk to share screen from
/// Note: not required to be called when using just single hms sdk session
- (void)activateForScreenSharing;
/// Returns a list of available audio output devices
- (NSArray<HMSAudioOutputDevice *> * _Nonnull)getAudioOutputDeviceList SWIFT_WARN_UNUSED_RESULT;
/// Routes output audio to a particular HMSAudioOutputDevice; You should pass one of the available audio output devices returned when calling getAudioDeviceList API
- (BOOL)switchAudioOutputTo:(HMSAudioOutputDevice * _Nonnull)device error:(NSError * _Nullable * _Nullable)error;
/// Start sharing in-app screen content (use this to capture the content inside your own app only)
- (void)startAppScreenCaptureWithCompletion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Stop sharing in-app screen content
- (void)stopAppScreenCaptureWithCompletion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Start Transcription
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)startTranscriptionWithCompletion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Stop Transcription
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)stopTranscriptionWithCompletion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface HMSSDK (SWIFT_EXTENSION(HMSSDK)) <HMSAnalytics>
- (void)sendEvent:(NSString * _Nonnull)name payload:(NSDictionary<NSString *, id> * _Nonnull)payload level:(HMSAnalyticsEventLevel)level;
@end



@interface HMSSDK (SWIFT_EXTENSION(HMSSDK))
/// Get authentication token using room short code
/// \param roomCode short code of the room
///
/// \param userID user id of the user
///
/// \param completion The completion handler to be invoked when the request succeeds returning a token or fails with an error.
///
- (void)getAuthTokenByRoomCode:(NSString * _Nonnull)roomCode userID:(NSString * _Nullable)userID completion:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completion;
@end

@class NSCoder;

SWIFT_CLASS("_TtC6HMSSDK26HMSSampleBufferDisplayView")
@interface HMSSampleBufferDisplayView : UIView
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) Class _Nonnull layerClass;)
+ (Class _Nonnull)layerClass SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) BOOL isEnabled;
@property (nonatomic, strong) HMSVideoTrack * _Nullable track;
@property (nonatomic) CGSize preferredSize;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end

@class HMSRTCVideoFrame;

@interface HMSSampleBufferDisplayView (SWIFT_EXTENSION(HMSSDK)) <HMSRTCVideoRenderer>
- (void)setSize:(CGSize)size;
- (void)renderFrame:(HMSRTCVideoFrame * _Nullable)frame;
@end



SWIFT_CLASS("_TtC6HMSSDK27HMSScreenBroadcastAudioNode")
@interface HMSScreenBroadcastAudioNode : HMSAudioNode <HMSScreenAudioBufferReceiver>
- (void)didReceiveAudioData:(NSData * _Nonnull)data;
@end


SWIFT_CLASS("_TtC6HMSSDK23HMSScreenShareConstants")
@interface HMSScreenShareConstants : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kHMSScreenOrientationKey;)
+ (NSString * _Nonnull)kHMSScreenOrientationKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kHMSActiveSDKId;)
+ (NSString * _Nonnull)kHMSActiveSDKId SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kHMSActiveSDKIdForAudio;)
+ (NSString * _Nonnull)kHMSActiveSDKIdForAudio SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kHMSScreenMachPortName;)
+ (NSString * _Nonnull)kHMSScreenMachPortName SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kHMSAudioMachPortName;)
+ (NSString * _Nonnull)kHMSAudioMachPortName SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kHMSScreenShareFPS;)
+ (NSString * _Nonnull)kHMSScreenShareFPS SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6HMSSDK23HMSServerRecordingState")
@interface HMSServerRecordingState : HMSBaseRecordingState
@end

@protocol NSObject;

/// The HMSSessionStore class provides a centralized storage solution for session-related data.
SWIFT_CLASS("_TtC6HMSSDK15HMSSessionStore")
@interface HMSSessionStore : NSObject
/// Retrieves an object from the session store for a specified key
/// \param key The key that is associated with the object to be retrieved.
///
/// \param completion The block to be executed after the object has been retrieved. The block takes two arguments: the retrieved object (if any), and an optional error object if an error occurs during the retrieval process.
///
- (void)objectForKey:(NSString * _Nonnull)key completion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable))completion;
/// Sets an object in the session store for a specified key.
/// \param object The object to be stored in the session store.
///
/// \param key The key that is associated with the object to be stored.
///
/// \param completion The block to be executed after the object has been stored. The block takes two arguments: the latest value for the key, and an optional error object if an error occurs during the storage process.
///
- (void)set:(id _Nonnull)object forKey:(NSString * _Nonnull)key completion:(void (^ _Nullable)(id _Nullable, NSError * _Nullable))completion;
/// Adds a change observer for the specified keys in the session store.
/// \param keys An array of keys that are associated with the objects to be observed.
///
/// \param changeObserver The block to be executed when a change to one of the observed objects is detected. The block takes two arguments: the key of the changed object and its new value.
///
/// \param completion The block to be executed when a listener has been successfully installed or in case of failure.
///
- (void)observeChangesForKeys:(NSArray<NSString *> * _Nonnull)keys changeObserver:(void (^ _Nonnull)(NSString * _Nonnull, id _Nullable))changeObserver completion:(void (^ _Nullable)(id <NSObject> _Nullable, NSError * _Nullable))completion;
/// Removes the previously registerd change observer. It will no longer receive updates post this call.
/// \param observer An observer that was returned from the observeChanges API.
///
- (void)removeObserver:(id <NSObject> _Nonnull)observer;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6HMSSDK31HMSSimulcastLayerSettingsPolicy")
@interface HMSSimulcastLayerSettingsPolicy : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull rid;
@end


@class HMSSimulcastSettingsPolicy;

SWIFT_CLASS("_TtC6HMSSDK20HMSSimulcastSettings")
@interface HMSSimulcastSettings : NSObject
@property (nonatomic, readonly, strong) HMSSimulcastSettingsPolicy * _Nullable video;
@property (nonatomic, readonly, strong) HMSSimulcastSettingsPolicy * _Nullable screen;
@end


SWIFT_CLASS("_TtC6HMSSDK26HMSSimulcastSettingsPolicy")
@interface HMSSimulcastSettingsPolicy : NSObject
@property (nonatomic, readonly, copy) NSArray<HMSSimulcastLayerSettingsPolicy *> * _Nullable layers;
@end


SWIFT_CLASS("_TtC6HMSSDK10HMSSpeaker")
@interface HMSSpeaker : NSObject
@property (nonatomic, readonly, strong) HMSPeer * _Nonnull peer;
@property (nonatomic, readonly, strong) HMSTrack * _Nonnull track;
@property (nonatomic, readonly) NSInteger level;
- (nonnull instancetype)initWithPeer:(HMSPeer * _Nonnull)peer track:(HMSTrack * _Nonnull)track level:(NSInteger)level OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, HMSStreamingState, open) {
  HMSStreamingStateNone = 0,
  HMSStreamingStateStarting = 1,
  HMSStreamingStateStarted = 2,
  HMSStreamingStateStopped = 3,
  HMSStreamingStateFailed = 4,
};


SWIFT_CLASS("_TtC6HMSSDK29HMSSubscribeDegradationPolicy")
@interface HMSSubscribeDegradationPolicy : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6HMSSDK20HMSSubscribeSettings")
@interface HMSSubscribeSettings : NSObject
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable subscribeToRoles;
@property (nonatomic, readonly) NSInteger maxSubsBitRate;
@property (nonatomic, readonly, strong) HMSSubscribeDegradationPolicy * _Nullable subscribeDegradation;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC6HMSSDK15HMSTrackFactory")
@interface HMSTrackFactory : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


typedef SWIFT_ENUM(NSInteger, HMSTrackUpdate, open) {
  HMSTrackUpdateTrackAdded = 0,
  HMSTrackUpdateTrackRemoved = 1,
  HMSTrackUpdateTrackMuted = 2,
  HMSTrackUpdateTrackUnmuted = 3,
  HMSTrackUpdateTrackDescriptionChanged = 4,
  HMSTrackUpdateTrackDegraded = 5,
  HMSTrackUpdateTrackRestored = 6,
};


SWIFT_CLASS("_TtC6HMSSDK13HMSTranscript")
@interface HMSTranscript : NSObject
@property (nonatomic, readonly) NSInteger start;
@property (nonatomic, readonly) NSInteger end;
@property (nonatomic, readonly, copy) NSString * _Nonnull transcript;
@property (nonatomic, readonly, strong) HMSPeer * _Nonnull peer;
@property (nonatomic, readonly) BOOL isFinal;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum HMSTranscriptionStatus : NSInteger;

SWIFT_CLASS("_TtC6HMSSDK21HMSTranscriptionState")
@interface HMSTranscriptionState : NSObject
@property (nonatomic, copy) NSDate * _Nullable startedAt;
@property (nonatomic, copy) NSDate * _Nullable updatedAt;
@property (nonatomic, copy) NSDate * _Nullable stoppedAt;
@property (nonatomic, readonly) NSError * _Nullable error;
@property (nonatomic, readonly) enum HMSTranscriptionStatus state;
@property (nonatomic, readonly, copy) NSString * _Nonnull mode;
@property (nonatomic, strong) HMSPeer * _Nullable updatedBy;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, HMSTranscriptionStatus, open) {
  HMSTranscriptionStatusNone = 0,
  HMSTranscriptionStatusStarting = 1,
  HMSTranscriptionStatusStarted = 2,
  HMSTranscriptionStatusStopped = 3,
  HMSTranscriptionStatusFailed = 4,
};


SWIFT_CLASS("_TtC6HMSSDK14HMSTranscripts")
@interface HMSTranscripts : NSObject
@property (nonatomic, readonly, copy) NSArray<HMSTranscript *> * _Nonnull transcripts;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class HMSLocalAudioStats;
@class HMSLocalVideoStats;
@class HMSRemoteAudioStats;
@class HMSRemoteVideoStats;
@class HMSRTCStatsReport;

/// 100ms SDK provides callbacks to the client app about any change or update happening in the room after a user has joined by implementing HMSUpdateListener.
/// These updates can be used to render the video on screen or to display other info regarding the room.
SWIFT_PROTOCOL("_TtP6HMSSDK17HMSUpdateListener_")
@protocol HMSUpdateListener
/// This will be called on a successful JOIN of the room by the user
/// This is the point where applications can stop showing its loading state
/// \param room the room which was joined
///
- (void)onJoin:(HMSRoom * _Nonnull)room;
/// This is called when there is a change in any property of the Room
/// \param room the room which was joined
///
/// \param update the triggered update type. Should be used to perform different UI Actions
///
- (void)onRoom:(HMSRoom * _Nonnull)room update:(enum HMSRoomUpdate)update;
/// This is called when there is a change in the peer list of the Room
/// \param added the peers that have been added to room.peers
///
/// \param removed the peers that have been removed from room.peers
///
- (void)onPeerListUpdate:(NSArray<HMSPeer *> * _Nonnull)added removed:(NSArray<HMSPeer *> * _Nonnull)removed;
/// This will be called whenever there is an update on an existing peer
/// or a new peer got added/existing peer is removed.
/// This callback can be used to keep a track of all the peers in the room
/// \param peer the peer who joined/left or was updated
///
/// \param update the triggered update type. Should be used to perform different UI Actions
///
- (void)onPeer:(HMSPeer * _Nonnull)peer update:(enum HMSPeerUpdate)update;
/// This is called when there are updates on an existing track
/// or a new track got added/existing track is removed
/// This callback can be used to render the video on screen whenever a track gets added
/// \param track the track which was added, removed or updated
///
/// \param update the triggered update type
///
/// \param peer the peer for which track was added, removed or updated
///
- (void)onTrack:(HMSTrack * _Nonnull)track update:(enum HMSTrackUpdate)update peer:(HMSPeer * _Nonnull)peer;
/// This will be called when there is an error in the system
/// and SDK has already retried to fix the error
/// \param error the error that occured
///
- (void)onError:(NSError * _Nonnull)error;
/// This is called when there is a new broadcast message from any other peer in the room
/// This can be used to implement chat is the room
/// \param message the received broadcast message
///
- (void)onMessage:(HMSMessage * _Nonnull)message;
@optional
/// This is called when there is new real time transcription data in a transcription enabled room
/// \param transcripts the received transcripts
///
- (void)onTranscripts:(HMSTranscripts * _Nonnull)transcripts;
/// This is called when a role change request arrives
/// \param roleChangeRequest the request for role change info
///
- (void)roleChangeRequest:(HMSRoleChangeRequest * _Nonnull)roleChangeRequest;
/// This is called when a change track state request arrives
/// \param changeTrackStateRequest the request for changing track state
///
- (void)changeTrackStateRequest:(HMSChangeTrackStateRequest * _Nonnull)changeTrackStateRequest;
/// This is called when someone removes the local peer for the current room
/// \param notification the notification containing reason for removing and the initiating peer
///
- (void)removedFromRoom:(HMSRemovedFromRoomNotification * _Nonnull)notification;
@required
/// This is called every 1 second with list of active speakers
/// <h2>A HMSSpeaker object contains -</h2>
/// <ul>
///   <li>
///     peer: the peer who is speaking
///   </li>
///   <li>
///     track: the track which is emitting audio
///   </li>
///   <li>
///     level: a number within range 1-100 indicating the audio volume
///   </li>
/// </ul>
/// A peer who is not present in the list indicates that the peer is not speaking
/// This can be used to highlight currently speaking peers in the room
/// \param speakers the list of speakers
///
- (void)onUpdatedSpeakers:(NSArray<HMSSpeaker *> * _Nonnull)speakers;
/// This is called when SDK detects a network issue and is trying to recover
- (void)onReconnecting;
/// This is called when SDK successfully recovered from a network issue
- (void)onReconnected;
@optional
/// This is called when stats have been collected for a local audio track.
/// \param localAudioStats the stats payload
///
/// \param track the track
///
/// \param peer the peer owning the track
///
- (void)onLocalAudioStats:(HMSLocalAudioStats * _Nonnull)localAudioStats track:(HMSAudioTrack * _Nonnull)track peer:(HMSPeer * _Nonnull)peer;
/// This is called when stats have been collected for a local video track.
/// \param localVideoStats the stats payload
///
/// \param track the track
///
/// \param peer the peer owning the track
///
- (void)onLocalVideoStats:(NSArray<HMSLocalVideoStats *> * _Nonnull)localVideoStats track:(HMSVideoTrack * _Nonnull)track peer:(HMSPeer * _Nonnull)peer;
/// This is called when stats have been collected for a remote audio track.
/// \param remoteAudioStats the stats payload
///
/// \param track the track
///
/// \param peer the peer owning the track
///
- (void)onRemoteAudioStats:(HMSRemoteAudioStats * _Nonnull)remoteAudioStats track:(HMSAudioTrack * _Nonnull)track peer:(HMSPeer * _Nonnull)peer;
/// This is called when stats have been collected for a remote video track.
/// \param remoteVideoStats the stats payload
///
/// \param track the track
///
/// \param peer the peer owning the track
///
- (void)onRemoteVideoStats:(HMSRemoteVideoStats * _Nonnull)remoteVideoStats track:(HMSVideoTrack * _Nonnull)track peer:(HMSPeer * _Nonnull)peer;
/// This is called when stats have been collected for the current session
/// \param rtcStats the stats payload
///
- (void)onRTCStats:(HMSRTCStatsReport * _Nonnull)rtcStats;
/// This is called when HMSSessionStore is ready for use
/// \param store the HMSSessionStore instance for this session
///
- (void)onSessionStoreAvailable:(HMSSessionStore * _Nonnull)store;
@end


SWIFT_CLASS("_TtC6HMSSDK12HMSUtilities")
@interface HMSUtilities : NSObject
+ (NSArray<HMSDevice *> * _Nonnull)getDevices SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<HMSVideoTrack *> * _Nonnull)getAllVideoTracksIn:(HMSRoom * _Nonnull)room SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<HMSAudioTrack *> * _Nonnull)getAllAudioTracksIn:(HMSRoom * _Nonnull)room SWIFT_WARN_UNUSED_RESULT;
+ (HMSPeer * _Nullable)getPeerFor:(NSString * _Nonnull)id in:(HMSRoom * _Nonnull)room SWIFT_WARN_UNUSED_RESULT;
+ (HMSTrack * _Nullable)getTrackFor:(NSString * _Nonnull)id in:(HMSRoom * _Nonnull)room SWIFT_WARN_UNUSED_RESULT;
+ (HMSAudioTrack * _Nullable)getAudioTrackFor:(NSString * _Nonnull)id in:(HMSRoom * _Nonnull)room SWIFT_WARN_UNUSED_RESULT;
+ (HMSVideoTrack * _Nullable)getVideoTrackFor:(NSString * _Nonnull)id in:(HMSRoom * _Nonnull)room SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This plugin provides color controls for the video track
SWIFT_CLASS("_TtC6HMSSDK20HMSVideoFilterPlugin")
@interface HMSVideoFilterPlugin : HMSVideoPlugin
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat defaultHue;)
+ (CGFloat)defaultHue SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat defaultSaturation;)
+ (CGFloat)defaultSaturation SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat defaultBrightness;)
+ (CGFloat)defaultBrightness SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat defaultContrast;)
+ (CGFloat)defaultContrast SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat defaultSmoothness;)
+ (CGFloat)defaultSmoothness SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat defaultRedness;)
+ (CGFloat)defaultRedness SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat defaultSharpness;)
+ (CGFloat)defaultSharpness SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat defaultExposure;)
+ (CGFloat)defaultExposure SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) CGFloat hue;
@property (nonatomic) CGFloat saturation;
@property (nonatomic) CGFloat brightness;
@property (nonatomic) CGFloat contrast;
@property (nonatomic) CGFloat smoothness;
@property (nonatomic) CGFloat redness;
@property (nonatomic) CGFloat sharpness;
@property (nonatomic) CGFloat exposure;
- (CVPixelBufferRef _Nonnull)process:(CVPixelBufferRef _Nonnull)frame SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6HMSSDK19HMSVideoInputDevice")
@interface HMSVideoInputDevice : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HMSVideoInputDevice * _Nonnull frontCamera;)
+ (HMSVideoInputDevice * _Nonnull)frontCamera SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HMSVideoInputDevice * _Nonnull backCamera;)
+ (HMSVideoInputDevice * _Nonnull)backCamera SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6HMSSDK16HMSVideoSettings")
@interface HMSVideoSettings : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull codec;
@property (nonatomic, readonly) NSInteger frameRate;
@property (nonatomic, readonly) NSInteger width;
@property (nonatomic, readonly) NSInteger height;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class HMSVideoFrameInfo;
@class OperatingMode;
@class NSNumber;

SWIFT_CLASS("_TtC6HMSSDK26HMSVirtualBackgroundPlugin") SWIFT_AVAILABILITY(ios,introduced=15.0)
@interface HMSVirtualBackgroundPlugin : HMSVideoPlugin
@property (nonatomic) NSInteger frameRate SWIFT_DEPRECATED_MSG("Set the publish frame rate instead");
/// This callback will be fired whenever there is a change to frame orientation or resolution. The app can use
/// this to set a proper image to use for the new frame parameters.
@property (nonatomic, copy) UIImage * _Nonnull (^ _Nullable imageDataSource)(HMSVideoFrameInfo * _Nonnull) SWIFT_DEPRECATED_MSG("Set the operating mode instead");
@property (nonatomic, strong) UIImage * _Nullable backgroundImage SWIFT_DEPRECATED_MSG("Set the operating mode instead");
@property (nonatomic, strong) OperatingMode * _Nonnull operatingMode;
- (nonnull instancetype)initWithOperatingMode:(OperatingMode * _Nonnull)operatingMode OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithBackgroundImage:(UIImage * _Nullable)backgroundImage blurRadius:(NSNumber * _Nullable)blurRadius OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Use either init(background: UIImage) or init(blurIntensity: CGFloat) instead");
- (CVPixelBufferRef _Nonnull)process:(CVPixelBufferRef _Nonnull)frame SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtCC6HMSSDK26HMSVirtualBackgroundPlugin13OperatingMode")
@interface OperatingMode : NSObject
- (nonnull instancetype)initWithFixedImage:(UIImage * _Nonnull)fixedImage OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithBlurIntensity:(CGFloat)blurIntensity OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithImageDataSource:(UIImage * _Nonnull (^ _Nonnull)(HMSVideoFrameInfo * _Nonnull))imageDataSource OBJC_DESIGNATED_INITIALIZER;
+ (OperatingMode * _Nonnull)fixedImage:(UIImage * _Nonnull)image SWIFT_WARN_UNUSED_RESULT;
+ (OperatingMode * _Nonnull)blur:(CGFloat)blurIntensity SWIFT_WARN_UNUSED_RESULT;
+ (OperatingMode * _Nonnull)imageDataSource:(UIImage * _Nonnull (^ _Nonnull)(HMSVideoFrameInfo * _Nonnull))imageDataSource SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum WhiteboardState : NSInteger;

SWIFT_CLASS("_TtC6HMSSDK13HMSWhiteboard")
@interface HMSWhiteboard : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly) enum WhiteboardState state;
@property (nonatomic, readonly, copy) NSString * _Nullable title;
@property (nonatomic, readonly, strong) HMSPeer * _Nullable owner;
@property (nonatomic, readonly, copy) NSURL * _Nullable url;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, WhiteboardState, open) {
  WhiteboardStateStarted = 0,
  WhiteboardStateStopped = 1,
};

typedef SWIFT_ENUM(NSInteger, PermissionType, open) {
  PermissionTypeRead = 0,
  PermissionTypeWrite = 1,
  PermissionTypeAdmin = 2,
};


SWIFT_CLASS("_TtC6HMSSDK24HMSWhiteboardPermissions")
@interface HMSWhiteboardPermissions : HMSFeaturePermissions
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, HMSWhiteboardUpdateType, open) {
  HMSWhiteboardUpdateTypeStarted = 0,
  HMSWhiteboardUpdateTypeStopped = 1,
};



@interface NSNotification (SWIFT_EXTENSION(HMSSDK))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kHMSDidAddScreenTrack;)
+ (NSString * _Nonnull)kHMSDidAddScreenTrack SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kHMSDidRemoveScreenTrack;)
+ (NSString * _Nonnull)kHMSDidRemoveScreenTrack SWIFT_WARN_UNUSED_RESULT;
@end



#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
#ifndef HMSSDK_SWIFT_H
#define HMSSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFAudio;
@import CoreFoundation;
@import CoreVideo;
@import Foundation;
@import HMSAnalyticsSDK;
@import HMSWebRTC;
@import ObjectiveC;
@import UIKit;
#endif

#import <HMSSDK/HMSSDK.h>

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="HMSSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)




SWIFT_CLASS("_TtC6HMSSDK12HMSAudioNode")
@interface HMSAudioNode : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AVAudioPCMBuffer;

SWIFT_CLASS("_TtC6HMSSDK24HMSAudioBufferPlayerNode")
@interface HMSAudioBufferPlayerNode : HMSAudioNode
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic) float volume;
- (BOOL)playWithBuffer:(AVAudioPCMBuffer * _Nonnull)buffer error:(NSError * _Nullable * _Nullable)error;
- (void)pause;
- (BOOL)resumeAndReturnError:(NSError * _Nullable * _Nullable)error;
- (void)stop;
@property (nonatomic, readonly) BOOL isPlaying;
@end


SWIFT_CLASS("_TtC6HMSSDK14HMSAudioSource")
@interface HMSAudioSource : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AVAudioBuffer;

SWIFT_CLASS("_TtC6HMSSDK20HMSAudioBufferSource")
@interface HMSAudioBufferSource : HMSAudioSource
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)enqueueWithBuffer:(AVAudioBuffer * _Nonnull)buffer;
@end

@class NSURL;

SWIFT_CLASS("_TtC6HMSSDK22HMSAudioFilePlayerNode")
@interface HMSAudioFilePlayerNode : HMSAudioNode
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic) float volume;
- (BOOL)playWithFileUrl:(NSURL * _Nonnull)fileUrl loops:(BOOL)loops interrupts:(BOOL)interrupts error:(NSError * _Nullable * _Nullable)error completionHandler:(AVAudioNodeCompletionHandler _Nullable)completionHandler;
- (void)pause;
- (BOOL)resumeAndReturnError:(NSError * _Nullable * _Nullable)error;
- (void)stop;
@property (nonatomic, readonly) BOOL isPlaying;
@property (nonatomic, readonly) NSTimeInterval currentTime;
@property (nonatomic, readonly) NSTimeInterval duration;
@end


SWIFT_CLASS("_TtC6HMSSDK19HMSAudioInputDevice")
@interface HMSAudioInputDevice : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HMSAudioInputDevice * _Nonnull systemDefault;)
+ (HMSAudioInputDevice * _Nonnull)systemDefault SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6HMSSDK19HMSAudioMixerSource") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface HMSAudioMixerSource : HMSAudioSource
- (nullable instancetype)initWithNodes:(NSArray<HMSAudioNode *> * _Nonnull)nodes error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (void)reconnect;
@end



SWIFT_CLASS("_TtC6HMSSDK20HMSAudioOutputDevice")
@interface HMSAudioOutputDevice : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HMSAudioOutputDevice * _Nonnull speaker;)
+ (HMSAudioOutputDevice * _Nonnull)speaker SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HMSAudioOutputDevice * _Nonnull earpiece;)
+ (HMSAudioOutputDevice * _Nonnull)earpiece SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSString;

SWIFT_CLASS("_TtC6HMSSDK16HMSAudioSettings")
@interface HMSAudioSettings : NSObject
@property (nonatomic, readonly) NSInteger bitRate;
@property (nonatomic, readonly, copy) NSString * _Nonnull codec;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@class NSDate;
enum HMSRecordingState : NSInteger;

SWIFT_CLASS("_TtC6HMSSDK21HMSBaseRecordingState")
@interface HMSBaseRecordingState : NSObject
@property (nonatomic, readonly) BOOL initialising;
@property (nonatomic, readonly) BOOL running;
@property (nonatomic, readonly, copy) NSDate * _Nullable startedAt;
@property (nonatomic, readonly) NSError * _Nullable error;
@property (nonatomic, readonly) enum HMSRecordingState state;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum HMSStreamingState : NSInteger;

SWIFT_CLASS("_TtC6HMSSDK21HMSBaseStreamingState")
@interface HMSBaseStreamingState : NSObject
@property (nonatomic, readonly) BOOL running;
@property (nonatomic, readonly, copy) NSDate * _Nullable startedAt;
@property (nonatomic, readonly) NSError * _Nullable error;
@property (nonatomic, readonly) enum HMSStreamingState state;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6HMSSDK24HMSBrowserRecordingState")
@interface HMSBrowserRecordingState : HMSBaseRecordingState
@end

@class HMSTrack;
@class HMSPeer;

SWIFT_CLASS("_TtC6HMSSDK26HMSChangeTrackStateRequest")
@interface HMSChangeTrackStateRequest : NSObject
@property (nonatomic, readonly, strong) HMSTrack * _Nonnull track;
@property (nonatomic, readonly) BOOL mute;
@property (nonatomic, readonly, strong) HMSPeer * _Nullable requestedBy;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, HMSCommandPriority, open) {
  HMSCommandPriorityLow = 0,
  HMSCommandPriorityMedium = 1,
  HMSCommandPriorityHigh = 2,
};


SWIFT_CLASS("_TtC6HMSSDK20HMSCommonTrackSource")
@interface HMSCommonTrackSource : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull regular;)
+ (NSString * _Nonnull)regular SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull screen;)
+ (NSString * _Nonnull)screen SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull plugin;)
+ (NSString * _Nonnull)plugin SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class HMSProxyConfig;
@class HMSICEServer;

/// To join a room created, clients need to create a HMSConfig instance and use that instance to call <code>join</code> method of HMSSDK
SWIFT_CLASS("_TtC6HMSSDK9HMSConfig")
@interface HMSConfig : NSObject
/// the name that the user wants to be displayed while in the room
@property (nonatomic, readonly, copy) NSString * _Nonnull userName;
@property (nonatomic, readonly, copy) NSString * _Nonnull userID;
@property (nonatomic, readonly, copy) NSString * _Nonnull roomID;
/// the auth token to be used
@property (nonatomic, readonly, copy) NSString * _Nonnull authToken;
@property (nonatomic, readonly) BOOL shouldSkipPIIEvents;
/// any json string or metadata that can be passed while joining
@property (nonatomic, readonly, copy) NSString * _Nullable metadata;
/// to override the default endpoint (advanced)
@property (nonatomic, readonly, copy) NSString * _Nullable endpoint;
/// use custom proxy for signalling connection (advanced)
@property (nonatomic, readonly, strong) HMSProxyConfig * _Nullable proxy;
/// use custom STUN/TURN servers  for media connection (advanced)
@property (nonatomic, readonly, copy) NSArray<HMSICEServer *> * _Nullable iceServers;
/// if enabled, SDK will try to estimate the quality of the network when preview API is called.
@property (nonatomic, readonly) BOOL captureNetworkQualityInPreview;
- (nonnull instancetype)initWithUserName:(NSString * _Nonnull)userName authToken:(NSString * _Nonnull)authToken shouldSkipPIIEvents:(BOOL)shouldSkipPIIEvents metadata:(NSString * _Nullable)metadata endpoint:(NSString * _Nullable)endpoint captureNetworkQualityInPreview:(BOOL)captureNetworkQualityInPreview proxy:(HMSProxyConfig * _Nullable)proxy iceServers:(NSArray<HMSICEServer *> * _Nullable)iceServers OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithUserName:(NSString * _Nonnull)userName userID:(NSString * _Nonnull)userID roomID:(NSString * _Nonnull)roomID authToken:(NSString * _Nonnull)authToken shouldSkipPIIEvents:(BOOL)shouldSkipPIIEvents metadata:(NSString * _Nullable)metadata endpoint:(NSString * _Nullable)endpoint OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Use init(userName:authToken:)");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6HMSSDK9HMSDevice")
@interface HMSDevice : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, HMSErrorAction, open) {
  HMSErrorActionNone = 0,
  HMSErrorActionTrack = 1,
  HMSErrorActionInit = 2,
  HMSErrorActionPublish = 3,
  HMSErrorActionJoin = 4,
  HMSErrorActionSubscribe = 5,
  HMSErrorActionDataChannelSend = 6,
  HMSErrorActionToken = 7,
};

@class NSError;

SWIFT_CLASS("_TtC6HMSSDK15HMSErrorFactory")
@interface HMSErrorFactory : NSObject
- (NSError * _Nonnull)websocketConnectionLostWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)httpErrorWithCode:(NSInteger)code action:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)invalidEndpointUrlWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)endpointUnreachableWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)invalidTokenFormatWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)genericTrackWithAction:(enum HMSErrorAction)action errorInfo:(NSString * _Nonnull)errorInfo params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)cantAccessCaptureDeviceWithAction:(enum HMSErrorAction)action deviceInfo:(NSString * _Nonnull)deviceInfo params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)nothingToReturnWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)codecChangeNotPermittedWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)audiovideoSubsystemFailureWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)audiovideoSubsystemFailureWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params message:(NSString * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)audiovideoSubsystemInUseWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params message:(NSString * _Nonnull)message isTerminal:(BOOL)isTerminal SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)micCaptureFailedWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)createOfferFailedWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)createAnswerFailedWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)setLocalDescriptionFailedWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)setRemoteDescriptionFailedWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)iceFailureWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)iceDisconnectedWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)serverErrorsWithCode:(NSInteger)code action:(enum HMSErrorAction)action serverError:(NSString * _Nonnull)serverError params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)alreadyJoinedWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)notConnectedWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)unknownWithAction:(enum HMSErrorAction)action errorInfo:(NSString * _Nonnull)errorInfo params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)unknownSoftWithAction:(enum HMSErrorAction)action errorInfo:(NSString * _Nonnull)errorInfo params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nullable)nsErrorWithError:(NSError * _Nullable)error params:(NSDictionary<NSString *, id> * _Nullable)params isTerminal:(BOOL)isTerminal message:(NSString * _Nullable)message SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)jsonParsingFailedWithAction:(enum HMSErrorAction)action jsonMessage:(NSString * _Nonnull)jsonMessage params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)trackMetadataMissingWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)rtcTrackMissingWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)peerMetadataMissingWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6HMSSDK21HMSFeaturePermissions")
@interface HMSFeaturePermissions : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIImage;

SWIFT_CLASS("_TtC6HMSSDK21HMSFrameCapturePlugin")
@interface HMSFrameCapturePlugin : HMSVideoPlugin
- (UIImage * _Nullable)capture SWIFT_WARN_UNUSED_RESULT;
- (CVPixelBufferRef _Nonnull)process:(CVPixelBufferRef _Nonnull)frame SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class HMSHLSMeetingURLVariant;
@class HMSHLSRecordingConfig;

SWIFT_CLASS("_TtC6HMSSDK12HMSHLSConfig")
@interface HMSHLSConfig : NSObject
/// Meeting url variants that would be used as sources of HLS streams
@property (nonatomic, readonly, copy) NSArray<HMSHLSMeetingURLVariant *> * _Nullable variants;
/// Recording parameters in case recording is required
@property (nonatomic, readonly, strong) HMSHLSRecordingConfig * _Nullable recording;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithVariants:(NSArray<HMSHLSMeetingURLVariant *> * _Nullable)variants recording:(HMSHLSRecordingConfig * _Nullable)recording OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6HMSSDK23HMSHLSMeetingURLVariant")
@interface HMSHLSMeetingURLVariant : NSObject
/// Single click meeting url which we need to start streaming
@property (nonatomic, readonly, copy) NSURL * _Nullable meetingURL;
@property (nonatomic, readonly, copy) NSString * _Nonnull metadata;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithMeetingURL:(NSURL * _Nullable)meetingURL metadata:(NSString * _Nonnull)metadata OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, HMSHLSPlaylistType, open) {
  HMSHLSPlaylistTypeDvr = 0,
  HMSHLSPlaylistTypeNoDVR = 1,
};


SWIFT_CLASS("_TtC6HMSSDK21HMSHLSRecordingConfig")
@interface HMSHLSRecordingConfig : NSObject
@property (nonatomic, readonly) BOOL singleFilePerLayer;
@property (nonatomic, readonly) BOOL enableVOD;
- (nonnull instancetype)initWithSingleFilePerLayer:(BOOL)singleFilePerLayer enableVOD:(BOOL)enableVOD OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6HMSSDK20HMSHLSRecordingState")
@interface HMSHLSRecordingState : HMSBaseRecordingState
@end

@class HMSHLSVariant;

SWIFT_CLASS("_TtC6HMSSDK20HMSHLSStreamingState")
@interface HMSHLSStreamingState : HMSBaseStreamingState
@property (nonatomic, readonly, copy) NSArray<HMSHLSVariant *> * _Nonnull variants;
@property (nonatomic, readonly) NSUInteger hash;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC6HMSSDK19HMSHLSTimedMetadata")
@interface HMSHLSTimedMetadata : NSObject
- (nonnull instancetype)initWithPayload:(NSString * _Nonnull)payload duration:(NSInteger)duration OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6HMSSDK13HMSHLSVariant")
@interface HMSHLSVariant : NSObject
@property (nonatomic, readonly, copy) NSURL * _Nullable url;
@property (nonatomic, readonly, copy) NSURL * _Nonnull meetingURL;
@property (nonatomic, readonly, copy) NSString * _Nonnull metadata;
@property (nonatomic, readonly, copy) NSDate * _Nullable startedAt;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) NSUInteger hash;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end

@class HMSPoll;
enum HMSPollUpdateType : NSInteger;
@class HMSPollBuilder;
@class HMSPollResponseBuilder;
@class HMSPollQuestionResponseResult;
enum HMSPollState : NSInteger;
@class HMSPollQuestionResponse;
@class HMSPollLeaderboardResponse;

/// Provides interactivity features.
SWIFT_CLASS("_TtC6HMSSDK22HMSInteractivityCenter")
@interface HMSInteractivityCenter : NSObject
@property (nonatomic) BOOL isWhiteboardEnabled;
/// The array of polls managed by the interactivity center.
@property (nonatomic, copy) NSArray<HMSPoll *> * _Nonnull polls;
/// Adds a poll update listener to receive poll updates.
/// \param listener The closure to be called when a poll update occurs.
///
- (void)addPollUpdateListner:(void (^ _Nonnull)(HMSPoll * _Nonnull, enum HMSPollUpdateType))listener;
/// Creates a poll, sets the poll questions and starts it with the provided poll builder.
/// \param builder The poll builder used to create the poll.
///
/// \param completion The closure to be called upon completion, indicating the success or failure of the operation.
///
- (void)quickStartPollWith:(HMSPollBuilder * _Nonnull)builder completion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
/// Creates a new poll.
/// \param poll The poll object to create.
///
/// \param completion The closure to be called upon completion, indicating the success or failure of the operation.
///
- (void)createWithPoll:(HMSPoll * _Nonnull)poll completion:(HMSOperationStatusHandler _Nonnull)completion;
/// Starts a poll.
/// \param poll The poll to start.
///
/// \param completion The closure to be called upon completion, indicating the success or failure of the operation.
///
- (void)startWithPoll:(HMSPoll * _Nonnull)poll completion:(HMSOperationStatusHandler _Nonnull)completion;
/// Adds a poll response.
/// \param response The poll response builder.
///
/// \param completion The closure to be called upon completion, providing the response result or an error.
///
- (void)addWithResponse:(HMSPollResponseBuilder * _Nonnull)response completion:(void (^ _Nonnull)(NSArray<HMSPollQuestionResponseResult *> * _Nullable, NSError * _Nullable))completion;
/// Stops a poll.
/// \param poll The poll to stop.
///
/// \param completion The closure to be called upon completion, indicating the success or failure of the operation.
///
- (void)stopWithPoll:(HMSPoll * _Nonnull)poll completion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
/// Fetches the questions for a poll.
/// \param poll The poll to fetch questions for.
///
/// \param completion The closure to be called upon completion, providing the fetched poll object or an error.
///
- (void)fetchPollQuestionsWithPoll:(HMSPoll * _Nonnull)poll completion:(void (^ _Nonnull)(HMSPoll * _Nullable, NSError * _Nullable))completion;
/// Fetches the list of polls based on the given poll state.
/// \param state The state of the polls to fetch.
///
/// \param completion The closure to be called upon completion, providing the fetched poll list or an error.
///
- (void)fetchPollListWithState:(enum HMSPollState)state completion:(void (^ _Nonnull)(NSArray<HMSPoll *> * _Nullable, NSError * _Nullable))completion;
/// Fetches the responses for a poll.
/// \param poll The poll to fetch responses for.
///
/// \param offset The starting index of the responses.
///
/// \param count The number of responses to fetch.
///
/// \param myResponseOnly A flag indicating whether to fetch only the responses of the current user (default is <code>false</code>).
///
/// \param completion The closure to be called upon completion, providing the fetched responses or an error.
///
- (void)fetchResponsesFor:(HMSPoll * _Nonnull)poll offset:(NSInteger)offset count:(NSInteger)count myResponseOnly:(BOOL)myResponseOnly completion:(void (^ _Nonnull)(NSArray<HMSPollQuestionResponse *> * _Nullable, NSError * _Nullable))completion;
/// Fetches the result of a poll.
/// \param poll The poll to fetch the result for.
///
/// \param completion The closure to be called upon completion, providing the fetched poll object or an error.
///
- (void)fetchPollResultFor:(HMSPoll * _Nonnull)poll completion:(void (^ _Nonnull)(HMSPoll * _Nullable, NSError * _Nullable))completion;
/// Fetches the leaderboard for a poll.
/// \param poll The poll to fetch leaderboard for.
///
/// \param offset The starting index of leaderboard entries.
///
/// \param count The number of leaderboard entries to fetch.
///
/// \param includeCurrentPeer If <code>true</code> the current peer will be included in the results regardless of the actual position on the board.
///
/// \param completion The closure to be called upon completion, providing the fetched leaderboard entries or an error.
///
- (void)fetchLeaderboardFor:(HMSPoll * _Nonnull)poll offset:(NSInteger)offset count:(NSInteger)count includeCurrentPeer:(BOOL)includeCurrentPeer completion:(void (^ _Nonnull)(HMSPollLeaderboardResponse * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class HMSWhiteboard;
enum HMSWhiteboardUpdateType : NSInteger;

@interface HMSInteractivityCenter (SWIFT_EXTENSION(HMSSDK))
- (void)addWhiteboardUpdateListener:(void (^ _Nonnull)(HMSWhiteboard * _Nonnull, enum HMSWhiteboardUpdateType))listener;
- (void)startWhiteboardWithCompletion:(HMSOperationStatusHandler _Nonnull)completion;
- (void)stopWhiteboardWithCompletion:(HMSOperationStatusHandler _Nonnull)completion;
@end

enum HMSPeerType : NSInteger;
@class HMSRole;
@class HMSAudioTrack;
@class HMSVideoTrack;
@class HMSNetworkQuality;

/// A peer represents all participants connected to a room. Peers can be “local” or “remote”
SWIFT_CLASS("_TtC6HMSSDK7HMSPeer")
@interface HMSPeer : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull peerID;
@property (nonatomic, readonly, copy) NSString * _Nullable customerUserID;
@property (nonatomic, readonly) BOOL isLocal;
@property (nonatomic, readonly) enum HMSPeerType type;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, strong) HMSRole * _Nullable role;
@property (nonatomic, readonly, copy) NSString * _Nullable metadata;
@property (nonatomic, readonly, strong) HMSAudioTrack * _Nullable audioTrack;
@property (nonatomic, readonly, strong) HMSVideoTrack * _Nullable videoTrack;
@property (nonatomic, readonly, copy) NSArray<HMSTrack *> * _Nullable auxiliaryTracks;
@property (nonatomic, readonly, strong) HMSNetworkQuality * _Nullable networkQuality;
@property (nonatomic, readonly) BOOL isHandRaised;
@property (nonatomic, readonly, copy) NSDate * _Nonnull joinedAt;
@property (nonatomic, readonly, copy) NSDate * _Nonnull updatedAt;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class HMSLocalAudioTrack;
@class HMSLocalVideoTrack;

SWIFT_CLASS("_TtC6HMSSDK12HMSLocalPeer")
@interface HMSLocalPeer : HMSPeer
- (HMSLocalAudioTrack * _Nullable)localAudioTrack SWIFT_WARN_UNUSED_RESULT;
- (HMSLocalVideoTrack * _Nullable)localVideoTrack SWIFT_WARN_UNUSED_RESULT;
@end

@class NSData;
@class HMSRTCVideoTrack;

SWIFT_CLASS("_TtC6HMSSDK19HMSLocalScreenTrack")
@interface HMSLocalScreenTrack : HMSVideoTrack <HMSScreenVideoBufferReceiver>
- (void)didReceiveVideoData:(NSData * _Nonnull)data SWIFT_AVAILABILITY(ios,introduced=16.0);
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (null_unspecified instancetype)initWithRTCTrack:(HMSRTCVideoTrack * _Null_unspecified)track SWIFT_UNAVAILABLE;
@end

@class HMSMessageRecipient;

SWIFT_CLASS("_TtC6HMSSDK10HMSMessage")
@interface HMSMessage : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull messageID;
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
@property (nonatomic, strong) HMSPeer * _Nullable sender;
@property (nonatomic, strong) HMSMessageRecipient * _Nonnull recipient;
@property (nonatomic, readonly, copy) NSDate * _Nonnull time;
- (nonnull instancetype)initWithMessage:(NSString * _Nonnull)message type:(NSString * _Nonnull)type OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithMessage:(NSString * _Nonnull)message type:(NSString * _Nonnull)type peerRecipient:(HMSPeer * _Nonnull)peerRecipient OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithMessage:(NSString * _Nonnull)message type:(NSString * _Nonnull)type rolesRecipient:(NSArray<HMSRole *> * _Nonnull)rolesRecipient OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum HMSMessageRecipientType : NSInteger;

SWIFT_CLASS("_TtC6HMSSDK19HMSMessageRecipient")
@interface HMSMessageRecipient : NSObject
@property (nonatomic, readonly) enum HMSMessageRecipientType type;
@property (nonatomic, readonly, strong) HMSPeer * _Nullable peerRecipient;
@property (nonatomic, readonly, copy) NSArray<HMSRole *> * _Nullable rolesRecipient;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, HMSMessageRecipientType, open) {
  HMSMessageRecipientTypeBroadcast = 0,
  HMSMessageRecipientTypePeer = 1,
  HMSMessageRecipientTypeRoles = 2,
};


SWIFT_CLASS("_TtC6HMSSDK10HMSMicNode")
@interface HMSMicNode : HMSAudioNode
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic) float volume;
@end


SWIFT_CLASS("_TtC6HMSSDK17HMSNetworkQuality")
@interface HMSNetworkQuality : NSObject
@property (nonatomic, readonly) NSInteger downlinkQuality;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6HMSSDK26HMSNoiseCancellationPlugin")
@interface HMSNoiseCancellationPlugin : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull modelPath;
@property (nonatomic, readonly) HMSNoiseCancellationInitialState initialState;
- (nonnull instancetype)initWithModelPath:(NSString * _Nonnull)modelPath initialState:(HMSNoiseCancellationInitialState)initialState OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) BOOL isNoiseCancellationAvailable;
- (BOOL)isEnabled SWIFT_WARN_UNUSED_RESULT;
- (BOOL)enableAndReturnError:(NSError * _Nullable * _Nullable)error;
- (BOOL)disableAndReturnError:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




typedef SWIFT_ENUM(NSInteger, HMSPeerType, open) {
  HMSPeerTypeRegular = 0,
  HMSPeerTypeSip = 1,
};

typedef SWIFT_ENUM(NSInteger, HMSPeerUpdate, open) {
  HMSPeerUpdatePeerJoined = 0,
  HMSPeerUpdatePeerLeft = 1,
  HMSPeerUpdateRoleUpdated = 2,
  HMSPeerUpdateNameUpdated = 3,
  HMSPeerUpdateMetadataUpdated = 4,
  HMSPeerUpdateHandRaiseUpdated = 5,
  HMSPeerUpdateNetworkQualityUpdated = 6,
  HMSPeerUpdateDefaultUpdate = 7,
};

@class HMSWhiteboardPermissions;

SWIFT_CLASS("_TtC6HMSSDK14HMSPermissions")
@interface HMSPermissions : NSObject
@property (nonatomic, strong) HMSWhiteboardPermissions * _Nullable whiteboard;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class HMSPluginSupportResult;

SWIFT_PROTOCOL("_TtP6HMSSDK9HMSPlugin_")
@protocol HMSPlugin
- (HMSPluginSupportResult * _Nonnull)checkSupport SWIFT_WARN_UNUSED_RESULT;
- (HMSPluginSupportResult * _Nonnull)activate SWIFT_WARN_UNUSED_RESULT;
- (void)deactivate;
@end

enum HMSPluginSupportResultType : NSInteger;
enum HMSPluginUnsupportedErrorTypes : NSInteger;

SWIFT_CLASS("_TtC6HMSSDK22HMSPluginSupportResult")
@interface HMSPluginSupportResult : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) HMSPluginSupportResult * _Nonnull supported;)
+ (HMSPluginSupportResult * _Nonnull)supported SWIFT_WARN_UNUSED_RESULT;
+ (void)setSupported:(HMSPluginSupportResult * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) HMSPluginSupportResult * _Nonnull deviceNotSupported;)
+ (HMSPluginSupportResult * _Nonnull)deviceNotSupported SWIFT_WARN_UNUSED_RESULT;
+ (void)setDeviceNotSupported:(HMSPluginSupportResult * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) HMSPluginSupportResult * _Nonnull operatingSystemNotSupported;)
+ (HMSPluginSupportResult * _Nonnull)operatingSystemNotSupported SWIFT_WARN_UNUSED_RESULT;
+ (void)setOperatingSystemNotSupported:(HMSPluginSupportResult * _Nonnull)value;
- (nonnull instancetype)initWithType:(enum HMSPluginSupportResultType)type errorType:(enum HMSPluginUnsupportedErrorTypes)errorType errorMessage:(NSString * _Nullable)errorMessage OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, HMSPluginSupportResultType, open) {
  HMSPluginSupportResultTypeSupported = 0,
  HMSPluginSupportResultTypeUnsupported = 1,
};

typedef SWIFT_ENUM(NSInteger, HMSPluginUnsupportedErrorTypes, open) {
  HMSPluginUnsupportedErrorTypesNone = 0,
  HMSPluginUnsupportedErrorTypesOperatingSystemNotSupported = 1,
  HMSPluginUnsupportedErrorTypesDeviceNotsupported = 2,
};

enum HMSPollCategory : NSInteger;
@class HMSPollResult;

/// Represents a poll object.
SWIFT_CLASS("_TtC6HMSSDK7HMSPoll")
@interface HMSPoll : NSObject
/// The unique identifier of the poll.
@property (nonatomic, readonly, copy) NSString * _Nonnull pollID;
/// The title of the poll.
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// The duration of the poll in seconds.
@property (nonatomic, readonly) NSInteger duration;
/// A flag indicating whether the poll is anonymous or not.
@property (nonatomic, readonly) BOOL anonymous;
/// The roles that can vote in the poll.
@property (nonatomic, readonly, copy) NSArray<HMSRole *> * _Nonnull rolesThatCanVote;
/// The roles that can view the poll responses.
@property (nonatomic, readonly, copy) NSArray<HMSRole *> * _Nonnull rolesThatCanViewResponses;
/// The peer who started the poll.
@property (nonatomic, readonly, strong) HMSPeer * _Nullable startedBy;
/// The peer who stopped the poll.
@property (nonatomic, readonly, strong) HMSPeer * _Nullable stoppedBy;
/// The peer who created the poll.
@property (nonatomic, readonly, strong) HMSPeer * _Nullable createdBy;
/// The date and time when the poll was started.
@property (nonatomic, readonly, copy) NSDate * _Nullable startedAt;
/// The date and time when the poll was stopped.
@property (nonatomic, readonly, copy) NSDate * _Nullable stoppedAt;
/// The category of the poll.
@property (nonatomic, readonly) enum HMSPollCategory category;
/// The current state of the poll.
@property (nonatomic, readonly) enum HMSPollState state;
/// The result of the poll.
@property (nonatomic, readonly, strong) HMSPollResult * _Nullable result;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


enum HMSPollUserTrackingMode : NSInteger;
@class HMSPollQuestionBuilder;

/// Builder class for creating a poll.
SWIFT_CLASS("_TtC6HMSSDK14HMSPollBuilder")
@interface HMSPollBuilder : NSObject
/// Sets the ID of the poll.
/// \param pollID The ID of the poll.
///
///
/// returns:
/// The updated poll builder instance.
- (HMSPollBuilder * _Nonnull)withPollID:(NSString * _Nonnull)pollID SWIFT_WARN_UNUSED_RESULT;
/// Sets the title of the poll.
/// \param title The title of the poll.
///
///
/// returns:
/// The updated poll builder instance.
- (HMSPollBuilder * _Nonnull)withTitle:(NSString * _Nonnull)title SWIFT_WARN_UNUSED_RESULT;
/// Sets the duration of the poll.
/// \param duration The duration of the poll.
///
///
/// returns:
/// The updated poll builder instance.
- (HMSPollBuilder * _Nonnull)withDuration:(NSInteger)duration SWIFT_WARN_UNUSED_RESULT;
/// Sets whether the poll is anonymous.
/// \param anonymous A flag indicating whether the poll is anonymous.
///
///
/// returns:
/// The updated poll builder instance.
- (HMSPollBuilder * _Nonnull)withAnonymous:(BOOL)anonymous SWIFT_WARN_UNUSED_RESULT;
/// Sets the category of the poll.
/// \param category The category of the poll.
///
///
/// returns:
/// The updated poll builder instance.
- (HMSPollBuilder * _Nonnull)withCategory:(enum HMSPollCategory)category SWIFT_WARN_UNUSED_RESULT;
/// Sets the user tracking mode of the poll.
/// \param mode The user tracking mode of the poll.
///
///
/// returns:
/// The updated poll builder instance.
- (HMSPollBuilder * _Nonnull)withUserTrackingMode:(enum HMSPollUserTrackingMode)mode SWIFT_WARN_UNUSED_RESULT;
/// Sets the roles that can vote in the poll.
/// \param rolesThatCanVote The roles that can vote in the poll.
///
///
/// returns:
/// The updated poll builder instance.
- (HMSPollBuilder * _Nonnull)withRolesThatCanVote:(NSArray<HMSRole *> * _Nullable)rolesThatCanVote SWIFT_WARN_UNUSED_RESULT;
/// Sets the roles that can view responses in the poll.
/// \param rolesThatCanViewResponses The roles that can view responses in the poll.
///
///
/// returns:
/// The updated poll builder instance.
- (HMSPollBuilder * _Nonnull)withRolesThatCanViewResponses:(NSArray<HMSRole *> * _Nullable)rolesThatCanViewResponses SWIFT_WARN_UNUSED_RESULT;
/// Adds a multiple-choice question to the poll.
/// \param title The title of the question.
///
/// \param options The options for the question.
///
///
/// returns:
/// The updated poll builder instance.
- (HMSPollBuilder * _Nonnull)addMultiChoiceQuestionWith:(NSString * _Nonnull)title options:(NSArray<NSString *> * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
/// Adds a single-choice question to the poll.
/// \param title The title of the question.
///
/// \param options The options for the question.
///
///
/// returns:
/// The updated poll builder instance.
- (HMSPollBuilder * _Nonnull)addSingleChoiceQuestionWith:(NSString * _Nonnull)title options:(NSArray<NSString *> * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
/// Adds a question to the poll using a question builder.
/// \param builder The builder instance for creating the question.
///
///
/// returns:
/// The updated poll builder instance.
- (HMSPollBuilder * _Nonnull)addQuestionWith:(HMSPollQuestionBuilder * _Nonnull)builder SWIFT_WARN_UNUSED_RESULT;
/// Adds a short answer question to the poll.
/// \param title The title of the question.
///
///
/// returns:
/// The updated poll builder instance.
- (HMSPollBuilder * _Nonnull)addShortAnswerQuestionWith:(NSString * _Nonnull)title SWIFT_WARN_UNUSED_RESULT;
/// Adds a long answer question to the poll.
/// \param title The title of the question.
///
///
/// returns:
/// The updated poll builder instance.
- (HMSPollBuilder * _Nonnull)addLongAnswerQuestionWith:(NSString * _Nonnull)title SWIFT_WARN_UNUSED_RESULT;
/// Builds the poll object with the configured properties.
///
/// returns:
/// The built poll object.
- (HMSPoll * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Represents the category of a poll.
typedef SWIFT_ENUM(NSInteger, HMSPollCategory, open) {
/// The poll is a standard poll.
  HMSPollCategoryPoll = 0,
/// The poll is a quiz.
  HMSPollCategoryQuiz = 1,
};

@class HMSPollResponsePeerInfo;

/// Represents a poll leaderboard entry.
SWIFT_CLASS("_TtC6HMSSDK23HMSPollLeaderboardEntry")
@interface HMSPollLeaderboardEntry : NSObject
/// The position in the leaderboard.
@property (nonatomic, readonly) NSInteger position;
/// The total score.
@property (nonatomic, readonly) NSInteger score;
/// The count of the questions answered.
@property (nonatomic, readonly) NSInteger totalResponses;
/// The count of the questions answered correctly.
@property (nonatomic, readonly) NSInteger correctResponses;
/// Time taken to answer
@property (nonatomic, readonly) float duration;
/// The peer information associated with the entry. Depends on the tracking type selected for poll.
@property (nonatomic, readonly, strong) HMSPollResponsePeerInfo * _Nullable peer;
@end

@class HMSPollLeaderboardSummary;

/// Represents a poll leaderboard response.
SWIFT_CLASS("_TtC6HMSSDK26HMSPollLeaderboardResponse")
@interface HMSPollLeaderboardResponse : NSObject
/// The list of leaderboard entries.
@property (nonatomic, readonly, copy) NSArray<HMSPollLeaderboardEntry *> * _Nonnull entries;
/// The leaderboard summary.
@property (nonatomic, readonly, strong) HMSPollLeaderboardSummary * _Nonnull summary;
/// Indicates wether there are more entries to be fetched.
@property (nonatomic, readonly) BOOL hasNext;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents a summary of poll leaderboard information.
/// This class provides aggregated statistics related to a poll leaderboard, including the total number of peers, the number of peers who have voted, the count of correct answers, the average time taken, and the average score.
SWIFT_CLASS("_TtC6HMSSDK25HMSPollLeaderboardSummary")
@interface HMSPollLeaderboardSummary : NSObject
/// The total number of peers.
@property (nonatomic, readonly) NSInteger totalPeersCount;
/// The number of peers who have responded.
@property (nonatomic, readonly) NSInteger respondedPeersCount;
/// The number of peers who have responded correctly to all questions.
@property (nonatomic, readonly) NSInteger respondedCorrectlyPeersCount;
/// The average time taken to respond.
@property (nonatomic, readonly) float averageTime;
/// The average score.
@property (nonatomic, readonly) float averageScore;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Provides the correct answer for a quiz question to check users’ responses against.
SWIFT_CLASS("_TtC6HMSSDK21HMSPollQuestionAnswer")
@interface HMSPollQuestionAnswer : NSObject
/// A flag indicating whether the answer should be hidden or not.
@property (nonatomic, readonly) BOOL hidden;
/// The list of indexes of selected options (in case of multiple choice question).
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable options;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum HMSPollQuestionType : NSInteger;

/// Builder class for creating a poll question.
SWIFT_CLASS("_TtC6HMSSDK22HMSPollQuestionBuilder")
@interface HMSPollQuestionBuilder : NSObject
/// Sets the index of the question.
/// \param index The index of the question.
///
///
/// returns:
/// The updated question builder instance.
- (HMSPollQuestionBuilder * _Nonnull)withIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Sets whether the question can be skipped.
/// \param canBeSkipped A flag indicating whether the question can be skipped.
///
///
/// returns:
/// The updated question builder instance.
- (HMSPollQuestionBuilder * _Nonnull)withCanBeSkipped:(BOOL)canBeSkipped SWIFT_WARN_UNUSED_RESULT;
/// Sets the title of the question.
/// \param title The title of the question.
///
///
/// returns:
/// The updated question builder instance.
- (HMSPollQuestionBuilder * _Nonnull)withTitle:(NSString * _Nonnull)title SWIFT_WARN_UNUSED_RESULT;
/// Sets the duration of the question.
/// \param duration The duration of the question.
///
///
/// returns:
/// The updated question builder instance.
- (HMSPollQuestionBuilder * _Nonnull)withDuration:(NSInteger)duration SWIFT_WARN_UNUSED_RESULT;
/// Sets the type of the question.
/// \param type The type of the question.
///
///
/// returns:
/// The updated question builder instance.
- (HMSPollQuestionBuilder * _Nonnull)withType:(enum HMSPollQuestionType)type SWIFT_WARN_UNUSED_RESULT;
/// Adds an option to the question.
/// \param title The title of the option.
///
///
/// returns:
/// The updated question builder instance.
- (HMSPollQuestionBuilder * _Nonnull)addOptionWith:(NSString * _Nonnull)title SWIFT_WARN_UNUSED_RESULT;
/// Adds an option to the question if poll type is set to quiz.
/// \param title The title of the option.
///
/// \param isCorrect A flag indicating whether the option is correct.
///
///
/// returns:
/// The updated question builder instance.
- (HMSPollQuestionBuilder * _Nonnull)addQuizOptionWith:(NSString * _Nonnull)title isCorrect:(BOOL)isCorrect SWIFT_WARN_UNUSED_RESULT;
/// Sets wether users are allowed to change their response to the question.
/// \param canChangeResponse A flag indicating whether users are allowed to change their response.
///
///
/// returns:
/// The updated question builder instance.
- (HMSPollQuestionBuilder * _Nonnull)withCanChangeResponseWithCanChangeResponse:(BOOL)canChangeResponse SWIFT_WARN_UNUSED_RESULT;
/// Sets the minimum answer length of the question.
/// \param minLength The minimum answer length of the question.
///
///
/// returns:
/// The updated question builder instance.
- (HMSPollQuestionBuilder * _Nonnull)withMinLengthWithMinLength:(NSInteger)minLength SWIFT_WARN_UNUSED_RESULT;
/// Sets the maximum answer length of the question.
/// \param maxLength The maximum answer length of the question.
///
///
/// returns:
/// The updated question builder instance.
- (HMSPollQuestionBuilder * _Nonnull)withMaxLengthWithMaxLength:(NSInteger)maxLength SWIFT_WARN_UNUSED_RESULT;
/// Sets the weight of the question for score calculation.
/// \param weight The weight of the question.
///
///
/// returns:
/// The updated question builder instance.
- (HMSPollQuestionBuilder * _Nonnull)withWeightWithWeight:(NSInteger)weight SWIFT_WARN_UNUSED_RESULT;
/// Sets wether the correct answer will be returned as a part of the fetchPollQuestions API response.
/// \param answerHidden A flag indicating whether the correct answer will be returned as a part of the fetchPollQuestions API response.
///
///
/// returns:
/// The updated question builder instance.
- (HMSPollQuestionBuilder * _Nonnull)withAnswerHiddenWithAnswerHidden:(BOOL)answerHidden SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Represents an option for a poll question.
SWIFT_CLASS("_TtC6HMSSDK21HMSPollQuestionOption")
@interface HMSPollQuestionOption : NSObject
/// The index of the option within the question.
@property (nonatomic, readonly) NSInteger index;
/// The text of the option.
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
/// The weight of the option in scoring.
@property (nonatomic, readonly) NSInteger weight;
/// The count of votes received for the option.
@property (nonatomic) NSInteger voteCount;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents a response for a poll question.
SWIFT_CLASS("_TtC6HMSSDK23HMSPollQuestionResponse")
@interface HMSPollQuestionResponse : NSObject
/// The ID of the question associated with the response.
@property (nonatomic, readonly) NSInteger questionID;
/// The type of the question associated with the response.
@property (nonatomic, readonly) enum HMSPollQuestionType type;
/// A flag indicating whether the question was skipped or not.
@property (nonatomic, readonly) BOOL skipped;
/// The index of the selected option (in case of single choice question).
@property (nonatomic, readonly) NSInteger option;
/// The list of indexes of selected options (in case of multiple choice question).
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable options;
/// The text answer provided (in case of short/long answer question).
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
/// A flag indicating whether the response was updated from previous response.
@property (nonatomic, readonly) BOOL update;
/// Time taken to respond.
@property (nonatomic, readonly) NSInteger duration;
/// The peer information associated with the response. Depends on the tracking type selected for poll.
@property (nonatomic, readonly, strong) HMSPollResponsePeerInfo * _Nullable peer;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents the result of a poll question response.
SWIFT_CLASS("_TtC6HMSSDK29HMSPollQuestionResponseResult")
@interface HMSPollQuestionResponseResult : NSObject
/// The ID of the question associated with the response result.
@property (nonatomic, readonly) NSInteger question;
/// An error associated with the response result (if any).
@property (nonatomic, readonly) NSError * _Nullable error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents the result of a poll question within a poll result.
SWIFT_CLASS("_TtC6HMSSDK21HMSPollQuestionResult")
@interface HMSPollQuestionResult : NSObject
/// The ID of the question associated with the result.
@property (nonatomic, readonly) NSInteger question;
/// The type of the question associated with the result.
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
/// The vote counts for each option of the question.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable optionVoteCounts;
/// The number of correct votes for the question.
@property (nonatomic, readonly) NSInteger correctVotes;
/// The number of skipped votes for the question.
@property (nonatomic, readonly) NSInteger skippedVotes;
/// The total number of votes received for the question.
@property (nonatomic, readonly) NSInteger totalVotes;
@end

/// Represents the type of a poll question.
typedef SWIFT_ENUM(NSInteger, HMSPollQuestionType, open) {
/// The question allows for a single choice answer.
  HMSPollQuestionTypeSingleChoice = 0,
/// The question allows for multiple choice answers.
  HMSPollQuestionTypeMultipleChoice = 1,
/// The question expects a short text answer.
  HMSPollQuestionTypeShortAnswer = 2,
/// The question expects a long text answer.
  HMSPollQuestionTypeLongAnswer = 3,
};


SWIFT_CLASS("_TtC6HMSSDK22HMSPollResponseBuilder")
@interface HMSPollResponseBuilder : NSObject
/// Initializes a new instance of the result builder.
/// \param poll The poll to create a result for.
///
- (nonnull instancetype)initWithPoll:(HMSPoll * _Nonnull)poll OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents the peer information associated with a poll response. The properties are filled according to HMSPollUserTrackingMode selected for the poll.
SWIFT_CLASS("_TtC6HMSSDK23HMSPollResponsePeerInfo")
@interface HMSPollResponsePeerInfo : NSObject
/// The user hash associated with the peer.
@property (nonatomic, readonly, copy) NSString * _Nullable userHash;
/// The peer ID associated with the response.
@property (nonatomic, readonly, copy) NSString * _Nullable peerID;
/// The user ID associated with the peer.
@property (nonatomic, readonly, copy) NSString * _Nullable customerUserID;
/// The username associated with the peer.
@property (nonatomic, readonly, copy) NSString * _Nullable userName;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents the result of a poll.
SWIFT_CLASS("_TtC6HMSSDK13HMSPollResult")
@interface HMSPollResult : NSObject
/// The total number of responses received for the poll.
@property (nonatomic, readonly) NSInteger totalResponse;
/// The number of unique users who responded to the poll.
@property (nonatomic, readonly) NSInteger userCount;
/// The maximum number of users in the room during the poll.
@property (nonatomic, readonly) NSInteger maxUserCount;
/// The list of question results for the poll.
@property (nonatomic, readonly, copy) NSArray<HMSPollQuestionResult *> * _Nonnull questions;
@end

/// Represents the state of a poll.
typedef SWIFT_ENUM(NSInteger, HMSPollState, open) {
/// The poll is created but not started yet.
  HMSPollStateCreated = 0,
/// The poll has started and is currently active.
  HMSPollStateStarted = 1,
/// The poll has been stopped and is no longer active.
  HMSPollStateStopped = 2,
};

typedef SWIFT_ENUM(NSInteger, HMSPollUpdateType, open) {
  HMSPollUpdateTypeStarted = 0,
  HMSPollUpdateTypeResultsUpdated = 1,
  HMSPollUpdateTypeStopped = 2,
};

/// Represents the user tracking mode for poll participation.
typedef SWIFT_ENUM(NSInteger, HMSPollUserTrackingMode, open) {
/// User tracking is based on the peer ID.
  HMSPollUserTrackingModePeerID = 0,
/// User tracking is based on the customer ID.
  HMSPollUserTrackingModeCustomerUserID = 1,
/// User tracking is based on the username.
  HMSPollUserTrackingModeUserName = 2,
};

@class HMSRoom;
enum HMSRoomUpdate : NSInteger;

SWIFT_PROTOCOL("_TtP6HMSSDK18HMSPreviewListener_")
@protocol HMSPreviewListener
/// This will be called when preview checks have been passed successfully and local tracks
/// were created if needed for the role.
/// This is the point where applications can start showing a preview screen
/// \param room the room which is ready to be joined
///
/// \param localTracks the tracks for the local peer
///
- (void)onPreview:(HMSRoom * _Nonnull)room localTracks:(NSArray<HMSTrack *> * _Nonnull)localTracks;
/// This will be called when there is an error during preview checks
/// \param error the error that occured
///
- (void)onError:(NSError * _Nonnull)error;
@optional
/// This is called when there is a change in any property of the Room
/// \param room the room which was joined
///
/// \param update the triggered update type. Should be used to perform different UI Actions
///
- (void)onRoom:(HMSRoom * _Nonnull)room update:(enum HMSRoomUpdate)update;
/// This is called when there is a change in the peer list of the Room
/// \param added the peers that have been added to room.peers
///
/// \param removed the peers that have been removed from room.peers
///
- (void)onPeerListUpdate:(NSArray<HMSPeer *> * _Nonnull)added removed:(NSArray<HMSPeer *> * _Nonnull)removed;
/// This will be called whenever there is an update on an existing peer
/// or a new peer got added/existing peer is removed.
/// This callback can be used to keep a track of all the peers in the room
/// \param peer the peer who joined/left or was updated
///
/// \param update the triggered update type. Should be used to perform different UI Actions
///
- (void)onPeer:(HMSPeer * _Nonnull)peer update:(enum HMSPeerUpdate)update;
@end

enum HMSProxyType : NSInteger;

SWIFT_CLASS("_TtC6HMSSDK14HMSProxyConfig")
@interface HMSProxyConfig : NSObject
@property (nonatomic, readonly) enum HMSProxyType type;
@property (nonatomic, readonly, copy) NSString * _Nonnull host;
@property (nonatomic, readonly) NSInteger port;
- (nonnull instancetype)initWithType:(enum HMSProxyType)type host:(NSString * _Nonnull)host port:(NSInteger)port OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, HMSProxyType, open) {
  HMSProxyTypeSocks5 = 0,
};

@class HMSVideoSettings;
@class HMSSimulcastSettings;

SWIFT_CLASS("_TtC6HMSSDK18HMSPublishSettings")
@interface HMSPublishSettings : NSObject
@property (nonatomic, readonly, strong) HMSAudioSettings * _Nonnull audio;
@property (nonatomic, readonly, strong) HMSVideoSettings * _Nonnull video;
@property (nonatomic, readonly, strong) HMSVideoSettings * _Nonnull screen;
@property (nonatomic, readonly, strong) HMSSimulcastSettings * _Nullable simulcast;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable allowed;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// A configuration object for recording or RTMP stream
SWIFT_CLASS("_TtC6HMSSDK13HMSRTMPConfig")
@interface HMSRTMPConfig : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6HMSSDK21HMSRTMPStreamingState")
@interface HMSRTMPStreamingState : HMSBaseStreamingState
@end

typedef SWIFT_ENUM(NSInteger, HMSRecordingState, open) {
  HMSRecordingStateNone = 0,
  HMSRecordingStateStarting = 1,
  HMSRecordingStateStarted = 2,
  HMSRecordingStatePaused = 3,
  HMSRecordingStateResumed = 4,
  HMSRecordingStateStopped = 5,
  HMSRecordingStateFailed = 6,
};

@class HMSRemoteAudioTrack;
@class HMSRemoteVideoTrack;

SWIFT_CLASS("_TtC6HMSSDK13HMSRemotePeer")
@interface HMSRemotePeer : HMSPeer
- (HMSRemoteAudioTrack * _Nullable)remoteAudioTrack SWIFT_WARN_UNUSED_RESULT;
- (HMSRemoteVideoTrack * _Nullable)remoteVideoTrack SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC6HMSSDK30HMSRemovedFromRoomNotification")
@interface HMSRemovedFromRoomNotification : NSObject
@property (nonatomic, readonly, strong) HMSPeer * _Nullable requestedBy;
@property (nonatomic, readonly, copy) NSString * _Nonnull reason;
@property (nonatomic, readonly) BOOL roomEnded;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class HMSSubscribeSettings;

SWIFT_CLASS("_TtC6HMSSDK7HMSRole")
@interface HMSRole : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, strong) HMSPublishSettings * _Nonnull publishSettings;
@property (nonatomic, readonly, strong) HMSSubscribeSettings * _Nonnull subscribeSettings;
@property (nonatomic, readonly, strong) HMSPermissions * _Nonnull permissions;
@property (nonatomic, readonly) NSInteger priority;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable generalPermissions;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable internalPlugins;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable externalPlugins;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface HMSRole (SWIFT_EXTENSION(HMSSDK))
@property (nonatomic, readonly) BOOL canPublish;
@end


SWIFT_CLASS("_TtC6HMSSDK20HMSRoleChangeRequest")
@interface HMSRoleChangeRequest : NSObject
@property (nonatomic, readonly, strong) HMSRole * _Nonnull suggestedRole;
@property (nonatomic, readonly, strong) HMSPeer * _Nullable requestedBy;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class HMSTranscriptionState;
@class HMSServerRecordingState;

/// A room represents a real-time audio, video session, the basic building block of the 100ms SDK
SWIFT_CLASS("_TtC6HMSSDK7HMSRoom")
@interface HMSRoom : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable name;
@property (nonatomic, readonly, copy) NSString * _Nullable roomID;
@property (nonatomic, readonly, copy) NSString * _Nullable sessionID;
@property (nonatomic, readonly, copy) NSDate * _Nullable sessionStartedAt;
@property (nonatomic, readonly, copy) NSArray<HMSTranscriptionState *> * _Nullable transcriptionStates;
@property (nonatomic, readonly, copy) NSString * _Nullable metaData;
@property (nonatomic, readonly, copy) NSArray<HMSPeer *> * _Nonnull peers;
@property (nonatomic, readonly) BOOL isLarge;
@property (nonatomic, readonly, strong) HMSBrowserRecordingState * _Nonnull browserRecordingState;
@property (nonatomic, readonly, strong) HMSServerRecordingState * _Nonnull serverRecordingState;
@property (nonatomic, readonly, strong) HMSHLSRecordingState * _Nonnull hlsRecordingState;
@property (nonatomic, readonly, strong) HMSRTMPStreamingState * _Nonnull rtmpStreamingState;
@property (nonatomic, readonly, strong) HMSHLSStreamingState * _Nonnull hlsStreamingState;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, HMSRoomUpdate, open) {
  HMSRoomUpdateRoomTypeChanged = 0,
  HMSRoomUpdateMetaDataUpdated = 1,
  HMSRoomUpdatePeerCountUpdated = 2,
  HMSRoomUpdateBrowserRecordingStateUpdated = 3,
  HMSRoomUpdateServerRecordingStateUpdated = 4,
  HMSRoomUpdateRtmpStreamingStateUpdated = 5,
  HMSRoomUpdateHlsStreamingStateUpdated = 6,
  HMSRoomUpdateHlsRecordingStateUpdated = 7,
  HMSRoomUpdateTranscriptionStateUpdated = 8,
};

@protocol HMSUpdateListener;
@class HMSTrackSettings;
@protocol HMSLogger;
@class HMSScreenBroadcastAudioNode;

/// The public interface of 100ms SDK. Create an instance of HMSSDK to start using the SDK.
/// <em>Key Concepts</em>
/// <em>Room</em> - A room represents a real-time audio, video session, the basic building block of the 100mslive Video SDK
/// <em>Track</em> - A track represents either the audio or video that makes up a stream
/// <em>Peer</em> - A peer represents all participants connected to a room. Peers can be “local” or “remote”
/// <em>Broadcast</em> - A local peer can send any message/data to all remote peers in the room
/// HMSSDK has other methods which the client app can use to get more info about the Room, Peer and Tracks
SWIFT_CLASS("_TtC6HMSSDK6HMSSDK")
@interface HMSSDK : NSObject
/// this will instantiate an HMSSDK object
/// \param block pass a block with different settings as required
///
///
/// returns:
/// an instance of HMSSDK object
+ (HMSSDK * _Nonnull)buildWithBlock:(void (^ _Nullable)(HMSSDK * _Nonnull))block SWIFT_WARN_UNUSED_RESULT;
/// Begin a preview so that the local peer’s audio and video can be displayed to them before they join the room.
/// \param config The config object instance which contains joining information.
///
/// \param delegate The update listener object which will receive all callbacks.
///
- (void)previewWithConfig:(HMSConfig * _Nonnull)config delegate:(id <HMSPreviewListener> _Nonnull)delegate;
/// Call this preview API any time after joining in case you need to show a preview for a certain role. i.e before doing/accepting a role change request.
/// \param role The role that would be used for checking which tracks would be required.
///
/// \param completion The completion handler to be invoked when tracks are fetched or in case of an error.
///
- (void)previewWithRole:(HMSRole * _Nonnull)role completion:(void (^ _Nonnull)(NSArray<HMSTrack *> * _Nullable, NSError * _Nullable))completion;
/// Call this API in case the tracks obtained via preview(role:) API are no longer needed. There is no need to call this if role change happened. Call this if user has decided not to change role to release camera/mic.
- (void)cancelPreview;
/// Join the room.
/// \param config The config object instance which contains joining information.
///
/// \param delegate The update listener object which will receive all callbacks,
///
- (void)joinWithConfig:(HMSConfig * _Nonnull)config delegate:(id <HMSUpdateListener> _Nonnull)delegate;
/// Call the <code>leave</code> method on the HMSSDK instance to leave the current room.
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)leave:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Returns the local peer, which contains the local tracks.
@property (nonatomic, readonly, strong) HMSLocalPeer * _Nullable localPeer;
/// Returns all remote peers in the room.
@property (nonatomic, readonly, copy) NSArray<HMSRemotePeer *> * _Nullable remotePeers;
/// Returns all roles in the room.
@property (nonatomic, readonly, copy) NSArray<HMSRole *> * _Nonnull roles;
/// Returns the room which was joined.
@property (nonatomic, readonly, strong) HMSRoom * _Nullable room;
/// Returns the HMSInteractivityCenter for the current session.
@property (nonatomic, readonly, strong) HMSInteractivityCenter * _Nonnull interactivityCenter;
/// Sends a message to everyone in the room.
/// \param type The type of message
///
/// \param message Content of the message.
///
/// \param completion The completion handler to be invoked when message was sent, or when error happened during sending
///
- (void)sendBroadcastMessageWithType:(NSString * _Nonnull)type message:(NSString * _Nonnull)message priority:(enum HMSCommandPriority)priority completion:(void (^ _Nullable)(HMSMessage * _Nullable, NSError * _Nullable))completion;
/// Sends a message to the specified roles defined. All peers that belong to the specified roles will receive the message.
/// \param type The type of message
///
/// \param message Content of the message.
///
/// \param roles The list of roles to whom this message is directed.
///
/// \param completion The completion handler to be invoked when message was sent, or when error happened during sending
///
- (void)sendGroupMessageWithType:(NSString * _Nonnull)type message:(NSString * _Nonnull)message roles:(NSArray<HMSRole *> * _Nonnull)roles priority:(enum HMSCommandPriority)priority completion:(void (^ _Nullable)(HMSMessage * _Nullable, NSError * _Nullable))completion;
/// Sends a direct message to the specified peer only.
/// \param type The type of message.
///
/// \param message Content of the message.
///
/// \param peer The peer to whom this message is directed.
///
/// \param completion The completion handler to be invoked when message was sent, or when error happened during sending
///
- (void)sendDirectMessageWithType:(NSString * _Nonnull)type message:(NSString * _Nonnull)message peer:(HMSPeer * _Nonnull)peer priority:(enum HMSCommandPriority)priority completion:(void (^ _Nullable)(HMSMessage * _Nullable, NSError * _Nullable))completion;
/// Changes metadata field of the local HMSPeer instance and sends the updated metadata to the other peers in the room.
/// \param metadata New metadata field value.
///
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)changeWithMetadata:(NSString * _Nonnull)metadata priority:(enum HMSCommandPriority)priority completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Changes name field of the local HMSPeer instance and sends the updated metadata to the other peers in the room.
/// \param name New name field value.
///
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)changeWithName:(NSString * _Nonnull)name priority:(enum HMSCommandPriority)priority completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Requests a change of role for specified peer.
/// \param peer The peer whose role should be changed.
///
/// \param role The target role.
///
/// \param force False if the peer should be prompted to accept the new role. true if their role should be changed without a prompt.
///
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)changeRoleFor:(HMSPeer * _Nonnull)peer to:(HMSRole * _Nonnull)role force:(BOOL)force completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Requests a change of role for all peers except for the local peer.
/// \param role The target role.
///
/// \param limitToRoles If specified, only peers currently belonging to roles in the array will be changed to the new role.
///
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)changeRolesOfAllPeersTo:(HMSRole * _Nonnull)role limitToRoles:(NSArray<HMSRole *> * _Nullable)limitToRoles completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Call to accept the role change request sent to the current peer.
/// Once this method is called, the peer’s role will be changed to the requested one.
/// \param request The request that the SDK had sent to this peer (in HMSUpdateListener.onRoleChangeRequest). 
///
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)acceptWithChangeRole:(HMSRoleChangeRequest * _Nonnull)request completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// To change the mute status of a remote HMSTrack.
/// \param remoteTrack The HMSTrack whose mute status needs to be changed.
///
/// \param mute True if the track needs to be muted, false otherwise.
///
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)changeTrackStateFor:(HMSTrack * _Nonnull)remoteTrack mute:(BOOL)mute completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Removes the specified peer from the current room.
/// \param peer The peer to remove
///
/// \param reason The reason for removing can be passed on to the peer.
///
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)removePeer:(HMSPeer * _Nonnull)peer reason:(NSString * _Nonnull)reason completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// End the room and make all participants leave.
/// \param lock Whether rejoining the room should be disabled till the room is unlocked.
///
/// \param reason The reason for ending the room can be passed on to other peers.
///
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)endRoomWithLock:(BOOL)lock reason:(NSString * _Nonnull)reason completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Start RTMP stream and/or room recording.
/// \param config RTMP/Recording parameters
///
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)startRTMPOrRecordingWithConfig:(HMSRTMPConfig * _Nonnull)config completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Stop RTMP stream and room recording.
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)stopRTMPAndRecordingWithCompletion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Start HLS stream
/// \param config HLS streaming parameters
///
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)startHLSStreamingWithConfig:(HMSHLSConfig * _Nullable)config completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Stop HLS stream
/// \param config Optional parameter. When specified will stop specific HLS stream variants only.
///
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)stopHLSStreamingWithConfig:(HMSHLSConfig * _Nullable)config completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Send HLS timed metadata
/// \param metadata An array of HMSHLSTimedMetadata objects
///
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)sendHLSTimedMetadata:(NSArray<HMSHLSTimedMetadata *> * _Nonnull)metadata completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Get session metadata
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)getSessionMetadataWithCompletion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion SWIFT_DEPRECATED_MSG("Please use HMSSessionStore instead");
/// Set session metadata
/// \param metadata Metadata to set for the current session
///
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)setSessionMetadata:(NSString * _Nonnull)metadata completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion SWIFT_DEPRECATED_MSG("Please use HMSSessionStore instead");
/// Set raised hand flag for local peer
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)raiseLocalPeerHandWithCompletion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Clear raised hand flag for local pear
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)lowerLocalPeerHandWithCompletion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Clear raised hand flag for remote pear
/// \param peer Remote peer to clear the raised hand flag for
///
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)lowerRemotePeerHand:(HMSPeer * _Nonnull)peer completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Find peers in a large room by matching against their name
/// \param name Peer name to use as a search criteria
///
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)findPeersByName:(NSString * _Nonnull)name limit:(NSInteger)limit offset:(NSInteger)offset completion:(void (^ _Nullable)(NSArray<HMSPeer *> * _Nullable, NSError * _Nullable))completion;
/// Adds another listener of SDK updates
/// \param delegate the update listener object which will receive all callbacks
///
- (void)addWithDelegate:(id <HMSUpdateListener> _Nonnull)delegate;
/// Removes the listener of SDK updates
/// \param delegate the update listener to remove
///
- (void)removeWithDelegate:(id <HMSUpdateListener> _Nonnull)delegate;
/// Use to override track settings coming from role policy
@property (nonatomic, strong) HMSTrackSettings * _Nonnull trackSettings;
/// Sets the verbosity of analytics events
@property (nonatomic) HMSAnalyticsEventLevel analyticsLevel;
/// Sets the logger instance to use for piping logs
@property (nonatomic, weak) id <HMSLogger> _Nullable logger;
- (void)prepareForExternalAudioPlayback;
- (void)resumeAfterExternalAudioPlayback;
/// Sets the app group
@property (nonatomic, copy) NSString * _Nullable appGroup;
/// Get audio node which receives audio from screen broadcast extension
/// App group needs to be set on hmssdk instance for it to work
- (HMSScreenBroadcastAudioNode * _Nullable)screenBroadcastAudioReceiverNodeAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// When using multiple hms sdk sessions concurrently in single app, call this to set active sdk to share screen from
/// Note: not required to be called when using just single hms sdk session
- (void)activateForScreenSharing;
/// Returns a list of available audio output devices
- (NSArray<HMSAudioOutputDevice *> * _Nonnull)getAudioOutputDeviceList SWIFT_WARN_UNUSED_RESULT;
/// Routes output audio to a particular HMSAudioOutputDevice; You should pass one of the available audio output devices returned when calling getAudioDeviceList API
- (BOOL)switchAudioOutputTo:(HMSAudioOutputDevice * _Nonnull)device error:(NSError * _Nullable * _Nullable)error;
/// Start sharing in-app screen content (use this to capture the content inside your own app only)
- (void)startAppScreenCaptureWithCompletion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Stop sharing in-app screen content
- (void)stopAppScreenCaptureWithCompletion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Start Transcription
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)startTranscriptionWithCompletion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Stop Transcription
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)stopTranscriptionWithCompletion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface HMSSDK (SWIFT_EXTENSION(HMSSDK)) <HMSAnalytics>
- (void)sendEvent:(NSString * _Nonnull)name payload:(NSDictionary<NSString *, id> * _Nonnull)payload level:(HMSAnalyticsEventLevel)level;
@end



@interface HMSSDK (SWIFT_EXTENSION(HMSSDK))
/// Get authentication token using room short code
/// \param roomCode short code of the room
///
/// \param userID user id of the user
///
/// \param completion The completion handler to be invoked when the request succeeds returning a token or fails with an error.
///
- (void)getAuthTokenByRoomCode:(NSString * _Nonnull)roomCode userID:(NSString * _Nullable)userID completion:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completion;
@end

@class NSCoder;

SWIFT_CLASS("_TtC6HMSSDK26HMSSampleBufferDisplayView")
@interface HMSSampleBufferDisplayView : UIView
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) Class _Nonnull layerClass;)
+ (Class _Nonnull)layerClass SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) BOOL isEnabled;
@property (nonatomic, strong) HMSVideoTrack * _Nullable track;
@property (nonatomic) CGSize preferredSize;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end

@class HMSRTCVideoFrame;

@interface HMSSampleBufferDisplayView (SWIFT_EXTENSION(HMSSDK)) <HMSRTCVideoRenderer>
- (void)setSize:(CGSize)size;
- (void)renderFrame:(HMSRTCVideoFrame * _Nullable)frame;
@end



SWIFT_CLASS("_TtC6HMSSDK27HMSScreenBroadcastAudioNode")
@interface HMSScreenBroadcastAudioNode : HMSAudioNode <HMSScreenAudioBufferReceiver>
- (void)didReceiveAudioData:(NSData * _Nonnull)data;
@end


SWIFT_CLASS("_TtC6HMSSDK23HMSScreenShareConstants")
@interface HMSScreenShareConstants : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kHMSScreenOrientationKey;)
+ (NSString * _Nonnull)kHMSScreenOrientationKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kHMSActiveSDKId;)
+ (NSString * _Nonnull)kHMSActiveSDKId SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kHMSActiveSDKIdForAudio;)
+ (NSString * _Nonnull)kHMSActiveSDKIdForAudio SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kHMSScreenMachPortName;)
+ (NSString * _Nonnull)kHMSScreenMachPortName SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kHMSAudioMachPortName;)
+ (NSString * _Nonnull)kHMSAudioMachPortName SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kHMSScreenShareFPS;)
+ (NSString * _Nonnull)kHMSScreenShareFPS SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6HMSSDK23HMSServerRecordingState")
@interface HMSServerRecordingState : HMSBaseRecordingState
@end

@protocol NSObject;

/// The HMSSessionStore class provides a centralized storage solution for session-related data.
SWIFT_CLASS("_TtC6HMSSDK15HMSSessionStore")
@interface HMSSessionStore : NSObject
/// Retrieves an object from the session store for a specified key
/// \param key The key that is associated with the object to be retrieved.
///
/// \param completion The block to be executed after the object has been retrieved. The block takes two arguments: the retrieved object (if any), and an optional error object if an error occurs during the retrieval process.
///
- (void)objectForKey:(NSString * _Nonnull)key completion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable))completion;
/// Sets an object in the session store for a specified key.
/// \param object The object to be stored in the session store.
///
/// \param key The key that is associated with the object to be stored.
///
/// \param completion The block to be executed after the object has been stored. The block takes two arguments: the latest value for the key, and an optional error object if an error occurs during the storage process.
///
- (void)set:(id _Nonnull)object forKey:(NSString * _Nonnull)key completion:(void (^ _Nullable)(id _Nullable, NSError * _Nullable))completion;
/// Adds a change observer for the specified keys in the session store.
/// \param keys An array of keys that are associated with the objects to be observed.
///
/// \param changeObserver The block to be executed when a change to one of the observed objects is detected. The block takes two arguments: the key of the changed object and its new value.
///
/// \param completion The block to be executed when a listener has been successfully installed or in case of failure.
///
- (void)observeChangesForKeys:(NSArray<NSString *> * _Nonnull)keys changeObserver:(void (^ _Nonnull)(NSString * _Nonnull, id _Nullable))changeObserver completion:(void (^ _Nullable)(id <NSObject> _Nullable, NSError * _Nullable))completion;
/// Removes the previously registerd change observer. It will no longer receive updates post this call.
/// \param observer An observer that was returned from the observeChanges API.
///
- (void)removeObserver:(id <NSObject> _Nonnull)observer;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6HMSSDK31HMSSimulcastLayerSettingsPolicy")
@interface HMSSimulcastLayerSettingsPolicy : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull rid;
@end


@class HMSSimulcastSettingsPolicy;

SWIFT_CLASS("_TtC6HMSSDK20HMSSimulcastSettings")
@interface HMSSimulcastSettings : NSObject
@property (nonatomic, readonly, strong) HMSSimulcastSettingsPolicy * _Nullable video;
@property (nonatomic, readonly, strong) HMSSimulcastSettingsPolicy * _Nullable screen;
@end


SWIFT_CLASS("_TtC6HMSSDK26HMSSimulcastSettingsPolicy")
@interface HMSSimulcastSettingsPolicy : NSObject
@property (nonatomic, readonly, copy) NSArray<HMSSimulcastLayerSettingsPolicy *> * _Nullable layers;
@end


SWIFT_CLASS("_TtC6HMSSDK10HMSSpeaker")
@interface HMSSpeaker : NSObject
@property (nonatomic, readonly, strong) HMSPeer * _Nonnull peer;
@property (nonatomic, readonly, strong) HMSTrack * _Nonnull track;
@property (nonatomic, readonly) NSInteger level;
- (nonnull instancetype)initWithPeer:(HMSPeer * _Nonnull)peer track:(HMSTrack * _Nonnull)track level:(NSInteger)level OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, HMSStreamingState, open) {
  HMSStreamingStateNone = 0,
  HMSStreamingStateStarting = 1,
  HMSStreamingStateStarted = 2,
  HMSStreamingStateStopped = 3,
  HMSStreamingStateFailed = 4,
};


SWIFT_CLASS("_TtC6HMSSDK29HMSSubscribeDegradationPolicy")
@interface HMSSubscribeDegradationPolicy : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6HMSSDK20HMSSubscribeSettings")
@interface HMSSubscribeSettings : NSObject
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable subscribeToRoles;
@property (nonatomic, readonly) NSInteger maxSubsBitRate;
@property (nonatomic, readonly, strong) HMSSubscribeDegradationPolicy * _Nullable subscribeDegradation;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC6HMSSDK15HMSTrackFactory")
@interface HMSTrackFactory : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


typedef SWIFT_ENUM(NSInteger, HMSTrackUpdate, open) {
  HMSTrackUpdateTrackAdded = 0,
  HMSTrackUpdateTrackRemoved = 1,
  HMSTrackUpdateTrackMuted = 2,
  HMSTrackUpdateTrackUnmuted = 3,
  HMSTrackUpdateTrackDescriptionChanged = 4,
  HMSTrackUpdateTrackDegraded = 5,
  HMSTrackUpdateTrackRestored = 6,
};


SWIFT_CLASS("_TtC6HMSSDK13HMSTranscript")
@interface HMSTranscript : NSObject
@property (nonatomic, readonly) NSInteger start;
@property (nonatomic, readonly) NSInteger end;
@property (nonatomic, readonly, copy) NSString * _Nonnull transcript;
@property (nonatomic, readonly, strong) HMSPeer * _Nonnull peer;
@property (nonatomic, readonly) BOOL isFinal;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum HMSTranscriptionStatus : NSInteger;

SWIFT_CLASS("_TtC6HMSSDK21HMSTranscriptionState")
@interface HMSTranscriptionState : NSObject
@property (nonatomic, copy) NSDate * _Nullable startedAt;
@property (nonatomic, copy) NSDate * _Nullable updatedAt;
@property (nonatomic, copy) NSDate * _Nullable stoppedAt;
@property (nonatomic, readonly) NSError * _Nullable error;
@property (nonatomic, readonly) enum HMSTranscriptionStatus state;
@property (nonatomic, readonly, copy) NSString * _Nonnull mode;
@property (nonatomic, strong) HMSPeer * _Nullable updatedBy;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, HMSTranscriptionStatus, open) {
  HMSTranscriptionStatusNone = 0,
  HMSTranscriptionStatusStarting = 1,
  HMSTranscriptionStatusStarted = 2,
  HMSTranscriptionStatusStopped = 3,
  HMSTranscriptionStatusFailed = 4,
};


SWIFT_CLASS("_TtC6HMSSDK14HMSTranscripts")
@interface HMSTranscripts : NSObject
@property (nonatomic, readonly, copy) NSArray<HMSTranscript *> * _Nonnull transcripts;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class HMSLocalAudioStats;
@class HMSLocalVideoStats;
@class HMSRemoteAudioStats;
@class HMSRemoteVideoStats;
@class HMSRTCStatsReport;

/// 100ms SDK provides callbacks to the client app about any change or update happening in the room after a user has joined by implementing HMSUpdateListener.
/// These updates can be used to render the video on screen or to display other info regarding the room.
SWIFT_PROTOCOL("_TtP6HMSSDK17HMSUpdateListener_")
@protocol HMSUpdateListener
/// This will be called on a successful JOIN of the room by the user
/// This is the point where applications can stop showing its loading state
/// \param room the room which was joined
///
- (void)onJoin:(HMSRoom * _Nonnull)room;
/// This is called when there is a change in any property of the Room
/// \param room the room which was joined
///
/// \param update the triggered update type. Should be used to perform different UI Actions
///
- (void)onRoom:(HMSRoom * _Nonnull)room update:(enum HMSRoomUpdate)update;
/// This is called when there is a change in the peer list of the Room
/// \param added the peers that have been added to room.peers
///
/// \param removed the peers that have been removed from room.peers
///
- (void)onPeerListUpdate:(NSArray<HMSPeer *> * _Nonnull)added removed:(NSArray<HMSPeer *> * _Nonnull)removed;
/// This will be called whenever there is an update on an existing peer
/// or a new peer got added/existing peer is removed.
/// This callback can be used to keep a track of all the peers in the room
/// \param peer the peer who joined/left or was updated
///
/// \param update the triggered update type. Should be used to perform different UI Actions
///
- (void)onPeer:(HMSPeer * _Nonnull)peer update:(enum HMSPeerUpdate)update;
/// This is called when there are updates on an existing track
/// or a new track got added/existing track is removed
/// This callback can be used to render the video on screen whenever a track gets added
/// \param track the track which was added, removed or updated
///
/// \param update the triggered update type
///
/// \param peer the peer for which track was added, removed or updated
///
- (void)onTrack:(HMSTrack * _Nonnull)track update:(enum HMSTrackUpdate)update peer:(HMSPeer * _Nonnull)peer;
/// This will be called when there is an error in the system
/// and SDK has already retried to fix the error
/// \param error the error that occured
///
- (void)onError:(NSError * _Nonnull)error;
/// This is called when there is a new broadcast message from any other peer in the room
/// This can be used to implement chat is the room
/// \param message the received broadcast message
///
- (void)onMessage:(HMSMessage * _Nonnull)message;
@optional
/// This is called when there is new real time transcription data in a transcription enabled room
/// \param transcripts the received transcripts
///
- (void)onTranscripts:(HMSTranscripts * _Nonnull)transcripts;
/// This is called when a role change request arrives
/// \param roleChangeRequest the request for role change info
///
- (void)roleChangeRequest:(HMSRoleChangeRequest * _Nonnull)roleChangeRequest;
/// This is called when a change track state request arrives
/// \param changeTrackStateRequest the request for changing track state
///
- (void)changeTrackStateRequest:(HMSChangeTrackStateRequest * _Nonnull)changeTrackStateRequest;
/// This is called when someone removes the local peer for the current room
/// \param notification the notification containing reason for removing and the initiating peer
///
- (void)removedFromRoom:(HMSRemovedFromRoomNotification * _Nonnull)notification;
@required
/// This is called every 1 second with list of active speakers
/// <h2>A HMSSpeaker object contains -</h2>
/// <ul>
///   <li>
///     peer: the peer who is speaking
///   </li>
///   <li>
///     track: the track which is emitting audio
///   </li>
///   <li>
///     level: a number within range 1-100 indicating the audio volume
///   </li>
/// </ul>
/// A peer who is not present in the list indicates that the peer is not speaking
/// This can be used to highlight currently speaking peers in the room
/// \param speakers the list of speakers
///
- (void)onUpdatedSpeakers:(NSArray<HMSSpeaker *> * _Nonnull)speakers;
/// This is called when SDK detects a network issue and is trying to recover
- (void)onReconnecting;
/// This is called when SDK successfully recovered from a network issue
- (void)onReconnected;
@optional
/// This is called when stats have been collected for a local audio track.
/// \param localAudioStats the stats payload
///
/// \param track the track
///
/// \param peer the peer owning the track
///
- (void)onLocalAudioStats:(HMSLocalAudioStats * _Nonnull)localAudioStats track:(HMSAudioTrack * _Nonnull)track peer:(HMSPeer * _Nonnull)peer;
/// This is called when stats have been collected for a local video track.
/// \param localVideoStats the stats payload
///
/// \param track the track
///
/// \param peer the peer owning the track
///
- (void)onLocalVideoStats:(NSArray<HMSLocalVideoStats *> * _Nonnull)localVideoStats track:(HMSVideoTrack * _Nonnull)track peer:(HMSPeer * _Nonnull)peer;
/// This is called when stats have been collected for a remote audio track.
/// \param remoteAudioStats the stats payload
///
/// \param track the track
///
/// \param peer the peer owning the track
///
- (void)onRemoteAudioStats:(HMSRemoteAudioStats * _Nonnull)remoteAudioStats track:(HMSAudioTrack * _Nonnull)track peer:(HMSPeer * _Nonnull)peer;
/// This is called when stats have been collected for a remote video track.
/// \param remoteVideoStats the stats payload
///
/// \param track the track
///
/// \param peer the peer owning the track
///
- (void)onRemoteVideoStats:(HMSRemoteVideoStats * _Nonnull)remoteVideoStats track:(HMSVideoTrack * _Nonnull)track peer:(HMSPeer * _Nonnull)peer;
/// This is called when stats have been collected for the current session
/// \param rtcStats the stats payload
///
- (void)onRTCStats:(HMSRTCStatsReport * _Nonnull)rtcStats;
/// This is called when HMSSessionStore is ready for use
/// \param store the HMSSessionStore instance for this session
///
- (void)onSessionStoreAvailable:(HMSSessionStore * _Nonnull)store;
@end


SWIFT_CLASS("_TtC6HMSSDK12HMSUtilities")
@interface HMSUtilities : NSObject
+ (NSArray<HMSDevice *> * _Nonnull)getDevices SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<HMSVideoTrack *> * _Nonnull)getAllVideoTracksIn:(HMSRoom * _Nonnull)room SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<HMSAudioTrack *> * _Nonnull)getAllAudioTracksIn:(HMSRoom * _Nonnull)room SWIFT_WARN_UNUSED_RESULT;
+ (HMSPeer * _Nullable)getPeerFor:(NSString * _Nonnull)id in:(HMSRoom * _Nonnull)room SWIFT_WARN_UNUSED_RESULT;
+ (HMSTrack * _Nullable)getTrackFor:(NSString * _Nonnull)id in:(HMSRoom * _Nonnull)room SWIFT_WARN_UNUSED_RESULT;
+ (HMSAudioTrack * _Nullable)getAudioTrackFor:(NSString * _Nonnull)id in:(HMSRoom * _Nonnull)room SWIFT_WARN_UNUSED_RESULT;
+ (HMSVideoTrack * _Nullable)getVideoTrackFor:(NSString * _Nonnull)id in:(HMSRoom * _Nonnull)room SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This plugin provides color controls for the video track
SWIFT_CLASS("_TtC6HMSSDK20HMSVideoFilterPlugin")
@interface HMSVideoFilterPlugin : HMSVideoPlugin
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat defaultHue;)
+ (CGFloat)defaultHue SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat defaultSaturation;)
+ (CGFloat)defaultSaturation SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat defaultBrightness;)
+ (CGFloat)defaultBrightness SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat defaultContrast;)
+ (CGFloat)defaultContrast SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat defaultSmoothness;)
+ (CGFloat)defaultSmoothness SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat defaultRedness;)
+ (CGFloat)defaultRedness SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat defaultSharpness;)
+ (CGFloat)defaultSharpness SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat defaultExposure;)
+ (CGFloat)defaultExposure SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) CGFloat hue;
@property (nonatomic) CGFloat saturation;
@property (nonatomic) CGFloat brightness;
@property (nonatomic) CGFloat contrast;
@property (nonatomic) CGFloat smoothness;
@property (nonatomic) CGFloat redness;
@property (nonatomic) CGFloat sharpness;
@property (nonatomic) CGFloat exposure;
- (CVPixelBufferRef _Nonnull)process:(CVPixelBufferRef _Nonnull)frame SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6HMSSDK19HMSVideoInputDevice")
@interface HMSVideoInputDevice : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HMSVideoInputDevice * _Nonnull frontCamera;)
+ (HMSVideoInputDevice * _Nonnull)frontCamera SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HMSVideoInputDevice * _Nonnull backCamera;)
+ (HMSVideoInputDevice * _Nonnull)backCamera SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6HMSSDK16HMSVideoSettings")
@interface HMSVideoSettings : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull codec;
@property (nonatomic, readonly) NSInteger frameRate;
@property (nonatomic, readonly) NSInteger width;
@property (nonatomic, readonly) NSInteger height;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class HMSVideoFrameInfo;
@class OperatingMode;
@class NSNumber;

SWIFT_CLASS("_TtC6HMSSDK26HMSVirtualBackgroundPlugin") SWIFT_AVAILABILITY(ios,introduced=15.0)
@interface HMSVirtualBackgroundPlugin : HMSVideoPlugin
@property (nonatomic) NSInteger frameRate SWIFT_DEPRECATED_MSG("Set the publish frame rate instead");
/// This callback will be fired whenever there is a change to frame orientation or resolution. The app can use
/// this to set a proper image to use for the new frame parameters.
@property (nonatomic, copy) UIImage * _Nonnull (^ _Nullable imageDataSource)(HMSVideoFrameInfo * _Nonnull) SWIFT_DEPRECATED_MSG("Set the operating mode instead");
@property (nonatomic, strong) UIImage * _Nullable backgroundImage SWIFT_DEPRECATED_MSG("Set the operating mode instead");
@property (nonatomic, strong) OperatingMode * _Nonnull operatingMode;
- (nonnull instancetype)initWithOperatingMode:(OperatingMode * _Nonnull)operatingMode OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithBackgroundImage:(UIImage * _Nullable)backgroundImage blurRadius:(NSNumber * _Nullable)blurRadius OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Use either init(background: UIImage) or init(blurIntensity: CGFloat) instead");
- (CVPixelBufferRef _Nonnull)process:(CVPixelBufferRef _Nonnull)frame SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtCC6HMSSDK26HMSVirtualBackgroundPlugin13OperatingMode")
@interface OperatingMode : NSObject
- (nonnull instancetype)initWithFixedImage:(UIImage * _Nonnull)fixedImage OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithBlurIntensity:(CGFloat)blurIntensity OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithImageDataSource:(UIImage * _Nonnull (^ _Nonnull)(HMSVideoFrameInfo * _Nonnull))imageDataSource OBJC_DESIGNATED_INITIALIZER;
+ (OperatingMode * _Nonnull)fixedImage:(UIImage * _Nonnull)image SWIFT_WARN_UNUSED_RESULT;
+ (OperatingMode * _Nonnull)blur:(CGFloat)blurIntensity SWIFT_WARN_UNUSED_RESULT;
+ (OperatingMode * _Nonnull)imageDataSource:(UIImage * _Nonnull (^ _Nonnull)(HMSVideoFrameInfo * _Nonnull))imageDataSource SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum WhiteboardState : NSInteger;

SWIFT_CLASS("_TtC6HMSSDK13HMSWhiteboard")
@interface HMSWhiteboard : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly) enum WhiteboardState state;
@property (nonatomic, readonly, copy) NSString * _Nullable title;
@property (nonatomic, readonly, strong) HMSPeer * _Nullable owner;
@property (nonatomic, readonly, copy) NSURL * _Nullable url;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, WhiteboardState, open) {
  WhiteboardStateStarted = 0,
  WhiteboardStateStopped = 1,
};

typedef SWIFT_ENUM(NSInteger, PermissionType, open) {
  PermissionTypeRead = 0,
  PermissionTypeWrite = 1,
  PermissionTypeAdmin = 2,
};


SWIFT_CLASS("_TtC6HMSSDK24HMSWhiteboardPermissions")
@interface HMSWhiteboardPermissions : HMSFeaturePermissions
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, HMSWhiteboardUpdateType, open) {
  HMSWhiteboardUpdateTypeStarted = 0,
  HMSWhiteboardUpdateTypeStopped = 1,
};



@interface NSNotification (SWIFT_EXTENSION(HMSSDK))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kHMSDidAddScreenTrack;)
+ (NSString * _Nonnull)kHMSDidAddScreenTrack SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kHMSDidRemoveScreenTrack;)
+ (NSString * _Nonnull)kHMSDidRemoveScreenTrack SWIFT_WARN_UNUSED_RESULT;
@end



#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
