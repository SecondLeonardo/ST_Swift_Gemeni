// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name HMSSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AVKit
import Accelerate
import CoreImage.CIFilterBuiltins
import CoreImage
import CoreMedia
import CoreTelephony
import Foundation
import HMSAnalyticsSDK
@_exported import HMSSDK
import HMSWebRTC
import MetalKit
import Network
import ReplayKit
import Swift
import SwiftUI
import UIKit
import VideoToolbox
import Vision
import _AVKit_SwiftUI
import _Concurrency
import _StringProcessing
import os.log
import os
@objc @_hasMissingDesignatedInitializers @objcMembers public class HMSPollLeaderboardResponse : ObjectiveC.NSObject {
  @objc final public let entries: [HMSSDK.HMSPollLeaderboardEntry]
  @objc final public let summary: HMSSDK.HMSPollLeaderboardSummary
  @objc final public let hasNext: Swift.Bool
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class HMSPollLeaderboardSummary : ObjectiveC.NSObject {
  @objc final public let totalPeersCount: Swift.Int
  @objc final public let respondedPeersCount: Swift.Int
  @objc final public let respondedCorrectlyPeersCount: Swift.Int
  @objc final public let averageTime: Swift.Float
  @objc final public let averageScore: Swift.Float
  @objc deinit
}
@objc @objcMembers public class HMSPollLeaderboardEntry : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let position: Swift.Int
  @objc final public let score: Swift.Int
  @objc final public let totalResponses: Swift.Int
  @objc final public let correctResponses: Swift.Int
  @objc final public let duration: Swift.Float
  @objc final public let peer: HMSSDK.HMSPollResponsePeerInfo?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc public class HMSAudioFilePlayerNode : HMSSDK.HMSAudioNode {
  @objc dynamic public init()
  @objc public var volume: Swift.Float {
    @objc get
    @objc set
  }
  @objc public func play(fileUrl: Foundation.URL, loops: Swift.Bool = false, interrupts: Swift.Bool = true, completionHandler: AVFAudio.AVAudioNodeCompletionHandler? = nil) throws
  @objc public func pause()
  @objc public func resume() throws
  @objc public func stop()
  @objc public var isPlaying: Swift.Bool {
    @objc get
  }
  @objc public var currentTime: Foundation.TimeInterval {
    @objc get
  }
  @objc public var duration: Foundation.TimeInterval {
    @objc get
  }
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class HMSPollQuestionAnswer : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let hidden: Swift.Bool
  final public let option: Swift.Int?
  @objc final public let options: [Swift.Int]?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class HMSSpeaker : ObjectiveC.NSObject {
  @objc final public let peer: HMSSDK.HMSPeer
  @objc final public let track: HMSSDK.HMSTrack
  @objc final public let level: Swift.Int
  @objc public init(peer: HMSSDK.HMSPeer, track: HMSSDK.HMSTrack, level: Swift.Int)
  @objc deinit
}
extension HMSSDK.HMSSDK : HMSAnalyticsSDK.HMSAnalytics {
  @objc dynamic public func sendEvent(_ name: Swift.String, payload: [Swift.String : Any], level: HMSAnalyticsSDK.HMSAnalyticsEventLevel)
}
extension Foundation.NSNotification.Name {
  public static let hmsPeerStateDidChange: Foundation.Notification.Name
}
public let kHMSPeerStateDidChangeNotification: Swift.String
@objc public enum HMSPeerType : Swift.Int {
  case regular
  case sip
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class HMSPeer : ObjectiveC.NSObject {
  @objc final public let peerID: Swift.String
  @objc final public let customerUserID: Swift.String?
  @objc final public let isLocal: Swift.Bool
  @objc final public let type: HMSSDK.HMSPeerType
  @objc public var name: Swift.String {
    @objc get
  }
  @objc public var role: HMSSDK.HMSRole? {
    @objc get
  }
  @objc public var metadata: Swift.String? {
    @objc get
  }
  @objc public var audioTrack: HMSSDK.HMSAudioTrack? {
    @objc get
  }
  @objc public var videoTrack: HMSSDK.HMSVideoTrack? {
    @objc get
  }
  @objc public var auxiliaryTracks: [HMSSDK.HMSTrack]? {
    get
  }
  @objc public var networkQuality: HMSSDK.HMSNetworkQuality? {
    @objc get
  }
  @objc public var isHandRaised: Swift.Bool {
    @objc get
  }
  @objc public var joinedAt: Foundation.Date {
    get
  }
  @objc public var updatedAt: Foundation.Date {
    get
  }
  @objc deinit
}
extension HMSSDK.HMSPeer {
  public static func == (lhs: HMSSDK.HMSPeer, rhs: HMSSDK.HMSPeer) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class HMSLocalPeer : HMSSDK.HMSPeer {
  @objc public func localAudioTrack() -> HMSSDK.HMSLocalAudioTrack?
  @objc public func localVideoTrack() -> HMSSDK.HMSLocalVideoTrack?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class HMSRemotePeer : HMSSDK.HMSPeer {
  @objc public func remoteAudioTrack() -> HMSSDK.HMSRemoteAudioTrack?
  @objc public func remoteVideoTrack() -> HMSSDK.HMSRemoteVideoTrack?
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class HMSAudioBufferSource : HMSSDK.HMSAudioSource {
  @objc dynamic public init()
  @objc public func enqueue(buffer: AVFAudio.AVAudioBuffer)
  @objc deinit
}
@objc public enum HMSErrorAction : Swift.Int {
  case none
  case track
  case `init`
  case publish
  case join
  case subscribe
  case dataChannelSend
  case token
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class HMSErrorFactory : ObjectiveC.NSObject {
  @objc public func websocketConnectionLost(action: HMSSDK.HMSErrorAction, params: [Swift.String : Any]? = nil) -> Foundation.NSError
  @objc public func httpError(code: Swift.Int, action: HMSSDK.HMSErrorAction, params: [Swift.String : Any]? = nil) -> Foundation.NSError
  @objc public func invalidEndpointUrl(action: HMSSDK.HMSErrorAction, params: [Swift.String : Any]? = nil) -> Foundation.NSError
  @objc public func endpointUnreachable(action: HMSSDK.HMSErrorAction, params: [Swift.String : Any]? = nil) -> Foundation.NSError
  @objc public func invalidTokenFormat(action: HMSSDK.HMSErrorAction, params: [Swift.String : Any]? = nil) -> Foundation.NSError
  @objc public func genericTrack(action: HMSSDK.HMSErrorAction, errorInfo: Swift.String = "", params: [Swift.String : Any]? = nil) -> Foundation.NSError
  @objc public func cantAccessCaptureDevice(action: HMSSDK.HMSErrorAction, deviceInfo: Swift.String, params: [Swift.String : Any]? = nil) -> Foundation.NSError
  @objc public func nothingToReturn(action: HMSSDK.HMSErrorAction, params: [Swift.String : Any]? = nil) -> Foundation.NSError
  @objc public func codecChangeNotPermitted(action: HMSSDK.HMSErrorAction, params: [Swift.String : Any]? = nil) -> Foundation.NSError
  @objc public func audiovideoSubsystemFailure(action: HMSSDK.HMSErrorAction, params: [Swift.String : Any]? = nil) -> Foundation.NSError
  @objc public func audiovideoSubsystemFailure(action: HMSSDK.HMSErrorAction, params: [Swift.String : Any]? = nil, message: Swift.String) -> Foundation.NSError
  @objc public func audiovideoSubsystemInUse(action: HMSSDK.HMSErrorAction, params: [Swift.String : Any]? = nil, message: Swift.String, isTerminal: Swift.Bool) -> Foundation.NSError
  @objc public func micCaptureFailed(action: HMSSDK.HMSErrorAction, params: [Swift.String : Any]? = nil) -> Foundation.NSError
  @objc public func createOfferFailed(action: HMSSDK.HMSErrorAction, params: [Swift.String : Any]? = nil) -> Foundation.NSError
  @objc public func createAnswerFailed(action: HMSSDK.HMSErrorAction, params: [Swift.String : Any]? = nil) -> Foundation.NSError
  @objc public func setLocalDescriptionFailed(action: HMSSDK.HMSErrorAction, params: [Swift.String : Any]? = nil) -> Foundation.NSError
  @objc public func setRemoteDescriptionFailed(action: HMSSDK.HMSErrorAction, params: [Swift.String : Any]? = nil) -> Foundation.NSError
  @objc public func iceFailure(action: HMSSDK.HMSErrorAction, params: [Swift.String : Any]? = nil) -> Foundation.NSError
  @objc public func iceDisconnected(action: HMSSDK.HMSErrorAction, params: [Swift.String : Any]? = nil) -> Foundation.NSError
  @objc public func serverErrors(code: Swift.Int, action: HMSSDK.HMSErrorAction, serverError: Swift.String, params: [Swift.String : Any]? = nil) -> Foundation.NSError
  @objc public func alreadyJoined(action: HMSSDK.HMSErrorAction, params: [Swift.String : Any]? = nil) -> Foundation.NSError
  @objc public func notConnected(action: HMSSDK.HMSErrorAction, params: [Swift.String : Any]? = nil) -> Foundation.NSError
  @objc public func unknown(action: HMSSDK.HMSErrorAction, errorInfo: Swift.String = "", params: [Swift.String : Any]? = nil) -> Foundation.NSError
  @objc public func unknownSoft(action: HMSSDK.HMSErrorAction, errorInfo: Swift.String = "", params: [Swift.String : Any]? = nil) -> Foundation.NSError
  @objc public func nsError(error: Swift.Error?, params: [Swift.String : Any]? = nil, isTerminal: Swift.Bool = false, message: Swift.String? = nil) -> Foundation.NSError?
  @objc public func jsonParsingFailed(action: HMSSDK.HMSErrorAction, jsonMessage: Swift.String, params: [Swift.String : Any]? = nil) -> Foundation.NSError
  @objc public func trackMetadataMissing(action: HMSSDK.HMSErrorAction, params: [Swift.String : Any]? = nil) -> Foundation.NSError
  @objc public func rtcTrackMissing(action: HMSSDK.HMSErrorAction, params: [Swift.String : Any]? = nil) -> Foundation.NSError
  @objc public func peerMetadataMissing(action: HMSSDK.HMSErrorAction, params: [Swift.String : Any]? = nil) -> Foundation.NSError
  @objc override dynamic public init()
  @objc deinit
}
extension HMSSDK.HMSError {
  public var canRetry: Swift.Bool {
    get
  }
  public var isTerminal: Swift.Bool {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class HMSPollQuestionResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let questionID: Swift.Int
  @objc final public let type: HMSSDK.HMSPollQuestionType
  @objc final public let skipped: Swift.Bool
  @objc final public let option: Swift.Int
  @objc final public let options: [Swift.Int]?
  @objc final public let text: Swift.String
  @objc final public let update: Swift.Bool
  @objc final public let duration: Swift.Int
  @objc final public let peer: HMSSDK.HMSPollResponsePeerInfo?
  final public let responseFinal: Swift.Bool?
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class HMSScreenBroadcastAudioNode : HMSSDK.HMSAudioNode, HMSSDK.HMSScreenAudioBufferReceiver {
  public var bufferReceiveBlock: ((AVFAudio.AVAudioPCMBuffer) -> Swift.Void)?
  @objc public func didReceiveAudioData(_ data: Foundation.Data)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class HMSPollQuestion : Swift.Codable {
  final public let index: Swift.Int
  final public let text: Swift.String
  final public let skippable: Swift.Bool
  final public let duration: Swift.Int
  final public let once: Swift.Bool
  final public let weight: Swift.Int
  final public let answerMinLen: Swift.Int?
  final public let answerMaxLen: Swift.Int?
  final public let type: HMSSDK.HMSPollQuestionType
  final public let options: [HMSSDK.HMSPollQuestionOption]?
  final public let answer: HMSSDK.HMSPollQuestionAnswer?
  public var responses: [HMSSDK.HMSPollQuestionResponse]?
  public var myResponses: [HMSSDK.HMSPollQuestionResponse]
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
extension HMSSDK.HMSPollQuestion {
  public var voted: Swift.Bool {
    get
  }
}
@objc public enum HMSPollQuestionType : Swift.Int, Swift.Codable, Swift.CaseIterable {
  case singleChoice
  case multipleChoice
  case shortAnswer
  case longAnswer
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [HMSSDK.HMSPollQuestionType]
  public typealias RawValue = Swift.Int
  public static var allCases: [HMSSDK.HMSPollQuestionType] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class HMSFrameCapturePlugin : HMSSDK.HMSVideoPlugin {
  @objc public func capture() -> UIKit.UIImage?
  @objc override dynamic public func process(_ frame: CoreVideo.CVPixelBuffer) -> CoreVideo.CVPixelBuffer
  @objc override dynamic public init()
  @objc deinit
}
@objc @objcMembers public class HMSHLSTimedMetadata : ObjectiveC.NSObject, Swift.Codable {
  @objc public init(payload: Swift.String, duration: Swift.Int = 1)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public protocol HMSDataSourceDelegate : AnyObject {
  func didUpdate(_ model: HMSSDK.HMSViewModel?)
  func didUpdate(_ speakers: [HMSSDK.HMSViewModel])
}
public class HMSDataSource {
  public var hms: HMSSDK.HMSSDK?
  public var sections: [HMSSDK.HMSSection]
  public var allModels: [HMSSDK.HMSViewModel] {
    get
  }
  weak public var delegate: HMSSDK.HMSDataSourceDelegate?
  public var sortComparator: ((HMSSDK.HMSViewModel, HMSSDK.HMSViewModel) -> Swift.Bool)?
  public var filter: ((HMSSDK.HMSViewModel) -> Swift.Bool)?
  public var sectionProducer: ((HMSSDK.HMSViewModel) -> HMSSDK.HMSSection.SectionIdentifier)?
  public init()
  public func reload()
  @objc deinit
}
extension HMSSDK.HMSDataSource : HMSSDK.HMSUpdateListener {
  @objc dynamic public func on(join room: HMSSDK.HMSRoom)
  @objc dynamic public func on(room: HMSSDK.HMSRoom, update: HMSSDK.HMSRoomUpdate)
  @objc dynamic public func onPeerListUpdate(added: [HMSSDK.HMSPeer], removed: [HMSSDK.HMSPeer])
  @objc dynamic public func on(peer: HMSSDK.HMSPeer, update: HMSSDK.HMSPeerUpdate)
  @objc dynamic public func on(track: HMSSDK.HMSTrack, update: HMSSDK.HMSTrackUpdate, for peer: HMSSDK.HMSPeer)
  @objc dynamic public func on(updated speakers: [HMSSDK.HMSSpeaker])
  @objc dynamic public func on(error: Swift.Error)
  @objc dynamic public func on(message: HMSSDK.HMSMessage)
  @objc dynamic public func onReconnecting()
  @objc dynamic public func onReconnected()
}
@_hasMissingDesignatedInitializers public class HMSViewModel {
  public var identifier: Swift.String
  final public let peer: HMSSDK.HMSPeer
  public var videoTrack: HMSSDK.HMSVideoTrack?
  @objc deinit
}
extension HMSSDK.HMSViewModel : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: HMSSDK.HMSViewModel, rhs: HMSSDK.HMSViewModel) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class HMSSection {
  public typealias SectionIdentifier = Swift.String
  public var models: [HMSSDK.HMSViewModel]
  @objc deinit
}
extension HMSSDK.HMSSection : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: HMSSDK.HMSSection, rhs: HMSSDK.HMSSection) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class HMSVideoFilterPlugin : HMSSDK.HMSVideoPlugin {
  @objc public static let defaultHue: CoreFoundation.CGFloat
  @objc public static let defaultSaturation: CoreFoundation.CGFloat
  @objc public static let defaultBrightness: CoreFoundation.CGFloat
  @objc public static let defaultContrast: CoreFoundation.CGFloat
  @objc public static let defaultSmoothness: CoreFoundation.CGFloat
  @objc public static let defaultRedness: CoreFoundation.CGFloat
  @objc public static let defaultSharpness: CoreFoundation.CGFloat
  @objc public static let defaultExposure: CoreFoundation.CGFloat
  @objc public var hue: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc public var saturation: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc public var brightness: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc public var contrast: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc public var smoothness: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc public var redness: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc public var sharpness: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc public var exposure: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  public var coreImageTransformers: [(CoreImage.CIImage) -> CoreImage.CIImage]
  @objc override dynamic public func process(_ frame: CoreVideo.CVPixelBuffer) -> CoreVideo.CVPixelBuffer
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class HMSHLSConfig : ObjectiveC.NSObject {
  @objc final public let variants: [HMSSDK.HMSHLSMeetingURLVariant]?
  @objc final public let recording: HMSSDK.HMSHLSRecordingConfig?
  @objc override dynamic public init()
  @objc public init(variants: [HMSSDK.HMSHLSMeetingURLVariant]? = nil, recording: HMSSDK.HMSHLSRecordingConfig? = nil)
  @objc deinit
}
@objc @objcMembers public class HMSHLSRecordingConfig : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let singleFilePerLayer: Swift.Bool
  @objc final public let enableVOD: Swift.Bool
  @objc public init(singleFilePerLayer: Swift.Bool = false, enableVOD: Swift.Bool = false)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class HMSHLSMeetingURLVariant : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let meetingURL: Foundation.URL?
  @objc final public let metadata: Swift.String
  @objc override dynamic public init()
  @objc public init(meetingURL: Foundation.URL? = nil, metadata: Swift.String = "")
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct HMSFrameworkInfo {
  public let type: HMSSDK.HMSFrameworkType?
  public let version: Swift.String?
  public let sdkVersion: Swift.String?
  public let isPrebuilt: Swift.Bool?
  public init(type: HMSSDK.HMSFrameworkType? = nil, version: Swift.String? = nil, sdkVersion: Swift.String? = nil, isPrebuilt: Swift.Bool? = nil)
}
public enum HMSFrameworkType : Swift.String {
  case reactWeb
  case reactNative
  case flutter
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class HMSWhiteboard : ObjectiveC.NSObject {
  @objc public enum WhiteboardState : Swift.Int, Swift.Codable {
    case started, stopped
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc final public let id: Swift.String
  @objc public var state: HMSSDK.HMSWhiteboard.WhiteboardState {
    get
  }
  @objc public var title: Swift.String? {
    get
  }
  @objc public var owner: HMSSDK.HMSPeer? {
    get
  }
  @objc public var url: Foundation.URL? {
    get
  }
  @objc public enum PermissionType : Swift.Int, Swift.RawRepresentable, Swift.Codable {
    case read, write, admin
    public typealias RawValue = Swift.String
    public var rawValue: HMSSDK.HMSWhiteboard.PermissionType.RawValue {
      get
    }
    public init?(rawValue: HMSSDK.HMSWhiteboard.PermissionType.RawValue)
  }
  @objc deinit
}
@objc extension Foundation.NSNotification {
  @objc public static var kHMSDidAddScreenTrack: Swift.String {
    @objc get
  }
  @objc public static var kHMSDidRemoveScreenTrack: Swift.String {
    @objc get
  }
}
@_inheritsConvenienceInitializers @objc public class HMSScreenShareConstants : ObjectiveC.NSObject {
  @objc public static let kHMSScreenOrientationKey: Swift.String
  @objc public static let kHMSActiveSDKId: Swift.String
  @objc public static let kHMSActiveSDKIdForAudio: Swift.String
  @objc public static let kHMSScreenMachPortName: Swift.String
  @objc public static let kHMSAudioMachPortName: Swift.String
  @objc public static let kHMSScreenShareFPS: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
infix operator ==? : ComparisonPrecedence
@objc @_inheritsConvenienceInitializers @objcMembers public class HMSRTMPConfig : ObjectiveC.NSObject {
  @objc override dynamic public init()
  public init(meetingURL: Foundation.URL?, rtmpURLs: [Foundation.URL]?, record: Swift.Bool, resolution: HMSSDK.HMSVideoResolution? = nil)
  @objc deinit
}
extension HMSSDK.HMSRole {
  @objc dynamic public var canPublish: Swift.Bool {
    @objc get
  }
}
@objc public enum HMSRoomUpdate : Swift.Int, Swift.CustomStringConvertible {
  case roomTypeChanged
  case metaDataUpdated
  case peerCountUpdated
  case browserRecordingStateUpdated
  case serverRecordingStateUpdated
  case rtmpStreamingStateUpdated
  case hlsStreamingStateUpdated
  case hlsRecordingStateUpdated
  case transcriptionStateUpdated
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class HMSRemovedFromRoomNotification : ObjectiveC.NSObject {
  @objc final public let requestedBy: HMSSDK.HMSPeer?
  @objc final public let reason: Swift.String
  @objc final public let roomEnded: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class HMSRoleChangeRequest : ObjectiveC.NSObject {
  @objc final public let suggestedRole: HMSSDK.HMSRole
  @objc final public let requestedBy: HMSSDK.HMSPeer?
  @objc override dynamic public init()
  @objc deinit
}
@objc @objcMembers public class HMSPollQuestionResponseResult : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let question: Swift.Int
  final public let correct: Swift.Bool?
  @objc final public let error: Swift.Error?
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class HMSNetworkQuality : ObjectiveC.NSObject {
  @objc final public let downlinkQuality: Swift.Int
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class HMSSampleBufferDisplayView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public class var layerClass: Swift.AnyClass {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var isEnabled: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var track: HMSSDK.HMSVideoTrack? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var preferredSize: CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) public var videoContentMode: UIKit.UIView.ContentMode {
    get
    set
  }
  @objc deinit
}
extension HMSSDK.HMSSampleBufferDisplayView : HMSWebRTC.HMSRTCVideoRenderer {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func setSize(_ size: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func renderFrame(_ frame: HMSWebRTC.HMSRTCVideoFrame?)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class HMSChangeTrackStateRequest : ObjectiveC.NSObject {
  @objc final public let track: HMSSDK.HMSTrack
  @objc final public let mute: Swift.Bool
  @objc final public let requestedBy: HMSSDK.HMSPeer?
  @objc override dynamic public init()
  @objc deinit
}
public enum HMSConnectivityCheckState : Swift.Int {
  case starting
  case initFetched
  case signallingConnected
  case iceEstablished
  case mediaCaptured
  case mediaPublished
  case completed
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class HMSConnectivityCheckResult : Swift.Encodable {
  public var testTimestamp: Foundation.TimeInterval
  public var state: HMSSDK.HMSConnectivityCheckState
  public var signallingReport: HMSSDK.HMSSignallingReport
  public var mediaServerReport: HMSSDK.HMSMediaServerReport
  public var deviceTestReport: HMSSDK.HMSDeviceTestReport?
  public var errors: [Swift.Error]
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers public class HMSSignallingReport : Swift.Codable {
  public var isConnected: Swift.Bool
  public var isInitConnected: Swift.Bool
  public var websocketUrl: Swift.String?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class HMSMediaServerReport : Swift.Codable {
  public var isPublishICEConnected: Swift.Bool
  public var isSubscribeICEConnected: Swift.Bool
  public var stats: HMSSDK.HMSConnectivityStatsReport?
  public var connectionQualityScore: Swift.Float?
  public var publishIceCandidatesGathered: [HMSSDK.HMSIceCandidate]
  public var subscribeIceCandidatesGathered: [HMSSDK.HMSIceCandidate]
  public var publishICECandidatePairSelected: HMSSDK.HMSIceCandidatePair?
  public var subscribeICECandidatePairSelected: HMSSDK.HMSIceCandidatePair?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class HMSIceCandidatePair : Swift.Codable {
  public var local: HMSSDK.HMSIceCandidate
  public var remote: HMSSDK.HMSIceCandidate
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class HMSIceCandidate : Swift.Codable {
  public var sdpMid: Swift.String
  public var sdpMLineIndex: Swift.Int
  public var sdp: Swift.String
  public var serverUrl: Swift.String
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class HMSDeviceTestReport : Swift.Codable {
  public var audioInputReport: HMSSDK.HMSAudioInputDeviceReport?
  public var audioOutputReport: HMSSDK.HMSAudioOutputDeviceReport?
  public var videoInputReport: HMSSDK.HMSVideoInputDeviceReport?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class HMSAudioInputDeviceReport : Swift.Codable {
  public var isPassed: Swift.Bool
  public var selectedAudioInputDevice: HMSSDK.HMSAudioInputDevice
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class HMSAudioOutputDeviceReport : Swift.Codable {
  public var isPassed: Swift.Bool
  public var selectedAudioOutputDevice: HMSSDK.HMSAudioOutputDevice
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class HMSVideoInputDeviceReport : Swift.Codable {
  public var isPassed: Swift.Bool
  public var selectedVideoInputDevice: HMSSDK.HMSVideoInputDevice
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct HMSConnectivityStatsReport : Swift.Codable {
  public let combined: HMSSDK.HMSConnectivityStats
  public let audio: HMSSDK.HMSConnectivityStats
  public let video: HMSSDK.HMSConnectivityStats
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct HMSConnectivityStats : Swift.Codable {
  public let bytesSent: Swift.UInt64
  public let bytesReceived: Swift.UInt64
  public let packetsReceived: Swift.UInt64
  public let packetsLost: Swift.UInt64
  public let bitrateSent: Swift.Double
  public let bitrateReceived: Swift.Double
  public let roundTripTime: Swift.Double
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class HMSPoll : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let pollID: Swift.String
  @objc final public let title: Swift.String
  @objc final public let duration: Swift.Int
  @objc final public let anonymous: Swift.Bool
  final public let mode: HMSSDK.HMSPollUserTrackingMode?
  @objc final public let rolesThatCanVote: [HMSSDK.HMSRole]
  @objc final public let rolesThatCanViewResponses: [HMSSDK.HMSRole]
  final public let questionCount: Swift.Int?
  @objc final public let startedBy: HMSSDK.HMSPeer?
  @objc final public let stoppedBy: HMSSDK.HMSPeer?
  @objc public var createdBy: HMSSDK.HMSPeer? {
    get
  }
  @objc public var startedAt: Foundation.Date? {
    get
  }
  @objc public var stoppedAt: Foundation.Date? {
    get
  }
  @objc final public let category: HMSSDK.HMSPollCategory
  @objc public var state: HMSSDK.HMSPollState {
    get
  }
  public var questions: [HMSSDK.HMSPollQuestion]? {
    get
  }
  @objc public var result: HMSSDK.HMSPollResult? {
    get
  }
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@objc public enum HMSPollUserTrackingMode : Swift.Int, Swift.Codable {
  case peerID
  case customerUserID
  case userName
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum HMSPollState : Swift.Int, Swift.Codable {
  case created
  case started
  case stopped
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum HMSPollCategory : Swift.Int, Swift.Codable {
  case poll
  case quiz
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum HMSRecordingState : Swift.Int {
  case none
  case starting
  case started
  case paused
  case resumed
  case stopped
  case failed
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension HMSSDK.HMSRecordingState {
  public func displayString() -> Swift.String
}
@objc public enum HMSTranscriptionStatus : Swift.Int {
  case none
  case starting
  case started
  case stopped
  case failed
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension HMSSDK.HMSTranscriptionStatus {
  public func displayString() -> Swift.String
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class HMSTranscriptionState : ObjectiveC.NSObject {
  @objc public var startedAt: Foundation.Date?
  @objc public var updatedAt: Foundation.Date?
  @objc public var stoppedAt: Foundation.Date?
  @objc final public let error: Swift.Error?
  @objc final public let state: HMSSDK.HMSTranscriptionStatus
  @objc final public let mode: Swift.String
  @objc public var updatedBy: HMSSDK.HMSPeer?
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class HMSBaseRecordingState : ObjectiveC.NSObject {
  @objc public var initialising: Swift.Bool {
    @objc get
  }
  @objc public var running: Swift.Bool {
    @objc get
  }
  @objc final public let startedAt: Foundation.Date?
  @objc final public let error: Swift.Error?
  @objc final public let state: HMSSDK.HMSRecordingState
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class HMSBrowserRecordingState : HMSSDK.HMSBaseRecordingState {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class HMSServerRecordingState : HMSSDK.HMSBaseRecordingState {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class HMSHLSRecordingState : HMSSDK.HMSBaseRecordingState {
  @objc deinit
}
@objc public enum HMSStreamingState : Swift.Int {
  case none
  case starting
  case started
  case stopped
  case failed
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension HMSSDK.HMSStreamingState {
  public func displayString() -> Swift.String
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class HMSBaseStreamingState : ObjectiveC.NSObject {
  @objc public var running: Swift.Bool {
    @objc get
  }
  @objc final public let startedAt: Foundation.Date?
  @objc final public let error: Swift.Error?
  @objc final public let state: HMSSDK.HMSStreamingState
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class HMSRTMPStreamingState : HMSSDK.HMSBaseStreamingState {
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class HMSHLSStreamingState : HMSSDK.HMSBaseStreamingState {
  @objc final public let variants: [HMSSDK.HMSHLSVariant]
  @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
}
@objc public enum HMSHLSPlaylistType : Swift.Int, Swift.Codable {
  case dvr
  case noDVR
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class HMSHLSVariant : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let url: Foundation.URL?
  @objc final public let meetingURL: Foundation.URL
  @objc final public let metadata: Swift.String
  @objc final public let startedAt: Foundation.Date?
  final public let playlistType: HMSSDK.HMSHLSPlaylistType?
  @objc override dynamic public init()
  @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc public class HMSAudioBufferPlayerNode : HMSSDK.HMSAudioNode {
  @objc dynamic public init()
  @objc public var volume: Swift.Float {
    @objc get
    @objc set
  }
  @objc public func play(buffer: AVFAudio.AVAudioPCMBuffer) throws
  @objc public func pause()
  @objc public func resume() throws
  @objc public func stop()
  @objc public var isPlaying: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class HMSVideoInputDevice : ObjectiveC.NSObject, Swift.Codable {
  @objc public static let frontCamera: HMSSDK.HMSVideoInputDevice
  @objc public static let backCamera: HMSSDK.HMSVideoInputDevice
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class HMSSessionStore : ObjectiveC.NSObject {
  @objc public func object(forKey key: Swift.String, completion: @escaping ((Any?, Swift.Error?) -> Swift.Void))
  @objc public func set(_ object: Any, forKey key: Swift.String, completion: ((Any?, Swift.Error?) -> Swift.Void)? = nil)
  @objc public func observeChanges(forKeys keys: [Swift.String], changeObserver: @escaping (Swift.String, Any?) -> Swift.Void, completion: ((ObjectiveC.NSObjectProtocol?, Swift.Error?) -> Swift.Void)? = nil)
  @objc public func removeObserver(_ observer: ObjectiveC.NSObjectProtocol)
  @objc deinit
}
@objc @available(iOS 15.0, *)
@objcMembers public class HMSVirtualBackgroundPlugin : HMSSDK.HMSVideoPlugin {
  @_hasMissingDesignatedInitializers @objc public class OperatingMode : ObjectiveC.NSObject {
    public enum Mode {
      case fixedImage(_: UIKit.UIImage)
      case blur(_: CoreFoundation.CGFloat)
      case imageDataSource(_: ((HMSSDK.HMSVideoFrameInfo) -> UIKit.UIImage))
    }
    final public let mode: HMSSDK.HMSVirtualBackgroundPlugin.OperatingMode.Mode
    @objc public init(fixedImage: UIKit.UIImage)
    @objc public init(blurIntensity: CoreFoundation.CGFloat)
    @objc public init(imageDataSource: @escaping ((HMSSDK.HMSVideoFrameInfo) -> UIKit.UIImage))
    @objc public static func fixedImage(_ image: UIKit.UIImage) -> HMSSDK.HMSVirtualBackgroundPlugin.OperatingMode
    @objc public static func blur(_ blurIntensity: CoreFoundation.CGFloat) -> HMSSDK.HMSVirtualBackgroundPlugin.OperatingMode
    @objc public static func imageDataSource(_ imageDataSource: @escaping ((HMSSDK.HMSVideoFrameInfo) -> UIKit.UIImage)) -> HMSSDK.HMSVirtualBackgroundPlugin.OperatingMode
    @objc deinit
  }
  @available(*, deprecated, message: "Set the publish frame rate instead")
  @objc public var frameRate: Swift.Int {
    @objc get
    @objc set
  }
  @available(*, deprecated, message: "Set the operating mode instead")
  @objc public var imageDataSource: ((HMSSDK.HMSVideoFrameInfo) -> UIKit.UIImage)? {
    @objc get
    @objc set
  }
  @available(*, deprecated, message: "Set the operating mode instead")
  @objc public var backgroundImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc public var operatingMode: HMSSDK.HMSVirtualBackgroundPlugin.OperatingMode {
    @objc get
    @objc set
  }
  @objc public init(operatingMode: HMSSDK.HMSVirtualBackgroundPlugin.OperatingMode)
  @available(*, deprecated, message: "Use either init(background: UIImage) or init(blurIntensity: CGFloat) instead")
  @objc public init(backgroundImage: UIKit.UIImage?, blurRadius: Foundation.NSNumber? = nil)
  @objc override dynamic public func process(_ frame: CoreVideo.CVPixelBuffer) -> CoreVideo.CVPixelBuffer
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class HMSAudioSource : ObjectiveC.NSObject {
  public func didReceiveAudioData(_ data: Foundation.Data)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class HMSLocalScreenTrack : HMSSDK.HMSVideoTrack, HMSSDK.HMSScreenVideoBufferReceiver {
  @available(iOS 16.0, *)
  @objc public func didReceiveVideoData(_ data: Foundation.Data)
  @objc deinit
}
@objc public enum HMSTrackUpdate : Swift.Int, Swift.CustomStringConvertible {
  case trackAdded
  case trackRemoved
  case trackMuted
  case trackUnmuted
  case trackDescriptionChanged
  case trackDegraded
  case trackRestored
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class HMSPollBuilder : ObjectiveC.NSObject {
  @objc public func withPollID(_ pollID: Swift.String) -> HMSSDK.HMSPollBuilder
  @objc public func withTitle(_ title: Swift.String) -> HMSSDK.HMSPollBuilder
  @objc public func withDuration(_ duration: Swift.Int) -> HMSSDK.HMSPollBuilder
  @objc public func withAnonymous(_ anonymous: Swift.Bool) -> HMSSDK.HMSPollBuilder
  @objc public func withCategory(_ category: HMSSDK.HMSPollCategory) -> HMSSDK.HMSPollBuilder
  @objc public func withUserTrackingMode(_ mode: HMSSDK.HMSPollUserTrackingMode) -> HMSSDK.HMSPollBuilder
  @objc public func withRolesThatCanVote(_ rolesThatCanVote: [HMSSDK.HMSRole]?) -> HMSSDK.HMSPollBuilder
  @objc public func withRolesThatCanViewResponses(_ rolesThatCanViewResponses: [HMSSDK.HMSRole]?) -> HMSSDK.HMSPollBuilder
  @objc public func addMultiChoiceQuestion(with title: Swift.String, options: [Swift.String]) -> HMSSDK.HMSPollBuilder
  @objc public func addSingleChoiceQuestion(with title: Swift.String, options: [Swift.String]) -> HMSSDK.HMSPollBuilder
  @objc public func addQuestion(with builder: HMSSDK.HMSPollQuestionBuilder) -> HMSSDK.HMSPollBuilder
  @objc public func addShortAnswerQuestion(with title: Swift.String) -> HMSSDK.HMSPollBuilder
  @objc public func addLongAnswerQuestion(with title: Swift.String) -> HMSSDK.HMSPollBuilder
  @objc public func build() -> HMSSDK.HMSPoll
  @objc override dynamic public init()
  @objc deinit
}
extension HMSSDK.HMSSDK {
  @objc dynamic public func getAuthTokenByRoomCode(_ roomCode: Swift.String, userID: Swift.String? = nil, completion: @escaping (Swift.String?, Swift.Error?) -> Swift.Void)
}
@_hasMissingDesignatedInitializers @objc public class HMSAudioOutputDevice : ObjectiveC.NSObject, Swift.Codable {
  @objc public static let speaker: HMSSDK.HMSAudioOutputDevice
  @objc public static let earpiece: HMSSDK.HMSAudioOutputDevice
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class HMSRoom : ObjectiveC.NSObject {
  @objc public var name: Swift.String? {
    get
  }
  @objc public var roomID: Swift.String? {
    get
  }
  @objc public var sessionID: Swift.String? {
    get
  }
  @objc public var sessionStartedAt: Foundation.Date? {
    get
  }
  @objc public var transcriptionStates: [HMSSDK.HMSTranscriptionState]? {
    get
  }
  @objc public var metaData: Swift.String? {
    get
  }
  @objc public var peers: [HMSSDK.HMSPeer] {
    get
  }
  public var peerCount: Swift.Int? {
    get
  }
  @objc public var isLarge: Swift.Bool {
    get
  }
  @objc public var browserRecordingState: HMSSDK.HMSBrowserRecordingState {
    get
  }
  @objc public var serverRecordingState: HMSSDK.HMSServerRecordingState {
    get
  }
  @objc public var hlsRecordingState: HMSSDK.HMSHLSRecordingState {
    get
  }
  @objc public var rtmpStreamingState: HMSSDK.HMSRTMPStreamingState {
    get
  }
  @objc public var hlsStreamingState: HMSSDK.HMSHLSStreamingState {
    get
  }
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class HMSTranscripts : ObjectiveC.NSObject {
  @objc final public let transcripts: [HMSSDK.HMSTranscript]
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class HMSTranscript : ObjectiveC.NSObject {
  @objc final public let start: Swift.Int
  @objc final public let end: Swift.Int
  @objc final public let transcript: Swift.String
  @objc final public let peer: HMSSDK.HMSPeer
  @objc final public let isFinal: Swift.Bool
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class HMSMessage : ObjectiveC.NSObject {
  @objc final public let messageID: Swift.String
  @objc final public let message: Swift.String
  @objc final public let type: Swift.String
  @objc public var sender: HMSSDK.HMSPeer?
  @objc public var recipient: HMSSDK.HMSMessageRecipient
  @objc final public let time: Foundation.Date
  @objc public init(message: Swift.String, type: Swift.String = "chat")
  @objc public init(message: Swift.String, type: Swift.String = "chat", peerRecipient: HMSSDK.HMSPeer)
  @objc public init(message: Swift.String, type: Swift.String = "chat", rolesRecipient: [HMSSDK.HMSRole])
  @objc deinit
}
@objc public enum HMSMessageRecipientType : Swift.Int {
  case broadcast = 0
  case peer
  case roles
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class HMSMessageRecipient : ObjectiveC.NSObject {
  @objc final public let type: HMSSDK.HMSMessageRecipientType
  @objc final public let peerRecipient: HMSSDK.HMSPeer?
  @objc final public let rolesRecipient: [HMSSDK.HMSRole]?
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum HMSPluginUnsupportedErrorTypes : Swift.Int {
  case none
  case operatingSystemNotSupported
  case deviceNotsupported
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum HMSPluginSupportResultType : Swift.Int {
  case supported
  case unsupported
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class HMSPluginSupportResult : ObjectiveC.NSObject {
  @objc public static var supported: HMSSDK.HMSPluginSupportResult
  @objc public static var deviceNotSupported: HMSSDK.HMSPluginSupportResult
  @objc public static var operatingSystemNotSupported: HMSSDK.HMSPluginSupportResult
  @objc public init(type: HMSSDK.HMSPluginSupportResultType, errorType: HMSSDK.HMSPluginUnsupportedErrorTypes = .none, errorMessage: Swift.String? = nil)
  @objc deinit
}
@objc public protocol HMSPlugin {
  @objc func checkSupport() -> HMSSDK.HMSPluginSupportResult
  @objc func activate() -> HMSSDK.HMSPluginSupportResult
  @objc func deactivate()
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class HMSRole : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let name: Swift.String
  @objc final public let publishSettings: HMSSDK.HMSPublishSettings
  @objc final public let subscribeSettings: HMSSDK.HMSSubscribeSettings
  @objc final public let permissions: HMSSDK.HMSPermissions
  @objc final public let priority: Swift.Int
  @objc final public let generalPermissions: [Swift.String : Swift.String]?
  @objc final public let internalPlugins: [Swift.String : Swift.String]?
  @objc final public let externalPlugins: [Swift.String : Swift.String]?
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class HMSPublishSettings : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let audio: HMSSDK.HMSAudioSettings
  @objc final public let video: HMSSDK.HMSVideoSettings
  @objc final public let screen: HMSSDK.HMSVideoSettings
  @objc final public let simulcast: HMSSDK.HMSSimulcastSettings?
  @objc final public let allowed: [Swift.String]?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class HMSAudioSettings : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let bitRate: Swift.Int
  @objc final public let codec: Swift.String
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class HMSVideoSettings : ObjectiveC.NSObject, Swift.Codable {
  final public let bitRate: Swift.Int?
  @objc final public let codec: Swift.String
  @objc final public let frameRate: Swift.Int
  @objc final public let width: Swift.Int
  @objc final public let height: Swift.Int
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class HMSSimulcastSettings : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let video: HMSSDK.HMSSimulcastSettingsPolicy?
  @objc final public let screen: HMSSDK.HMSSimulcastSettingsPolicy?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class HMSSimulcastSettingsPolicy : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let layers: [HMSSDK.HMSSimulcastLayerSettingsPolicy]?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class HMSSimulcastLayerSettingsPolicy : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let rid: Swift.String
  final public let scaleResolutionDownBy: Swift.Double?
  final public let maxBitrate: Swift.Int?, maxFramerate: Swift.Int?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class HMSSubscribeSettings : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let subscribeToRoles: [Swift.String]?
  @objc final public let maxSubsBitRate: Swift.Int
  @objc final public let subscribeDegradation: HMSSDK.HMSSubscribeDegradationPolicy?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class HMSSubscribeDegradationPolicy : ObjectiveC.NSObject, Swift.Codable {
  public var packetLossThreshold: Swift.Int?, degradeGracePeriodSeconds: Swift.Int?, recoverGracePeriodSeconds: Swift.Int?
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class HMSFeaturePermissions : ObjectiveC.NSObject, Swift.Codable {
  public var admin: Swift.Bool?
  public var write: Swift.Bool?
  public var read: Swift.Bool?
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class HMSWhiteboardPermissions : HMSSDK.HMSFeaturePermissions {
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers public class HMSTranscriptionPermissions : Swift.Codable {
  @objc public var mode: Swift.String?
  public var admin: Swift.Bool?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objcMembers public class HMSNoiseCancellationPermissions : Swift.Codable {
  public var enabled: Swift.Bool?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class HMSPermissions : ObjectiveC.NSObject, Swift.Codable {
  final public let endRoom: Swift.Bool?
  final public let removeOthers: Swift.Bool?
  final public let unmute: Swift.Bool?
  final public let mute: Swift.Bool?
  final public let changeRole: Swift.Bool?
  final public let hlsStreaming: Swift.Bool?
  final public let rtmpStreaming: Swift.Bool?
  final public let browserRecording: Swift.Bool?
  final public let pollRead: Swift.Bool?
  final public let pollWrite: Swift.Bool?
  @objc public var whiteboard: HMSSDK.HMSWhiteboardPermissions?
  public var transcriptions: [HMSSDK.HMSTranscriptionPermissions]?
  public var noiseCancellation: HMSSDK.HMSNoiseCancellationPermissions?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, *)
@objc public class HMSAudioMixerSource : HMSSDK.HMSAudioSource {
  @objc public init(nodes: [HMSSDK.HMSAudioNode]) throws
  @objc deinit
  @objc public func reconnect()
}
@frozen public struct AnyDecodable : Swift.Decodable {
  public let value: Any
  public init<T>(_ value: T?)
}
@usableFromInline
internal protocol _AnyDecodable {
  var value: Any { get }
  init<T>(_ value: T?)
}
extension HMSSDK.AnyDecodable : HMSSDK._AnyDecodable {
}
extension HMSSDK._AnyDecodable {
  public init(from decoder: Swift.Decoder) throws
}
extension HMSSDK.AnyDecodable : Swift.Equatable {
  public static func == (lhs: HMSSDK.AnyDecodable, rhs: HMSSDK.AnyDecodable) -> Swift.Bool
}
extension HMSSDK.AnyDecodable : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension HMSSDK.AnyDecodable : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension HMSSDK.AnyDecodable : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@frozen public struct AnyEncodable : Swift.Encodable {
  public let value: Any
  public init<T>(_ value: T?)
}
@usableFromInline
internal protocol _AnyEncodable {
  var value: Any { get }
  init<T>(_ value: T?)
}
extension HMSSDK.AnyEncodable : HMSSDK._AnyEncodable {
}
extension HMSSDK._AnyEncodable {
  public func encode(to encoder: Swift.Encoder) throws
}
extension HMSSDK.AnyEncodable : Swift.Equatable {
  public static func == (lhs: HMSSDK.AnyEncodable, rhs: HMSSDK.AnyEncodable) -> Swift.Bool
}
extension HMSSDK.AnyEncodable : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension HMSSDK.AnyEncodable : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension HMSSDK.AnyEncodable : Swift.ExpressibleByNilLiteral {
}
extension HMSSDK.AnyEncodable : Swift.ExpressibleByBooleanLiteral {
  public typealias BooleanLiteralType = Swift.Bool
}
extension HMSSDK.AnyEncodable : Swift.ExpressibleByIntegerLiteral {
  public typealias IntegerLiteralType = Swift.Int
}
extension HMSSDK.AnyEncodable : Swift.ExpressibleByFloatLiteral {
  public typealias FloatLiteralType = Swift.Double
}
extension HMSSDK.AnyEncodable : Swift.ExpressibleByStringLiteral {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension HMSSDK.AnyEncodable : Swift.ExpressibleByStringInterpolation {
  public typealias StringInterpolation = Swift.DefaultStringInterpolation
}
extension HMSSDK.AnyEncodable : Swift.ExpressibleByArrayLiteral {
  public typealias ArrayLiteralElement = Any
}
extension HMSSDK.AnyEncodable : Swift.ExpressibleByDictionaryLiteral {
  public typealias Key = Swift.AnyHashable
  public typealias Value = Any
}
extension HMSSDK._AnyEncodable {
  public init(nilLiteral _: ())
  public init(booleanLiteral value: Swift.Bool)
  public init(integerLiteral value: Swift.Int)
  public init(floatLiteral value: Swift.Double)
  public init(extendedGraphemeClusterLiteral value: Swift.String)
  public init(stringLiteral value: Swift.String)
  public init(arrayLiteral elements: Any...)
  public init(dictionaryLiteral elements: (Swift.AnyHashable, Any)...)
}
extension HMSSDK.AnyEncodable : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@frozen public struct AnyCodable : Swift.Codable {
  public let value: Any
  public init<T>(_ value: T?)
}
extension HMSSDK.AnyCodable : HMSSDK._AnyEncodable, HMSSDK._AnyDecodable {
}
extension HMSSDK.AnyCodable : Swift.Equatable {
  public static func == (lhs: HMSSDK.AnyCodable, rhs: HMSSDK.AnyCodable) -> Swift.Bool
}
extension HMSSDK.AnyCodable : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension HMSSDK.AnyCodable : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension HMSSDK.AnyCodable : Swift.ExpressibleByNilLiteral {
}
extension HMSSDK.AnyCodable : Swift.ExpressibleByBooleanLiteral {
  public typealias BooleanLiteralType = Swift.Bool
}
extension HMSSDK.AnyCodable : Swift.ExpressibleByIntegerLiteral {
  public typealias IntegerLiteralType = Swift.Int
}
extension HMSSDK.AnyCodable : Swift.ExpressibleByFloatLiteral {
  public typealias FloatLiteralType = Swift.Double
}
extension HMSSDK.AnyCodable : Swift.ExpressibleByStringLiteral {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension HMSSDK.AnyCodable : Swift.ExpressibleByStringInterpolation {
  public typealias StringInterpolation = Swift.DefaultStringInterpolation
}
extension HMSSDK.AnyCodable : Swift.ExpressibleByArrayLiteral {
  public typealias ArrayLiteralElement = Any
}
extension HMSSDK.AnyCodable : Swift.ExpressibleByDictionaryLiteral {
  public typealias Key = Swift.AnyHashable
  public typealias Value = Any
}
extension HMSSDK.AnyCodable : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class HMSAudioInputDevice : ObjectiveC.NSObject, Swift.Codable {
  @objc public static let systemDefault: HMSSDK.HMSAudioInputDevice
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc public class HMSNoiseCancellationPlugin : ObjectiveC.NSObject {
  @objc final public let modelPath: Swift.String
  @objc final public let initialState: HMSSDK.HMSNoiseCancellationInitialState
  @objc public init(modelPath: Swift.String, initialState: HMSSDK.HMSNoiseCancellationInitialState)
  @objc public var isNoiseCancellationAvailable: Swift.Bool {
    get
  }
  @objc public func isEnabled() -> Swift.Bool
  @objc public func enable() throws
  @objc public func disable() throws
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class HMSPollQuestionOption : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let index: Swift.Int
  @objc final public let text: Swift.String
  @objc final public let weight: Swift.Int
  @objc public var voteCount: Swift.Int
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@objc @objcMembers public class HMSPollQuestionResult : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let question: Swift.Int
  @objc final public let type: Swift.String
  @objc final public let optionVoteCounts: [Swift.Int]?
  @objc final public let correctVotes: Swift.Int
  @objc final public let skippedVotes: Swift.Int
  @objc final public let totalVotes: Swift.Int
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
extension HMSSDK.HMSRoomLayout {
  public var string: Swift.String? {
    get
  }
  #if compiler(>=5.3) && $EffectfulProp
  public var dictionary: [Swift.String : Swift.AnyObject]? {
    get throws
  }
  #endif
}
public struct HMSRoomLayout : Swift.Codable {
  public var rawData: Foundation.Data?
  public let data: [HMSSDK.HMSRoomLayout.LayoutData]?
  public struct LayoutData : Swift.Codable {
    public let id: Swift.String
    public let role_id: Swift.String
    public let role: Swift.String
    public let template_id: Swift.String
    public let app_id: Swift.String
    public let themes: [HMSSDK.HMSRoomLayout.LayoutData.Theme]
    public struct Theme : Swift.Codable {
      public let name: Swift.String
      public let `default`: Swift.Bool
      public let palette: HMSSDK.HMSRoomLayout.LayoutData.Theme.ColorPalette?
      public struct ColorPalette : Swift.Codable {
        public let primary_default: Swift.String
        public let primary_bright: Swift.String
        public let primary_dim: Swift.String
        public let primary_disabled: Swift.String
        public let on_primary_high: Swift.String
        public let on_primary_medium: Swift.String
        public let on_primary_low: Swift.String
        public let secondary_default: Swift.String
        public let secondary_bright: Swift.String
        public let secondary_dim: Swift.String
        public let secondary_disabled: Swift.String
        public let on_secondary_high: Swift.String
        public let on_secondary_medium: Swift.String
        public let on_secondary_low: Swift.String
        public let background_default: Swift.String
        public let background_dim: Swift.String
        public let surface_default: Swift.String
        public let surface_bright: Swift.String
        public let surface_brighter: Swift.String
        public let surface_dim: Swift.String
        public let on_surface_high: Swift.String
        public let on_surface_medium: Swift.String
        public let on_surface_low: Swift.String
        public let border_default: Swift.String
        public let border_bright: Swift.String
        public let alert_success: Swift.String
        public let alert_warning: Swift.String
        public let alert_error_default: Swift.String
        public let alert_error_bright: Swift.String
        public let alert_error_brighter: Swift.String
        public let alert_error_dim: Swift.String
        public func encode(to encoder: Swift.Encoder) throws
        public init(from decoder: Swift.Decoder) throws
      }
      public func encode(to encoder: Swift.Encoder) throws
      public init(from decoder: Swift.Decoder) throws
    }
    public let typography: HMSSDK.HMSRoomLayout.LayoutData.Typography?
    public struct Typography : Swift.Codable {
      public let font_family: Swift.String?
      public func encode(to encoder: Swift.Encoder) throws
      public init(from decoder: Swift.Decoder) throws
    }
    public let logo: HMSSDK.HMSRoomLayout.LayoutData.Logo?
    public struct Logo : Swift.Codable {
      public let url: Swift.String?
      public func encode(to encoder: Swift.Encoder) throws
      public init(from decoder: Swift.Decoder) throws
    }
    public let screens: HMSSDK.HMSRoomLayout.LayoutData.Screens?
    public struct Screens : Swift.Codable {
      public let preview: HMSSDK.HMSRoomLayout.LayoutData.Screens.Preview?
      public struct Preview : Swift.Codable {
        public let `default`: HMSSDK.HMSRoomLayout.LayoutData.Screens.Preview.DefaultPreviewScreen?
        public let skip_preview_screen: Swift.Bool?
        public struct DefaultPreviewScreen : Swift.Codable {
          public let elements: HMSSDK.HMSRoomLayout.LayoutData.Screens.Preview.DefaultPreviewScreen.Elements?
          public struct Elements : Swift.Codable {
            public let preview_header: HMSSDK.HMSRoomLayout.LayoutData.Screens.Preview.DefaultPreviewScreen.Elements.PreviewHeader?
            public struct PreviewHeader : Swift.Codable {
              public let title: Swift.String
              public let sub_title: Swift.String
              public func encode(to encoder: Swift.Encoder) throws
              public init(from decoder: Swift.Decoder) throws
            }
            public let join_form: HMSSDK.HMSRoomLayout.LayoutData.Screens.Preview.DefaultPreviewScreen.Elements.JoinForm
            public struct JoinForm : Swift.Codable {
              public let join_btn_type: HMSSDK.HMSRoomLayout.LayoutData.Screens.Preview.DefaultPreviewScreen.Elements.JoinForm.ButtonType
              public enum ButtonType : Swift.String, Swift.Codable {
                case join
                case goLive
                public init?(rawValue: Swift.String)
                public typealias RawValue = Swift.String
                public var rawValue: Swift.String {
                  get
                }
              }
              public let join_btn_label: Swift.String
              public let go_live_btn_label: Swift.String
              public func encode(to encoder: Swift.Encoder) throws
              public init(from decoder: Swift.Decoder) throws
            }
            public let noise_cancellation: HMSSDK.HMSRoomLayout.LayoutData.Screens.Preview.DefaultPreviewScreen.Elements.NoiseCancellation?
            public struct NoiseCancellation : Swift.Codable {
              public let enabled_by_default: Swift.Bool
              public func encode(to encoder: Swift.Encoder) throws
              public init(from decoder: Swift.Decoder) throws
            }
            public let virtual_background: HMSSDK.HMSRoomLayout.LayoutData.Screens.Preview.DefaultPreviewScreen.Elements.VirtualBackground?
            public struct VirtualBackground : Swift.Codable {
              public let background_media: [HMSSDK.HMSRoomLayout.LayoutData.Screens.Preview.DefaultPreviewScreen.Elements.VirtualBackground.BackgroundMedia]?
              public struct BackgroundMedia : Swift.Codable {
                public let url: Swift.String
                public let `default`: Swift.Bool
                public enum MediaType : Swift.String, Swift.Codable {
                  case image
                  case video
                  public init?(rawValue: Swift.String)
                  public typealias RawValue = Swift.String
                  public var rawValue: Swift.String {
                    get
                  }
                }
                public let media_type: HMSSDK.HMSRoomLayout.LayoutData.Screens.Preview.DefaultPreviewScreen.Elements.VirtualBackground.BackgroundMedia.MediaType
                public func encode(to encoder: Swift.Encoder) throws
                public init(from decoder: Swift.Decoder) throws
              }
              public func encode(to encoder: Swift.Encoder) throws
              public init(from decoder: Swift.Decoder) throws
            }
            public func encode(to encoder: Swift.Encoder) throws
            public init(from decoder: Swift.Decoder) throws
          }
          public func encode(to encoder: Swift.Encoder) throws
          public init(from decoder: Swift.Decoder) throws
        }
        public func encode(to encoder: Swift.Encoder) throws
        public init(from decoder: Swift.Decoder) throws
      }
      public let conferencing: HMSSDK.HMSRoomLayout.LayoutData.Screens.Conferencing
      public struct Conferencing : Swift.Codable {
        public struct Elements : Swift.Codable {
          public let chat: HMSSDK.HMSRoomLayout.LayoutData.Screens.Conferencing.Elements.Chat?
          public struct Chat : Swift.Codable {
            public let initial_state: HMSSDK.HMSRoomLayout.LayoutData.Screens.Conferencing.Elements.Chat.InitialState
            public enum InitialState : Swift.String, Swift.Codable {
              case CHAT_STATE_OPEN
              case CHAT_STATE_CLOSE
              public init?(rawValue: Swift.String)
              public typealias RawValue = Swift.String
              public var rawValue: Swift.String {
                get
              }
            }
            public let is_overlay: Swift.Bool
            public let allow_pinning_messages: Swift.Bool
            public let public_chat_enabled: Swift.Bool
            public let roles_whitelist: [Swift.String]
            public let private_chat_enabled: Swift.Bool
            public let chat_title: Swift.String
            public let message_placeholder: Swift.String
            public struct Controls : Swift.Codable {
              public let can_disable_chat: Swift.Bool
              public let can_block_user: Swift.Bool
              public let can_hide_message: Swift.Bool
              public func encode(to encoder: Swift.Encoder) throws
              public init(from decoder: Swift.Decoder) throws
            }
            public let real_time_controls: HMSSDK.HMSRoomLayout.LayoutData.Screens.Conferencing.Elements.Chat.Controls?
            public func encode(to encoder: Swift.Encoder) throws
            public init(from decoder: Swift.Decoder) throws
          }
          public let participant_list: HMSSDK.HMSRoomLayout.LayoutData.Screens.Conferencing.Elements.ParticipantList?
          public struct ParticipantList : Swift.Codable {
            public func encode(to encoder: Swift.Encoder) throws
            public init(from decoder: Swift.Decoder) throws
          }
          public let video_tile_layout: HMSSDK.HMSRoomLayout.LayoutData.Screens.Conferencing.Elements.VideoTileLayout?
          public struct VideoTileLayout : Swift.Codable {
            public let grid: HMSSDK.HMSRoomLayout.LayoutData.Screens.Conferencing.Elements.VideoTileLayout.Grid
            public struct Grid : Swift.Codable {
              public let enable_local_tile_inset: Swift.Bool
              public let prominent_roles: [Swift.String]
              public let enable_spotlighting_peer: Swift.Bool
              public func encode(to encoder: Swift.Encoder) throws
              public init(from decoder: Swift.Decoder) throws
            }
            public func encode(to encoder: Swift.Encoder) throws
            public init(from decoder: Swift.Decoder) throws
          }
          public let emoji_reactions: HMSSDK.HMSRoomLayout.LayoutData.Screens.Conferencing.Elements.EmojiReactions?
          public struct EmojiReactions : Swift.Codable {
            public func encode(to encoder: Swift.Encoder) throws
            public init(from decoder: Swift.Decoder) throws
          }
          public let on_stage_exp: HMSSDK.HMSRoomLayout.LayoutData.Screens.Conferencing.Elements.OnStageExperience?
          public struct OnStageExperience : Swift.Codable {
            public let bring_to_stage_label: Swift.String
            public let remove_from_stage_label: Swift.String
            public let on_stage_role: Swift.String
            public let off_stage_roles: [Swift.String]
            public let skip_preview_for_role_change: Swift.Bool
            public func encode(to encoder: Swift.Encoder) throws
            public init(from decoder: Swift.Decoder) throws
          }
          public let hand_raise: HMSSDK.HMSRoomLayout.LayoutData.Screens.Conferencing.Elements.HandRaise?
          public struct HandRaise : Swift.Codable {
            public func encode(to encoder: Swift.Encoder) throws
            public init(from decoder: Swift.Decoder) throws
          }
          public let brb: HMSSDK.HMSRoomLayout.LayoutData.Screens.Conferencing.Elements.BRB?
          public struct BRB : Swift.Codable {
            public func encode(to encoder: Swift.Encoder) throws
            public init(from decoder: Swift.Decoder) throws
          }
          public let header: HMSSDK.HMSRoomLayout.LayoutData.Screens.Conferencing.Elements.ConferencingHeader?
          public struct ConferencingHeader : Swift.Codable {
            public let title: Swift.String
            public let description: Swift.String
            public func encode(to encoder: Swift.Encoder) throws
            public init(from decoder: Swift.Decoder) throws
          }
          public let noise_cancellation: HMSSDK.HMSRoomLayout.LayoutData.Screens.Conferencing.Elements.NoiseCancellation?
          public struct NoiseCancellation : Swift.Codable {
            public let enabled_by_default: Swift.Bool
            public func encode(to encoder: Swift.Encoder) throws
            public init(from decoder: Swift.Decoder) throws
          }
          public let virtual_background: HMSSDK.HMSRoomLayout.LayoutData.Screens.Conferencing.Elements.VirtualBackground?
          public struct VirtualBackground : Swift.Codable {
            public let background_media: [HMSSDK.HMSRoomLayout.LayoutData.Screens.Conferencing.Elements.VirtualBackground.BackgroundMedia]?
            public struct BackgroundMedia : Swift.Codable {
              public let url: Swift.String
              public let `default`: Swift.Bool
              public enum MediaType : Swift.String, Swift.Codable {
                case image
                case video
                public init?(rawValue: Swift.String)
                public typealias RawValue = Swift.String
                public var rawValue: Swift.String {
                  get
                }
              }
              public let media_type: HMSSDK.HMSRoomLayout.LayoutData.Screens.Conferencing.Elements.VirtualBackground.BackgroundMedia.MediaType
              public func encode(to encoder: Swift.Encoder) throws
              public init(from decoder: Swift.Decoder) throws
            }
            public func encode(to encoder: Swift.Encoder) throws
            public init(from decoder: Swift.Decoder) throws
          }
          public func encode(to encoder: Swift.Encoder) throws
          public init(from decoder: Swift.Decoder) throws
        }
        public let `default`: HMSSDK.HMSRoomLayout.LayoutData.Screens.Conferencing.DefaultConferencingScreen?
        public struct DefaultConferencingScreen : Swift.Codable {
          public let elements: HMSSDK.HMSRoomLayout.LayoutData.Screens.Conferencing.Elements?
          public func encode(to encoder: Swift.Encoder) throws
          public init(from decoder: Swift.Decoder) throws
        }
        public let hls_live_streaming: HMSSDK.HMSRoomLayout.LayoutData.Screens.Conferencing.DefaultConferencingScreen?
        public func encode(to encoder: Swift.Encoder) throws
        public init(from decoder: Swift.Decoder) throws
      }
      public let leave: HMSSDK.HMSRoomLayout.LayoutData.Screens.Leave?
      public struct Leave : Swift.Codable {
        public struct DefaultLeaveScreen : Swift.Codable {
          public struct Elements : Swift.Codable {
            public struct Feedback : Swift.Codable {
              public struct Comment : Swift.Codable {
                public let label: Swift.String, placeholder: Swift.String
                public func encode(to encoder: Swift.Encoder) throws
                public init(from decoder: Swift.Decoder) throws
              }
              public struct Rating : Swift.Codable {
                public let label: Swift.String
                public let value: Swift.Int
                public let emoji: Swift.String?, question: Swift.String?
                public let reasons: [Swift.String]?
                public func encode(to encoder: Swift.Encoder) throws
                public init(from decoder: Swift.Decoder) throws
              }
              public let title: Swift.String, sub_title: Swift.String
              public let ratings: [HMSSDK.HMSRoomLayout.LayoutData.Screens.Leave.DefaultLeaveScreen.Elements.Feedback.Rating]
              public let comment: HMSSDK.HMSRoomLayout.LayoutData.Screens.Leave.DefaultLeaveScreen.Elements.Feedback.Comment?
              public let submit_btn_label: Swift.String?
              public func encode(to encoder: Swift.Encoder) throws
              public init(from decoder: Swift.Decoder) throws
            }
            public let feedback: HMSSDK.HMSRoomLayout.LayoutData.Screens.Leave.DefaultLeaveScreen.Elements.Feedback?
            public func encode(to encoder: Swift.Encoder) throws
            public init(from decoder: Swift.Decoder) throws
          }
          public let elements: HMSSDK.HMSRoomLayout.LayoutData.Screens.Leave.DefaultLeaveScreen.Elements?
          public func encode(to encoder: Swift.Encoder) throws
          public init(from decoder: Swift.Decoder) throws
        }
        public let `default`: HMSSDK.HMSRoomLayout.LayoutData.Screens.Leave.DefaultLeaveScreen?
        public func encode(to encoder: Swift.Encoder) throws
        public init(from decoder: Swift.Decoder) throws
      }
      public func encode(to encoder: Swift.Encoder) throws
      public init(from decoder: Swift.Decoder) throws
    }
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension HMSSDK.HMSSDK {
  public func getRoomLayout(using authToken: Swift.String, completion: @escaping (HMSSDK.HMSRoomLayout?, Swift.Error?) -> Swift.Void)
}
@_inheritsConvenienceInitializers @objc public class HMSMicNode : HMSSDK.HMSAudioNode {
  @objc dynamic public init()
  @objc public var volume: Swift.Float {
    @objc get
    @objc set
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class HMSAudioNode : ObjectiveC.NSObject {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class HMSPollQuestionBuilder : ObjectiveC.NSObject {
  @objc public func withIndex(_ index: Swift.Int) -> HMSSDK.HMSPollQuestionBuilder
  @objc public func withCanBeSkipped(_ canBeSkipped: Swift.Bool) -> HMSSDK.HMSPollQuestionBuilder
  @objc public func withTitle(_ title: Swift.String) -> HMSSDK.HMSPollQuestionBuilder
  @objc public func withDuration(_ duration: Swift.Int) -> HMSSDK.HMSPollQuestionBuilder
  @objc public func withType(_ type: HMSSDK.HMSPollQuestionType) -> HMSSDK.HMSPollQuestionBuilder
  @objc public func addOption(with title: Swift.String) -> HMSSDK.HMSPollQuestionBuilder
  @objc public func addQuizOption(with title: Swift.String, isCorrect: Swift.Bool) -> HMSSDK.HMSPollQuestionBuilder
  @objc public func withCanChangeResponse(canChangeResponse: Swift.Bool) -> HMSSDK.HMSPollQuestionBuilder
  @objc public func withMinLength(minLength: Swift.Int) -> HMSSDK.HMSPollQuestionBuilder
  @objc public func withMaxLength(maxLength: Swift.Int) -> HMSSDK.HMSPollQuestionBuilder
  @objc public func withWeight(weight: Swift.Int) -> HMSSDK.HMSPollQuestionBuilder
  @objc public func withAnswerHidden(answerHidden: Swift.Bool) -> HMSSDK.HMSPollQuestionBuilder
  public func build() -> HMSSDK.HMSPollQuestion
  @objc override dynamic public init()
  @objc deinit
}
public struct HMSSessionFeedback {
  public var question: Swift.String
  public var rating: Swift.Int
  public var minRating: Swift.Int
  public var maxRating: Swift.Int
  public var reasons: [Swift.String]?
  public var comment: Swift.String?
  public init(question: Swift.String = "How was your experience?", rating: Swift.Int, minRating: Swift.Int = 1, maxRating: Swift.Int = 5, reasons: [Swift.String]? = nil, comment: Swift.String? = nil)
}
@_hasMissingDesignatedInitializers public class HMSDiagnostics {
  public func getAudioInputDeviceList() -> [HMSSDK.HMSAudioInputDevice]
  public func startMicCheck(inputDevice: HMSSDK.HMSAudioInputDevice = .systemDefault, timeInMillis: Swift.Int, completion: @escaping ((Swift.Result<Swift.Bool, Swift.Error>) -> Swift.Void), onLevelChange: ((Swift.Float) -> Swift.Void)? = nil)
  public func stopMicCheck()
  public func getAudioOutputDeviceList() -> [HMSSDK.HMSAudioOutputDevice]
  public func startSpeakerCheck(audioDevice: HMSSDK.HMSAudioOutputDevice = .speaker, completion: @escaping ((Swift.Result<Swift.Bool, Swift.Error>) -> Swift.Void))
  public func stopSpeakerCheck()
  public func getVideoInputDevices() -> [HMSSDK.HMSVideoInputDevice]
  public func startCameraCheck(device: HMSSDK.HMSVideoInputDevice = .frontCamera, completion: @escaping ((Swift.Result<HMSSDK.HMSLocalVideoTrack, Swift.Error>) -> Swift.Void))
  public func stopCameraCheck()
  public func startConnectivityCheck(region: Swift.String = "us", timeInMillis: Swift.Int = 20 * 1000, progress: ((HMSSDK.HMSConnectivityCheckState) -> Swift.Void)? = nil, completion: @escaping ((HMSSDK.HMSConnectivityCheckResult) -> Swift.Void))
  public func stopConnectivityCheck()
  @objc deinit
}
@objc extension HMSSDK.HMSInteractivityCenter {
  public typealias HMSWhiteboardUpdateListener = ((HMSSDK.HMSWhiteboard, HMSSDK.HMSWhiteboardUpdateType) -> Swift.Void)
  @objc dynamic public func addWhiteboardUpdateListener(_ listener: @escaping HMSSDK.HMSInteractivityCenter.HMSWhiteboardUpdateListener)
  @objc dynamic public func startWhiteboard(completion: @escaping HMSAnalyticsSDK.HMSOperationStatusHandler)
  @objc dynamic public func stopWhiteboard(completion: @escaping HMSAnalyticsSDK.HMSOperationStatusHandler)
}
@objc public enum HMSWhiteboardUpdateType : Swift.Int {
  case started
  case stopped
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class HMSInteractivityCenter : ObjectiveC.NSObject {
  @objc public var isWhiteboardEnabled: Swift.Bool
  public typealias HMSPollListener = ((HMSSDK.HMSPoll, HMSSDK.HMSPollUpdateType) -> Swift.Void)
  @objc public var polls: [HMSSDK.HMSPoll]
  @objc public func addPollUpdateListner(_ listener: @escaping HMSSDK.HMSInteractivityCenter.HMSPollListener)
  @objc public func quickStartPoll(with builder: HMSSDK.HMSPollBuilder, completion: @escaping ((Swift.Bool, Swift.Error?) -> Swift.Void))
  @objc public func create(poll: HMSSDK.HMSPoll, completion: @escaping HMSAnalyticsSDK.HMSOperationStatusHandler)
  public func setPollQuestions(poll: HMSSDK.HMSPoll, questions: [HMSSDK.HMSPollQuestion], completion: @escaping HMSAnalyticsSDK.HMSOperationStatusHandler)
  @objc public func start(poll: HMSSDK.HMSPoll, completion: @escaping HMSAnalyticsSDK.HMSOperationStatusHandler)
  @objc public func add(response: HMSSDK.HMSPollResponseBuilder, completion: @escaping (([HMSSDK.HMSPollQuestionResponseResult]?, Swift.Error?) -> Swift.Void))
  @objc public func stop(poll: HMSSDK.HMSPoll, completion: @escaping ((Swift.Bool, Swift.Error?) -> Swift.Void))
  @objc public func fetchPollQuestions(poll: HMSSDK.HMSPoll, completion: @escaping ((HMSSDK.HMSPoll?, Swift.Error?) -> Swift.Void))
  @objc public func fetchPollList(state: HMSSDK.HMSPollState, completion: @escaping (([HMSSDK.HMSPoll]?, Swift.Error?) -> Swift.Void))
  @objc public func fetchResponses(for poll: HMSSDK.HMSPoll, offset: Swift.Int, count: Swift.Int, myResponseOnly: Swift.Bool = false, completion: @escaping (([HMSSDK.HMSPollQuestionResponse]?, Swift.Error?) -> Swift.Void))
  @objc public func fetchPollResult(for poll: HMSSDK.HMSPoll, completion: @escaping ((HMSSDK.HMSPoll?, Swift.Error?) -> Swift.Void))
  @objc public func fetchLeaderboard(for poll: HMSSDK.HMSPoll, offset: Swift.Int, count: Swift.Int, includeCurrentPeer: Swift.Bool = false, completion: @escaping ((HMSSDK.HMSPollLeaderboardResponse?, Swift.Error?) -> Swift.Void))
  @objc deinit
}
@objc public enum HMSPollUpdateType : Swift.Int {
  case started
  case resultsUpdated
  case stopped
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class HMSCommonTrackSource : ObjectiveC.NSObject {
  @objc public static let regular: Swift.String
  @objc public static let screen: Swift.String
  @objc public static let plugin: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class HMSUtilities : ObjectiveC.NSObject {
  @objc public class func getDevices() -> [HMSSDK.HMSDevice]
  @objc public class func getAllVideoTracks(in room: HMSSDK.HMSRoom) -> [HMSSDK.HMSVideoTrack]
  @objc public class func getAllAudioTracks(in room: HMSSDK.HMSRoom) -> [HMSSDK.HMSAudioTrack]
  @objc public class func getPeer(for id: Swift.String, in room: HMSSDK.HMSRoom) -> HMSSDK.HMSPeer?
  @objc public class func getTrack(for id: Swift.String, in room: HMSSDK.HMSRoom) -> HMSSDK.HMSTrack?
  @objc public class func getAudioTrack(for id: Swift.String, in room: HMSSDK.HMSRoom) -> HMSSDK.HMSAudioTrack?
  @objc public class func getVideoTrack(for id: Swift.String, in room: HMSSDK.HMSRoom) -> HMSSDK.HMSVideoTrack?
  @objc override dynamic public init()
  @objc deinit
}
@objc @objcMembers public class HMSProxyConfig : ObjectiveC.NSObject {
  @objc public enum HMSProxyType : Swift.Int {
    case socks5
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc final public let type: HMSSDK.HMSProxyConfig.HMSProxyType
  @objc final public let host: Swift.String
  @objc final public let port: Swift.Int
  @objc public init(type: HMSSDK.HMSProxyConfig.HMSProxyType, host: Swift.String, port: Swift.Int)
  @objc deinit
}
@objc @objcMembers public class HMSConfig : ObjectiveC.NSObject {
  @objc final public let userName: Swift.String
  @objc final public let userID: Swift.String
  @objc final public let roomID: Swift.String
  @objc final public let authToken: Swift.String
  @objc final public let shouldSkipPIIEvents: Swift.Bool
  @objc final public let metadata: Swift.String?
  @objc final public let endpoint: Swift.String?
  @objc final public let proxy: HMSSDK.HMSProxyConfig?
  @objc final public let iceServers: [HMSSDK.HMSICEServer]?
  @objc final public let captureNetworkQualityInPreview: Swift.Bool
  @objc public init(userName: Swift.String = "iOS User", authToken: Swift.String, shouldSkipPIIEvents: Swift.Bool = false, metadata: Swift.String? = nil, endpoint: Swift.String? = nil, captureNetworkQualityInPreview: Swift.Bool = false, proxy: HMSSDK.HMSProxyConfig? = nil, iceServers: [HMSSDK.HMSICEServer]? = nil)
  @objc @available(*, deprecated, message: "Use init(userName:authToken:)")
  public init(userName: Swift.String = "iOS User", userID: Swift.String, roomID: Swift.String, authToken: Swift.String, shouldSkipPIIEvents: Swift.Bool = false, metadata: Swift.String? = nil, endpoint: Swift.String? = nil)
  @objc deinit
}
@objc public protocol HMSUpdateListener {
  @objc(onJoin:) func on(join room: HMSSDK.HMSRoom)
  @objc(onRoom:update:) func on(room: HMSSDK.HMSRoom, update: HMSSDK.HMSRoomUpdate)
  @objc(onPeerListUpdate:removed:) func onPeerListUpdate(added: [HMSSDK.HMSPeer], removed: [HMSSDK.HMSPeer])
  @objc(onPeer:update:) func on(peer: HMSSDK.HMSPeer, update: HMSSDK.HMSPeerUpdate)
  @objc(onTrack:update:peer:) func on(track: HMSSDK.HMSTrack, update: HMSSDK.HMSTrackUpdate, for peer: HMSSDK.HMSPeer)
  @objc(onError:) func on(error: Swift.Error)
  @objc(onMessage:) func on(message: HMSSDK.HMSMessage)
  @objc(onTranscripts:) optional func on(transcripts: HMSSDK.HMSTranscripts)
  @objc(roleChangeRequest:) optional func on(roleChangeRequest: HMSSDK.HMSRoleChangeRequest)
  @objc(changeTrackStateRequest:) optional func on(changeTrackStateRequest: HMSSDK.HMSChangeTrackStateRequest)
  @objc(removedFromRoom:) optional func on(removedFromRoom notification: HMSSDK.HMSRemovedFromRoomNotification)
  @objc(onUpdatedSpeakers:) func on(updated speakers: [HMSSDK.HMSSpeaker])
  @objc func onReconnecting()
  @objc func onReconnected()
  @objc(onLocalAudioStats:track:peer:) optional func on(localAudioStats: HMSSDK.HMSLocalAudioStats, track: HMSSDK.HMSAudioTrack, peer: HMSSDK.HMSPeer)
  @objc(onLocalVideoStats:track:peer:) optional func on(localVideoStats: [HMSSDK.HMSLocalVideoStats], track: HMSSDK.HMSVideoTrack, peer: HMSSDK.HMSPeer)
  @objc(onRemoteAudioStats:track:peer:) optional func on(remoteAudioStats: HMSSDK.HMSRemoteAudioStats, track: HMSSDK.HMSAudioTrack, peer: HMSSDK.HMSPeer)
  @objc(onRemoteVideoStats:track:peer:) optional func on(remoteVideoStats: HMSSDK.HMSRemoteVideoStats, track: HMSSDK.HMSVideoTrack, peer: HMSSDK.HMSPeer)
  @objc(onRTCStats:) optional func on(rtcStats: HMSSDK.HMSRTCStatsReport)
  @objc(onSessionStoreAvailable:) optional func on(sessionStoreAvailable store: HMSSDK.HMSSessionStore)
}
@objc public protocol HMSPreviewListener {
  @objc(onPreview:localTracks:) func onPreview(room: HMSSDK.HMSRoom, localTracks: [HMSSDK.HMSTrack])
  @objc(onError:) func on(error: Swift.Error)
  @objc(onRoom:update:) optional func on(room: HMSSDK.HMSRoom, update: HMSSDK.HMSRoomUpdate)
  @objc(onPeerListUpdate:removed:) optional func onPeerListUpdate(added: [HMSSDK.HMSPeer], removed: [HMSSDK.HMSPeer])
  @objc(onPeer:update:) optional func on(peer: HMSSDK.HMSPeer, update: HMSSDK.HMSPeerUpdate)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class HMSSDK : ObjectiveC.NSObject {
  @objc public static func build(block: ((HMSSDK.HMSSDK) -> Swift.Void)? = nil) -> HMSSDK.HMSSDK
  @objc public func preview(config: HMSSDK.HMSConfig, delegate: HMSSDK.HMSPreviewListener)
  @objc public func preview(role: HMSSDK.HMSRole, completion: @escaping (([HMSSDK.HMSTrack]?, Swift.Error?) -> Swift.Void))
  @objc public func cancelPreview()
  @objc public func join(config: HMSSDK.HMSConfig, delegate: HMSSDK.HMSUpdateListener)
  @objc public func leave(_ completion: ((Swift.Bool, Swift.Error?) -> Swift.Void)? = nil)
  @objc public var localPeer: HMSSDK.HMSLocalPeer? {
    @objc get
  }
  @objc public var remotePeers: [HMSSDK.HMSRemotePeer]? {
    @objc get
  }
  @objc public var roles: [HMSSDK.HMSRole] {
    @objc get
  }
  @objc public var room: HMSSDK.HMSRoom? {
    @objc get
  }
  @objc public var interactivityCenter: HMSSDK.HMSInteractivityCenter {
    @objc get
  }
  @objc public func sendBroadcastMessage(type: Swift.String = "chat", message: Swift.String, priority: HMSSDK.HMSCommandPriority = .medium, completion: ((HMSSDK.HMSMessage?, Swift.Error?) -> Swift.Void)? = nil)
  @objc public func sendGroupMessage(type: Swift.String = "chat", message: Swift.String, roles: [HMSSDK.HMSRole], priority: HMSSDK.HMSCommandPriority = .medium, completion: ((HMSSDK.HMSMessage?, Swift.Error?) -> Swift.Void)? = nil)
  @objc public func sendDirectMessage(type: Swift.String = "chat", message: Swift.String, peer: HMSSDK.HMSPeer, priority: HMSSDK.HMSCommandPriority = .medium, completion: ((HMSSDK.HMSMessage?, Swift.Error?) -> Swift.Void)? = nil)
  @objc public func change(metadata: Swift.String, priority: HMSSDK.HMSCommandPriority = .medium, completion: ((Swift.Bool, Swift.Error?) -> Swift.Void)? = nil)
  @objc public func change(name: Swift.String, priority: HMSSDK.HMSCommandPriority = .medium, completion: ((Swift.Bool, Swift.Error?) -> Swift.Void)? = nil)
  @objc public func changeRole(for peer: HMSSDK.HMSPeer, to role: HMSSDK.HMSRole, force: Swift.Bool = false, completion: ((Swift.Bool, Swift.Error?) -> Swift.Void)? = nil)
  @objc public func changeRolesOfAllPeers(to role: HMSSDK.HMSRole, limitToRoles: [HMSSDK.HMSRole]? = nil, completion: ((Swift.Bool, Swift.Error?) -> Swift.Void)? = nil)
  @objc public func accept(changeRole request: HMSSDK.HMSRoleChangeRequest, completion: ((Swift.Bool, Swift.Error?) -> Swift.Void)? = nil)
  @objc public func changeTrackState(for remoteTrack: HMSSDK.HMSTrack, mute: Swift.Bool, completion: ((Swift.Bool, Swift.Error?) -> Swift.Void)? = nil)
  public func changeTrackState(mute: Swift.Bool, for trackKind: HMSSDK.HMSTrackKind? = nil, source: Swift.String? = nil, roles: [HMSSDK.HMSRole]? = nil, completion: ((Swift.Bool, Swift.Error?) -> Swift.Void)? = nil)
  @objc public func removePeer(_ peer: HMSSDK.HMSPeer, reason: Swift.String, completion: ((Swift.Bool, Swift.Error?) -> Swift.Void)? = nil)
  @objc public func endRoom(lock: Swift.Bool = false, reason: Swift.String, completion: ((Swift.Bool, Swift.Error?) -> Swift.Void)? = nil)
  @objc public func startRTMPOrRecording(config: HMSSDK.HMSRTMPConfig, completion: ((Swift.Bool, Swift.Error?) -> Swift.Void)? = nil)
  @objc public func stopRTMPAndRecording(completion: ((Swift.Bool, Swift.Error?) -> Swift.Void)? = nil)
  @objc public func startHLSStreaming(config: HMSSDK.HMSHLSConfig? = nil, completion: ((Swift.Bool, Swift.Error?) -> Swift.Void)? = nil)
  @objc public func stopHLSStreaming(config: HMSSDK.HMSHLSConfig? = nil, completion: ((Swift.Bool, Swift.Error?) -> Swift.Void)? = nil)
  @objc public func sendHLSTimedMetadata(_ metadata: [HMSSDK.HMSHLSTimedMetadata], completion: ((Swift.Bool, Swift.Error?) -> Swift.Void)? = nil)
  @objc @available(*, deprecated, message: "Please use HMSSessionStore instead")
  public func getSessionMetadata(completion: ((Swift.String?, Swift.Error?) -> Swift.Void)? = nil)
  @objc @available(*, deprecated, message: "Please use HMSSessionStore instead")
  public func setSessionMetadata(_ metadata: Swift.String, completion: ((Swift.Bool, Swift.Error?) -> Swift.Void)? = nil)
  @objc public func raiseLocalPeerHand(completion: ((Swift.Bool, Swift.Error?) -> Swift.Void)? = nil)
  @objc public func lowerLocalPeerHand(completion: ((Swift.Bool, Swift.Error?) -> Swift.Void)? = nil)
  @objc public func lowerRemotePeerHand(_ peer: HMSSDK.HMSPeer, completion: ((Swift.Bool, Swift.Error?) -> Swift.Void)? = nil)
  public func getPeerListIterator(options: HMSSDK.HMSPeerListIteratorOptions = HMSPeerListIteratorOptions()) -> HMSSDK.HMSPeerListIterator
  @objc public func findPeersByName(_ name: Swift.String, limit: Swift.Int = 10, offset: Swift.Int = 0, completion: (([HMSSDK.HMSPeer]?, Swift.Error?) -> Swift.Void)? = nil)
  @objc public func add(delegate: HMSSDK.HMSUpdateListener)
  @objc public func remove(delegate: HMSSDK.HMSUpdateListener)
  @objc public var trackSettings: HMSSDK.HMSTrackSettings {
    @objc get
    @objc set
  }
  @objc public var analyticsLevel: HMSAnalyticsSDK.HMSAnalyticsEventLevel {
    @objc get
    @objc set
  }
  @objc weak public var logger: HMSAnalyticsSDK.HMSLogger? {
    @objc get
    @objc set
  }
  @objc public func prepareForExternalAudioPlayback()
  @objc public func resumeAfterExternalAudioPlayback()
  @objc public var appGroup: Swift.String? {
    @objc get
    @objc set
  }
  @objc public func screenBroadcastAudioReceiverNode() throws -> HMSSDK.HMSScreenBroadcastAudioNode
  @objc public func activateForScreenSharing()
  public var frameworkInfo: HMSSDK.HMSFrameworkInfo? {
    get
    set
  }
  @objc public func getAudioOutputDeviceList() -> [HMSSDK.HMSAudioOutputDevice]
  @objc public func switchAudioOutput(to device: HMSSDK.HMSAudioOutputDevice) throws
  @objc public func startAppScreenCapture(completion: ((Swift.Error?) -> Swift.Void)? = nil)
  @objc public func stopAppScreenCapture(completion: ((Swift.Error?) -> Swift.Void)? = nil)
  public static func submitFeedback(_ feedback: HMSSDK.HMSSessionFeedback, completion: ((Swift.Bool, Swift.Error?) -> Swift.Void)? = nil)
  @objc public func startTranscription(completion: ((Swift.Bool, Swift.Error?) -> Swift.Void)? = nil)
  @objc public func stopTranscription(completion: ((Swift.Bool, Swift.Error?) -> Swift.Void)? = nil)
  public func getDiagnosticsSDK() -> HMSSDK.HMSDiagnostics
  @objc deinit
}
@objc public enum HMSCommandPriority : Swift.Int {
  case low
  case medium
  case high
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class HMSPollResponseBuilder : ObjectiveC.NSObject {
  @objc public init(poll: HMSSDK.HMSPoll)
  public func addResponse(for question: HMSSDK.HMSPollQuestion, options: [HMSSDK.HMSPollQuestionOption], duration: Swift.Int? = nil)
  public func addResponse(for openQuestion: HMSSDK.HMSPollQuestion, text: Swift.String, duration: Swift.Int? = nil)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class HMSTrackFactory : ObjectiveC.NSObject {
  @objc deinit
}
public class HMSPeerListIteratorOptions {
  final public let filterByRoleName: Swift.String?
  final public let filterByPeerIds: [Swift.String]?
  final public let limit: Swift.Int
  public init(filterByRoleName: Swift.String? = nil, filterByPeerIds: [Swift.String]? = nil, limit: Swift.Int = 10)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class HMSPeerListIterator {
  final public let options: HMSSDK.HMSPeerListIteratorOptions
  public var hasNext: Swift.Bool {
    get
  }
  public var totalCount: Swift.Int {
    get
  }
  public func next(completion: @escaping (([HMSSDK.HMSPeer]?, Swift.Error?) -> Swift.Void))
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class HMSPollResponsePeerInfo : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let userHash: Swift.String?
  @objc final public let peerID: Swift.String?
  @objc final public let customerUserID: Swift.String?
  @objc final public let userName: Swift.String?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class HMSDevice : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum HMSPeerUpdate : Swift.Int, Swift.CustomStringConvertible {
  case peerJoined
  case peerLeft
  case roleUpdated
  case nameUpdated
  case metadataUpdated
  case handRaiseUpdated
  case networkQualityUpdated
  case defaultUpdate
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class HMSPollResult : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let totalResponse: Swift.Int
  @objc final public let userCount: Swift.Int
  @objc final public let maxUserCount: Swift.Int
  @objc final public let questions: [HMSSDK.HMSPollQuestionResult]
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
extension HMSSDK.HMSPeerType : Swift.Equatable {}
extension HMSSDK.HMSPeerType : Swift.Hashable {}
extension HMSSDK.HMSPeerType : Swift.RawRepresentable {}
extension HMSSDK.HMSErrorAction : Swift.Equatable {}
extension HMSSDK.HMSErrorAction : Swift.Hashable {}
extension HMSSDK.HMSErrorAction : Swift.RawRepresentable {}
extension HMSSDK.HMSPollQuestionType : Swift.Equatable {}
extension HMSSDK.HMSPollQuestionType : Swift.Hashable {}
extension HMSSDK.HMSPollQuestionType : Swift.RawRepresentable {}
extension HMSSDK.HMSFrameworkType : Swift.Equatable {}
extension HMSSDK.HMSFrameworkType : Swift.Hashable {}
extension HMSSDK.HMSFrameworkType : Swift.RawRepresentable {}
extension HMSSDK.HMSWhiteboard.WhiteboardState : Swift.Equatable {}
extension HMSSDK.HMSWhiteboard.WhiteboardState : Swift.Hashable {}
extension HMSSDK.HMSWhiteboard.WhiteboardState : Swift.RawRepresentable {}
extension HMSSDK.HMSWhiteboard.PermissionType : Swift.Equatable {}
extension HMSSDK.HMSWhiteboard.PermissionType : Swift.Hashable {}
extension HMSSDK.HMSCommandPriority : Swift.Equatable {}
extension HMSSDK.HMSCommandPriority : Swift.Hashable {}
extension HMSSDK.HMSCommandPriority : Swift.RawRepresentable {}
extension HMSSDK.HMSRoomUpdate : Swift.Equatable {}
extension HMSSDK.HMSRoomUpdate : Swift.Hashable {}
extension HMSSDK.HMSRoomUpdate : Swift.RawRepresentable {}
extension HMSSDK.HMSConnectivityCheckState : Swift.Equatable {}
extension HMSSDK.HMSConnectivityCheckState : Swift.Hashable {}
extension HMSSDK.HMSConnectivityCheckState : Swift.RawRepresentable {}
extension HMSSDK.HMSPollUserTrackingMode : Swift.Equatable {}
extension HMSSDK.HMSPollUserTrackingMode : Swift.Hashable {}
extension HMSSDK.HMSPollUserTrackingMode : Swift.RawRepresentable {}
extension HMSSDK.HMSPollState : Swift.Equatable {}
extension HMSSDK.HMSPollState : Swift.Hashable {}
extension HMSSDK.HMSPollState : Swift.RawRepresentable {}
extension HMSSDK.HMSPollCategory : Swift.Equatable {}
extension HMSSDK.HMSPollCategory : Swift.Hashable {}
extension HMSSDK.HMSPollCategory : Swift.RawRepresentable {}
extension HMSSDK.HMSRecordingState : Swift.Equatable {}
extension HMSSDK.HMSRecordingState : Swift.Hashable {}
extension HMSSDK.HMSRecordingState : Swift.RawRepresentable {}
extension HMSSDK.HMSTranscriptionStatus : Swift.Equatable {}
extension HMSSDK.HMSTranscriptionStatus : Swift.Hashable {}
extension HMSSDK.HMSTranscriptionStatus : Swift.RawRepresentable {}
extension HMSSDK.HMSStreamingState : Swift.Equatable {}
extension HMSSDK.HMSStreamingState : Swift.Hashable {}
extension HMSSDK.HMSStreamingState : Swift.RawRepresentable {}
extension HMSSDK.HMSHLSPlaylistType : Swift.Equatable {}
extension HMSSDK.HMSHLSPlaylistType : Swift.Hashable {}
extension HMSSDK.HMSHLSPlaylistType : Swift.RawRepresentable {}
extension HMSSDK.HMSTrackUpdate : Swift.Equatable {}
extension HMSSDK.HMSTrackUpdate : Swift.Hashable {}
extension HMSSDK.HMSTrackUpdate : Swift.RawRepresentable {}
extension HMSSDK.HMSMessageRecipientType : Swift.Equatable {}
extension HMSSDK.HMSMessageRecipientType : Swift.Hashable {}
extension HMSSDK.HMSMessageRecipientType : Swift.RawRepresentable {}
extension HMSSDK.HMSPluginUnsupportedErrorTypes : Swift.Equatable {}
extension HMSSDK.HMSPluginUnsupportedErrorTypes : Swift.Hashable {}
extension HMSSDK.HMSPluginUnsupportedErrorTypes : Swift.RawRepresentable {}
extension HMSSDK.HMSPluginSupportResultType : Swift.Equatable {}
extension HMSSDK.HMSPluginSupportResultType : Swift.Hashable {}
extension HMSSDK.HMSPluginSupportResultType : Swift.RawRepresentable {}
extension HMSSDK.HMSRoomLayout.LayoutData.Screens.Preview.DefaultPreviewScreen.Elements.JoinForm.ButtonType : Swift.Equatable {}
extension HMSSDK.HMSRoomLayout.LayoutData.Screens.Preview.DefaultPreviewScreen.Elements.JoinForm.ButtonType : Swift.Hashable {}
extension HMSSDK.HMSRoomLayout.LayoutData.Screens.Preview.DefaultPreviewScreen.Elements.JoinForm.ButtonType : Swift.RawRepresentable {}
extension HMSSDK.HMSRoomLayout.LayoutData.Screens.Preview.DefaultPreviewScreen.Elements.VirtualBackground.BackgroundMedia.MediaType : Swift.Equatable {}
extension HMSSDK.HMSRoomLayout.LayoutData.Screens.Preview.DefaultPreviewScreen.Elements.VirtualBackground.BackgroundMedia.MediaType : Swift.Hashable {}
extension HMSSDK.HMSRoomLayout.LayoutData.Screens.Preview.DefaultPreviewScreen.Elements.VirtualBackground.BackgroundMedia.MediaType : Swift.RawRepresentable {}
extension HMSSDK.HMSRoomLayout.LayoutData.Screens.Conferencing.Elements.Chat.InitialState : Swift.Equatable {}
extension HMSSDK.HMSRoomLayout.LayoutData.Screens.Conferencing.Elements.Chat.InitialState : Swift.Hashable {}
extension HMSSDK.HMSRoomLayout.LayoutData.Screens.Conferencing.Elements.Chat.InitialState : Swift.RawRepresentable {}
extension HMSSDK.HMSRoomLayout.LayoutData.Screens.Conferencing.Elements.VirtualBackground.BackgroundMedia.MediaType : Swift.Equatable {}
extension HMSSDK.HMSRoomLayout.LayoutData.Screens.Conferencing.Elements.VirtualBackground.BackgroundMedia.MediaType : Swift.Hashable {}
extension HMSSDK.HMSRoomLayout.LayoutData.Screens.Conferencing.Elements.VirtualBackground.BackgroundMedia.MediaType : Swift.RawRepresentable {}
extension HMSSDK.HMSWhiteboardUpdateType : Swift.Equatable {}
extension HMSSDK.HMSWhiteboardUpdateType : Swift.Hashable {}
extension HMSSDK.HMSWhiteboardUpdateType : Swift.RawRepresentable {}
extension HMSSDK.HMSPollUpdateType : Swift.Equatable {}
extension HMSSDK.HMSPollUpdateType : Swift.Hashable {}
extension HMSSDK.HMSPollUpdateType : Swift.RawRepresentable {}
extension HMSSDK.HMSProxyConfig.HMSProxyType : Swift.Equatable {}
extension HMSSDK.HMSProxyConfig.HMSProxyType : Swift.Hashable {}
extension HMSSDK.HMSProxyConfig.HMSProxyType : Swift.RawRepresentable {}
extension HMSSDK.HMSPeerUpdate : Swift.Equatable {}
extension HMSSDK.HMSPeerUpdate : Swift.Hashable {}
extension HMSSDK.HMSPeerUpdate : Swift.RawRepresentable {}
